/*
 * Computes the Longest Common Subsequence of two strings, one of 
 * length m and the other of length n in O(m*n) time
 */
def main(u32 x, u32 n) -> u32:
    u32[5] A = [0; 5]
    u32[5] B = [0; 5]

    u32 sum = 0
    for u32 i in 0..5 do
        sum = sum + i
        A[i] = sum
        B[i] = 10 - sum
    endfor

    u32[5] LCS = [0; 5]
    u32 arr_size = 5

    // Dynamic programming memo
    u32[31] LL = [0; 31]
    // Hold choices made at each step, for use when backtracking
    u32[31] choices = [0; 31]
    // Used when backtracking
    u32 diag = 0
    u32 down = 0
    u32 right = 0

    // Go backwards from i = n-1 downto 0
    u32 i = n - 1
    while i + 1 > 0 do
        u32 j = n - 1
        while j + 1 > 0 do
            if A[i] == B[j] then
                if i+1 < n && j+1 < n then
                    diag = LL[(i+1) * arr_size + j+1]
                else
                    diag = 0
                endif
                // Diagonal jump
                LL[i * arr_size + j] = 1 + diag
                choices[i * arr_size + j] = 0
            else
                if i+1 < n && j < n then
                    down = LL[(i+1) * arr_size + j]
                else 
                    down = 0
                endif
                if i < n && j+1 < n then
                    right = LL[i * arr_size + j+1]
                else
                    right = 0
                endif
                // Assertion: down and right differ by at most 1
                if down == right + 1 then
                    // Jump down
                    LL[i * arr_size + j] = down
                    choices[i * arr_size + j] = 1
                else
                    // Jump right if down == right or right == down + 1.
                    LL[i * arr_size + j] = right
                    choices[i * arr_size + j] = 2
                endif
            endif
            j = j - 1
        endwhile
        i = i - 1
    endwhile


    // Construct LCS, allowing it to have intermittent zero characters
    u32 iPtr = 0
    u32 jPtr = 0 // Pointers to where in LL we are with respect to backtracking

    u32 i = 0
    while i < n do
        LCS[i] = 0 //If A[i] is not in the LCS, this remains 0.
        u32 j = 0
        while j < n do
            if i == iPtr && j == jPtr then // Loop until we meet up with the iPtr and jPtr
                if choices[i * arr_size + j] == 0 then // we made a diagonal jump here
                    LCS[i] = A[i]
                    iPtr = iPtr + 1
                    jPtr = jPtr + 1
                else
                    if choices[i * arr_size + j] == 1 then // jump down
                        iPtr = iPtr + 1
                    else // jump right
                        jPtr = jPtr + 1
                    endif
                endif
            endif
            j = j + 1
        endwhile
        i = i + 1
    endwhile

    // Now move any string terminator (\0) characters in LCS to the end ala insertion sort
    u32 i = 1
    while i < n do
        u32 inserted = 0
        u32 j = 0
        while j < i do
            if LCS[j] == 0 && inserted == 0 then
                // Swap LCS[j] and LCS[i].
                LCS[j] = LCS[i]
                LCS[i] = 0
                inserted = 1
            endif
            j = j + 1
        endwhile
        i = i + 1
    endwhile


    return LCS[x]