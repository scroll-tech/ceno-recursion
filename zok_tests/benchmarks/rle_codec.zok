
def main(u32 x, u32 y, u32 n) -> u32:
    u32[[20, 60]] txt = [0; [20, 60]]

    // Initialize array
    u32 next_gap = 1
    u32 gap = next_gap
    for u32 i in 0..[20, 60] do
        txt[i] = next_gap
        gap = gap - 1
        if gap == 0 then
            next_gap = next_gap + 1
            gap = next_gap
        endif
    endfor

    // compress
    u32[[20, 60, 20, 60]] compr = [0; [20, 60, 20, 60]]

    // Can't seem to get function call working, so embed manually
    u32 next_c = 0
    u32 next_data = txt[0]
    u32 next_count = 0

    for u32 next_t in 0..[20, 60] do
        if next_t < n then
            if txt[next_t] == next_data then
                next_count = next_count + 1
            else
                compr[next_c] = next_data
                compr[next_c + 1] = next_count
                next_c = next_c + 2
                next_data = txt[next_t]
                next_count = 1
            endif
        endif
    endfor

    // write out the last one
    compr[next_c] = next_data
    compr[next_c + 1] = next_count
    next_c = next_c + 2
    u32 m = next_c


    // decompress
    u32[[20, 60]] out = [0; [20, 60]]

    next_c = 0
    u32 next_t = 0
    next_data = 0
    next_count = 0
    for u32 counter in 0..[20, 60] do
        if next_c < m then
            if next_count == 0 then
                next_data = compr[next_c]
                next_count = compr[next_c + 1]
            endif
            if next_count > 0 then
                out[next_t] = next_data
                next_t = next_t + 1
                next_count = next_count - 1
            endif
            if next_count == 0 then
                next_c = next_c + 2
            endif
        endif
    endfor
    u32 p = next_t
    

    assert(n == p)
    for u32 i in 0..[20, 60] do
        if i < n then
            // This check is bugged in CirC, disable it for now
            // assert(txt[i] == out[i])
        endif
    endfor


    return (txt[x] + compr[x] + out[x]) * y 