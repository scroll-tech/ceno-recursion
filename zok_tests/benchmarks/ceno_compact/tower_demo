--
Set Input Output after Spilling:
Entry block: 0

Block 0:
Func: main, Scope: 0
Exec Bound: 1, While Loop: false, Num VM Ops: 25
Inputs:
Outputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    initial_logup_evals@tower_verify.main.1.0: field
    initial_logup_evals_len@tower_verify.main.1.0: u32
    initial_prod_evals@tower_verify.main.1.0: field
    initial_prod_evals_len@tower_verify.main.1.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    num_fanin@tower_verify.main.1.0: u32
    rp@.append_message_field: field
    t^hash.append_message_field.0.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Instructions:
    field %SP = 0 <Field>
    field %BP = 0 <Field>
    field %TS = 0 <Field>
    field %AS = 0 <Field>
    field[2][1 <U32>] array^0.main.0.0
    field[2 <U32>] array^1.main.0.0
    field init^0.main.0.1 = 1 <Field>
    field init^1.main.0.0 = 0 <Field>
    array^1.main.0.0[0 <Field>] = init^0.main.0.1 <field>, init
    array^1.main.0.0[1 <Field>] = init^1.main.0.0 <field>, init
    field init^0.main.0.1 = array^1.main.0.0
    u32 index@.main.0.0 = 0 <U32>
    if index@.main.0.0 != 1 <U32>:
        array^0.main.0.0[index@.main.0.0] = init^0.main.0.1 <field>, init
    else:
        Dummy Load
    field initial_prod_evals.main.0.0 = array^0.main.0.0
    field[4][1 <U32>] array^0.main.0.1
    field[4 <U32>] array^1.main.0.1
    field init^0.main.0.3 = 1 <Field>
    field init^1.main.0.0 = 2 <Field>
    field init^2.main.0.0 = 1 <Field>
    field init^3.main.0.0 = 2 <Field>
    array^1.main.0.1[0 <Field>] = init^0.main.0.3 <field>, init
    array^1.main.0.1[1 <Field>] = init^1.main.0.0 <field>, init
    array^1.main.0.1[2 <Field>] = init^2.main.0.0 <field>, init
    array^1.main.0.1[3 <Field>] = init^3.main.0.0 <field>, init
    field init^0.main.0.3 = array^1.main.0.1
    u32 index@.main.0.0 = 0 <U32>
    if index@.main.0.0 != 1 <U32>:
        array^0.main.0.1[index@.main.0.0] = init^0.main.0.3 <field>, init
    else:
        Dummy Load
    field initial_logup_evals.main.0.0 = array^0.main.0.1
    IOPProverMessage { evaluations: field[3] }[3][1 <U32>] array^0.main.0.2
    IOPProverMessage { evaluations: field[3] }[3 <U32>] array^1.main.0.2
    field[3 <U32>] array^2.main.0.0
    field init^0.main.0.6 = 1 <Field>
    field init^1.main.0.0 = 2 <Field>
    field init^2.main.0.0 = 3 <Field>
    array^2.main.0.0[0 <Field>] = init^0.main.0.6 <field>, init
    array^2.main.0.0[1 <Field>] = init^1.main.0.0 <field>, init
    array^2.main.0.0[2 <Field>] = init^2.main.0.0 <field>, init
    field struct^0^evaluations.main.0.0 = array^2.main.0.0
    field init^0^evaluations.main.0.0 = struct^0^evaluations.main.0.0
    u32 index@.main.0.0 = 0 <U32>
    if index@.main.0.0 != 3 <U32>:
        array^1.main.0.2[index@.main.0.0] = init^0^evaluations.main.0.0 <field>, init
        index@.main.0.0 = index@.main.0.0 + 1 <U32>
    else:
        Dummy Load
    if index@.main.0.0 != 3 <U32>:
        array^1.main.0.2[index@.main.0.0] = init^0^evaluations.main.0.0 <field>, init
        index@.main.0.0 = index@.main.0.0 + 1 <U32>
    else:
        Dummy Load
    if index@.main.0.0 != 3 <U32>:
        array^1.main.0.2[index@.main.0.0] = init^0^evaluations.main.0.0 <field>, init
    else:
        Dummy Load
    field init^0.main.0.6 = array^1.main.0.2
    u32 index@.main.0.0 = 0 <U32>
    if index@.main.0.0 != 1 <U32>:
        array^0.main.0.2[index@.main.0.0] = init^0.main.0.6 <field>, init
    else:
        Dummy Load
    u32[1 <U32>] array^3.main.0.0
    u32 init^0.main.0.7 = 1 <U32>
    u32 index@.main.0.0 = 0 <U32>
    if index@.main.0.0 != 1 <U32>:
        array^3.main.0.0[index@.main.0.0] = init^0.main.0.7 <u32>, init
    else:
        Dummy Load
    field[1][1][1 <U32>] array^4.main.0.0
    field[1][1 <U32>] array^5.main.0.0
    field[1 <U32>] array^6.main.0.0
    field init^0.main.0.10 = 0 <Field>
    u32 index@.main.0.0 = 0 <U32>
    if index@.main.0.0 != 1 <U32>:
        array^6.main.0.0[index@.main.0.0] = init^0.main.0.10 <field>, init
    else:
        Dummy Load
    field init^0.main.0.10 = array^6.main.0.0
    u32 index@.main.0.0 = 0 <U32>
    if index@.main.0.0 != 1 <U32>:
        array^5.main.0.0[index@.main.0.0] = init^0.main.0.10 <field>, init
    else:
        Dummy Load
    field init^0.main.0.10 = array^5.main.0.0
    u32 index@.main.0.0 = 0 <U32>
    if index@.main.0.0 != 1 <U32>:
        array^4.main.0.0[index@.main.0.0] = init^0.main.0.10 <field>, init
    else:
        Dummy Load
    field[1][4][1 <U32>] array^7.main.0.0
    field[4][1 <U32>] array^8.main.0.0
    field[4 <U32>] array^9.main.0.0
    field init^0.main.0.13 = 0 <Field>
    field init^1.main.0.0 = 0 <Field>
    field init^2.main.0.0 = 0 <Field>
    field init^3.main.0.0 = 0 <Field>
    array^9.main.0.0[0 <Field>] = init^0.main.0.13 <field>, init
    array^9.main.0.0[1 <Field>] = init^1.main.0.0 <field>, init
    array^9.main.0.0[2 <Field>] = init^2.main.0.0 <field>, init
    array^9.main.0.0[3 <Field>] = init^3.main.0.0 <field>, init
    field init^0.main.0.13 = array^9.main.0.0
    u32 index@.main.0.0 = 0 <U32>
    if index@.main.0.0 != 1 <U32>:
        array^8.main.0.0[index@.main.0.0] = init^0.main.0.13 <field>, init
    else:
        Dummy Load
    field init^0.main.0.13 = array^8.main.0.0
    u32 index@.main.0.0 = 0 <U32>
    if index@.main.0.0 != 1 <U32>:
        array^7.main.0.0[index@.main.0.0] = init^0.main.0.13 <field>, init
    else:
        Dummy Load
    u32 struct^1^prod_spec_size.main.0.0 = 1 <U32>
    u32 struct^1^logup_spec_size.main.0.0 = 1 <U32>
    field struct^1^proofs.main.0.0 = array^0.main.0.2
    field struct^1^layer_per_spec.main.0.0 = array^3.main.0.0
    field struct^1^prod_specs_eval.main.0.0 = array^4.main.0.0
    field struct^1^logup_specs_eval.main.0.0 = array^7.main.0.0
    field tower_proofs^layer_per_spec.main.0.0 = struct^1^layer_per_spec.main.0.0
    u32 tower_proofs^logup_spec_size.main.0.0 = struct^1^logup_spec_size.main.0.0
    field tower_proofs^logup_specs_eval.main.0.0 = struct^1^logup_specs_eval.main.0.0
    u32 tower_proofs^prod_spec_size.main.0.0 = struct^1^prod_spec_size.main.0.0
    field tower_proofs^prod_specs_eval.main.0.0 = struct^1^prod_specs_eval.main.0.0
    field tower_proofs^proofs.main.0.0 = struct^1^proofs.main.0.0
    u32 expected_max_round.main.0.0 = 2 <U32>
    u32 num_fanin.main.0.0 = 2 <U32>
    u32 log2_num_fanin.main.0.0 = 1 <U32>
    field struct^0^hash@new_transcript.main.1.0 = 2 <Field>
    field %RET^hash.main = struct^0^hash@new_transcript.main.1.0
    field ret^0^hash.main.0.0 = %RET^hash.main
    field t^hash.main.0.0 = ret^0^hash.main.0.0
    field initial_prod_evals@tower_verify.main.1.0 = initial_prod_evals.main.0.0
    field initial_logup_evals@tower_verify.main.1.0 = initial_logup_evals.main.0.0
    field tower_proofs^layer_per_spec@tower_verify.main.1.0 = tower_proofs^layer_per_spec.main.0.0
    u32 tower_proofs^logup_spec_size@tower_verify.main.1.0 = tower_proofs^logup_spec_size.main.0.0
    field tower_proofs^logup_specs_eval@tower_verify.main.1.0 = tower_proofs^logup_specs_eval.main.0.0
    u32 tower_proofs^prod_spec_size@tower_verify.main.1.0 = tower_proofs^prod_spec_size.main.0.0
    field tower_proofs^prod_specs_eval@tower_verify.main.1.0 = tower_proofs^prod_specs_eval.main.0.0
    field tower_proofs^proofs@tower_verify.main.1.0 = tower_proofs^proofs.main.0.0
    u32 expected_max_round@tower_verify.main.1.0 = expected_max_round.main.0.0
    u32 num_fanin@tower_verify.main.1.0 = num_fanin.main.0.0
    u32 log2_num_fanin@tower_verify.main.1.0 = log2_num_fanin.main.0.0
    field t^hash@tower_verify.main.1.0 = t^hash.main.0.0
    assert num_fanin@tower_verify.main.1.0 == 2 <U32>
    assert log2_num_fanin@tower_verify.main.1.0 == 1 <U32>
    u32 initial_prod_evals_len@tower_verify.main.1.0 = tower_proofs^prod_spec_size@tower_verify.main.1.0
    u32 initial_logup_evals_len@tower_verify.main.1.0 = tower_proofs^logup_spec_size@tower_verify.main.1.0
    field t^hash.append_message_field.0.0 = t^hash@tower_verify.main.1.0
    %PHY[%SP + 0] = %BP <field>
    field %BP = %SP
    %PHY[%SP + 1] = expected_max_round@tower_verify.main.1.0 <u32>
    field rp@.append_message_field = 28 <Field>
    %SP = %SP + 2 <Field>
Transition: -> 70

Block 1:
Func: main, Scope: 7
Exec Bound: 1, While Loop: true, Num VM Ops: 1
Inputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha_pows@tower_verify.main.1.0: field
    eval_len@tower_verify.main.1.0: u32
    evals@build_eq_x_r_vec_sequential@tower_verify.main.5.0: field
    expected_max_round@tower_verify.main.1.0: u32
    i@build_eq_x_r_vec_sequential@tower_verify.main.5.0: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    logup_spec_p_input_layer_eval@tower_verify.main.1.0: field
    logup_spec_q_input_layer_eval@tower_verify.main.1.0: field
    next_size@build_eq_x_r_vec_sequential@tower_verify.main.5.0: u32
    num_fanin@tower_verify.main.1.0: u32
    prod_spec_input_layer_eval@tower_verify.main.1.0: field
    r@build_eq_x_r_vec_sequential@tower_verify.main.5.0: field
    r_len@build_eq_x_r_vec_sequential@tower_verify.main.5.0: u32
    round@tower_verify.main.1.0: u32
    rt_prime@tower_verify.main.1.0: field
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Outputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha_pows@tower_verify.main.1.0: field
    eval_len@tower_verify.main.1.0: u32
    evals@build_eq_x_r_vec_sequential@tower_verify.main.5.0: field
    expected_max_round@tower_verify.main.1.0: u32
    i@build_eq_x_r_vec_sequential@tower_verify.main.5.0: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    j@build_eq_x_r_vec_sequential@tower_verify.main.5.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    logup_spec_p_input_layer_eval@tower_verify.main.1.0: field
    logup_spec_q_input_layer_eval@tower_verify.main.1.0: field
    next_size@build_eq_x_r_vec_sequential@tower_verify.main.5.0: u32
    num_fanin@tower_verify.main.1.0: u32
    prod_spec_input_layer_eval@tower_verify.main.1.0: field
    r@build_eq_x_r_vec_sequential@tower_verify.main.5.0: field
    r_i@build_eq_x_r_vec_sequential@tower_verify.main.5.0: field
    r_len@build_eq_x_r_vec_sequential@tower_verify.main.5.0: u32
    round@tower_verify.main.1.0: u32
    rt_prime@tower_verify.main.1.0: field
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Instructions:
    field load^0@build_eq_x_r_vec_sequential@tower_verify.main.5.0 = r@build_eq_x_r_vec_sequential@tower_verify.main.5.0[r_len@build_eq_x_r_vec_sequential@tower_verify.main.5.0 - 1 <U32> - i@build_eq_x_r_vec_sequential@tower_verify.main.5.0]
    field r_i@build_eq_x_r_vec_sequential@tower_verify.main.5.0 = load^0@build_eq_x_r_vec_sequential@tower_verify.main.5.0
    u32 j@build_eq_x_r_vec_sequential@tower_verify.main.5.0 = next_size@build_eq_x_r_vec_sequential@tower_verify.main.5.0
Transition:
    j@build_eq_x_r_vec_sequential@tower_verify.main.5.0 != 0 <U32> ? -> 2 : -> 3

Block 2:
Func: main, Scope: 9
Exec Bound: 1, While Loop: true, Num VM Ops: 4
Inputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha_pows@tower_verify.main.1.0: field
    eval_len@tower_verify.main.1.0: u32
    evals@build_eq_x_r_vec_sequential@tower_verify.main.5.0: field
    expected_max_round@tower_verify.main.1.0: u32
    i@build_eq_x_r_vec_sequential@tower_verify.main.5.0: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    j@build_eq_x_r_vec_sequential@tower_verify.main.5.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    logup_spec_p_input_layer_eval@tower_verify.main.1.0: field
    logup_spec_q_input_layer_eval@tower_verify.main.1.0: field
    next_size@build_eq_x_r_vec_sequential@tower_verify.main.5.0: u32
    num_fanin@tower_verify.main.1.0: u32
    prod_spec_input_layer_eval@tower_verify.main.1.0: field
    r@build_eq_x_r_vec_sequential@tower_verify.main.5.0: field
    r_i@build_eq_x_r_vec_sequential@tower_verify.main.5.0: field
    r_len@build_eq_x_r_vec_sequential@tower_verify.main.5.0: u32
    round@tower_verify.main.1.0: u32
    rt_prime@tower_verify.main.1.0: field
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Outputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha_pows@tower_verify.main.1.0: field
    eval_len@tower_verify.main.1.0: u32
    evals@build_eq_x_r_vec_sequential@tower_verify.main.5.0: field
    expected_max_round@tower_verify.main.1.0: u32
    i@build_eq_x_r_vec_sequential@tower_verify.main.5.0: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    j@build_eq_x_r_vec_sequential@tower_verify.main.5.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    logup_spec_p_input_layer_eval@tower_verify.main.1.0: field
    logup_spec_q_input_layer_eval@tower_verify.main.1.0: field
    next_size@build_eq_x_r_vec_sequential@tower_verify.main.5.0: u32
    num_fanin@tower_verify.main.1.0: u32
    prod_spec_input_layer_eval@tower_verify.main.1.0: field
    r@build_eq_x_r_vec_sequential@tower_verify.main.5.0: field
    r_i@build_eq_x_r_vec_sequential@tower_verify.main.5.0: field
    r_len@build_eq_x_r_vec_sequential@tower_verify.main.5.0: u32
    round@tower_verify.main.1.0: u32
    rt_prime@tower_verify.main.1.0: field
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Instructions:
    u32 j@build_eq_x_r_vec_sequential@tower_verify.main.5.0 = j@build_eq_x_r_vec_sequential@tower_verify.main.5.0 - 1 <U32>
    field load^0@build_eq_x_r_vec_sequential@tower_verify.main.6.0 = evals@build_eq_x_r_vec_sequential@tower_verify.main.5.0[j@build_eq_x_r_vec_sequential@tower_verify.main.5.0]
    evals@build_eq_x_r_vec_sequential@tower_verify.main.5.0[2 <U32> * j@build_eq_x_r_vec_sequential@tower_verify.main.5.0 + 1 <U32>] = r_i@build_eq_x_r_vec_sequential@tower_verify.main.5.0 * load^0@build_eq_x_r_vec_sequential@tower_verify.main.6.0 <field>
    field load^0@build_eq_x_r_vec_sequential@tower_verify.main.6.0 = evals@build_eq_x_r_vec_sequential@tower_verify.main.5.0[j@build_eq_x_r_vec_sequential@tower_verify.main.5.0]
    evals@build_eq_x_r_vec_sequential@tower_verify.main.5.0[2 <U32> * j@build_eq_x_r_vec_sequential@tower_verify.main.5.0] = 1 <Field> - r_i@build_eq_x_r_vec_sequential@tower_verify.main.5.0 * load^0@build_eq_x_r_vec_sequential@tower_verify.main.6.0 <field>
Transition:
    j@build_eq_x_r_vec_sequential@tower_verify.main.5.0 != 0 <U32> ? -> 2 : -> 3

Block 3:
Func: main, Scope: 8
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha_pows@tower_verify.main.1.0: field
    eval_len@tower_verify.main.1.0: u32
    evals@build_eq_x_r_vec_sequential@tower_verify.main.5.0: field
    expected_max_round@tower_verify.main.1.0: u32
    i@build_eq_x_r_vec_sequential@tower_verify.main.5.0: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    logup_spec_p_input_layer_eval@tower_verify.main.1.0: field
    logup_spec_q_input_layer_eval@tower_verify.main.1.0: field
    next_size@build_eq_x_r_vec_sequential@tower_verify.main.5.0: u32
    num_fanin@tower_verify.main.1.0: u32
    prod_spec_input_layer_eval@tower_verify.main.1.0: field
    r@build_eq_x_r_vec_sequential@tower_verify.main.5.0: field
    r_len@build_eq_x_r_vec_sequential@tower_verify.main.5.0: u32
    round@tower_verify.main.1.0: u32
    rt_prime@tower_verify.main.1.0: field
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Outputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha_pows@tower_verify.main.1.0: field
    eval_len@tower_verify.main.1.0: u32
    evals@build_eq_x_r_vec_sequential@tower_verify.main.5.0: field
    expected_max_round@tower_verify.main.1.0: u32
    i@build_eq_x_r_vec_sequential@tower_verify.main.5.0: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    logup_spec_p_input_layer_eval@tower_verify.main.1.0: field
    logup_spec_q_input_layer_eval@tower_verify.main.1.0: field
    next_size@build_eq_x_r_vec_sequential@tower_verify.main.5.0: u32
    num_fanin@tower_verify.main.1.0: u32
    prod_spec_input_layer_eval@tower_verify.main.1.0: field
    r@build_eq_x_r_vec_sequential@tower_verify.main.5.0: field
    r_len@build_eq_x_r_vec_sequential@tower_verify.main.5.0: u32
    round@tower_verify.main.1.0: u32
    rt_prime@tower_verify.main.1.0: field
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Instructions:
    u32 next_size@build_eq_x_r_vec_sequential@tower_verify.main.5.0 = next_size@build_eq_x_r_vec_sequential@tower_verify.main.5.0 * 2 <U32>
    i@build_eq_x_r_vec_sequential@tower_verify.main.5.0 = i@build_eq_x_r_vec_sequential@tower_verify.main.5.0 + 1 <U32>
Transition:
    i@build_eq_x_r_vec_sequential@tower_verify.main.5.0 != r_len@build_eq_x_r_vec_sequential@tower_verify.main.5.0 ? -> 1 : -> 4

Block 4:
Func: main, Scope: 6
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha_pows@tower_verify.main.1.0: field
    eval_len@tower_verify.main.1.0: u32
    evals@build_eq_x_r_vec_sequential@tower_verify.main.5.0: field
    expected_max_round@tower_verify.main.1.0: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    logup_spec_p_input_layer_eval@tower_verify.main.1.0: field
    logup_spec_q_input_layer_eval@tower_verify.main.1.0: field
    num_fanin@tower_verify.main.1.0: u32
    prod_spec_input_layer_eval@tower_verify.main.1.0: field
    round@tower_verify.main.1.0: u32
    rt_prime@tower_verify.main.1.0: field
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Outputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha_pows@tower_verify.main.1.0: field
    coeffs@tower_verify.main.1.0: field
    eval_len@tower_verify.main.1.0: u32
    expected_max_round@tower_verify.main.1.0: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    logup_spec_p_input_layer_eval@tower_verify.main.1.0: field
    logup_spec_q_input_layer_eval@tower_verify.main.1.0: field
    num_fanin@tower_verify.main.1.0: u32
    prod_spec_evals@tower_verify.main.1.0: field
    prod_spec_input_layer_eval@tower_verify.main.1.0: field
    round@tower_verify.main.1.0: u32
    rt_prime@tower_verify.main.1.0: field
    spec_index@tower_verify.main.1.2: u32
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Instructions:
    field %RET.main = evals@build_eq_x_r_vec_sequential@tower_verify.main.5.0
    field ret^0@tower_verify.main.2.4 = %RET.main
    field coeffs@tower_verify.main.1.0 = ret^0@tower_verify.main.2.4
    field prod_spec_evals@tower_verify.main.1.0 = 0 <Field>
    u32 spec_index@tower_verify.main.1.2 = 0 <U32>
Transition:
    spec_index@tower_verify.main.1.2 != tower_proofs^prod_spec_size@tower_verify.main.1.0 ? -> 60 : -> 66

Block 5:
Func: eq_eval, Scope: 0
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    eval_len@tower_verify.main.1.0: u32
    expected_evaluation@tower_verify.main.1.0: field
    expected_max_round@tower_verify.main.1.0: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    len.eq_eval.0.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    logup_spec_p_input_layer_eval@tower_verify.main.1.0: field
    logup_spec_q_input_layer_eval@tower_verify.main.1.0: field
    num_fanin@tower_verify.main.1.0: u32
    out_rt@tower_verify.main.1.0: field
    p1@tower_verify.main.1.0: field
    p2@tower_verify.main.1.0: field
    prod@tower_verify.main.1.0: field
    prod_spec_input_layer_eval@tower_verify.main.1.0: field
    q1@tower_verify.main.1.0: field
    q2@tower_verify.main.1.0: field
    round@tower_verify.main.1.0: u32
    rp@.eq_eval: field
    rt@tower_verify.main.1.0: field
    rt_len@tower_verify.main.1.0: u32
    spec_index@tower_verify.main.1.0: u32
    spec_index@tower_verify.main.1.1: u32
    sumcheck_claim^expected_evaluation@tower_verify.main.1.0: field
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
    x.eq_eval.0.0: field
    y.eq_eval.0.0: field
Outputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    eval_len@tower_verify.main.1.0: u32
    expected_evaluation@tower_verify.main.1.0: field
    expected_max_round@tower_verify.main.1.0: u32
    i.eq_eval.0.0: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    len.eq_eval.0.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    logup_spec_p_input_layer_eval@tower_verify.main.1.0: field
    logup_spec_q_input_layer_eval@tower_verify.main.1.0: field
    num_fanin@tower_verify.main.1.0: u32
    out_rt@tower_verify.main.1.0: field
    p1@tower_verify.main.1.0: field
    p2@tower_verify.main.1.0: field
    prod@tower_verify.main.1.0: field
    prod_spec_input_layer_eval@tower_verify.main.1.0: field
    q1@tower_verify.main.1.0: field
    q2@tower_verify.main.1.0: field
    res.eq_eval.0.0: field
    round@tower_verify.main.1.0: u32
    rp@.eq_eval: field
    rt@tower_verify.main.1.0: field
    rt_len@tower_verify.main.1.0: u32
    spec_index@tower_verify.main.1.0: u32
    spec_index@tower_verify.main.1.1: u32
    sumcheck_claim^expected_evaluation@tower_verify.main.1.0: field
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
    x.eq_eval.0.0: field
    y.eq_eval.0.0: field
Instructions:
    field res.eq_eval.0.0 = 1 <Field>
    u32 i.eq_eval.0.0 = 0 <U32>
Transition:
    i.eq_eval.0.0 != len.eq_eval.0.0 ? -> 6 : -> 7

Block 6:
Func: eq_eval, Scope: 2
Exec Bound: 1, While Loop: true, Num VM Ops: 2
Inputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    eval_len@tower_verify.main.1.0: u32
    expected_evaluation@tower_verify.main.1.0: field
    expected_max_round@tower_verify.main.1.0: u32
    i.eq_eval.0.0: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    len.eq_eval.0.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    logup_spec_p_input_layer_eval@tower_verify.main.1.0: field
    logup_spec_q_input_layer_eval@tower_verify.main.1.0: field
    num_fanin@tower_verify.main.1.0: u32
    out_rt@tower_verify.main.1.0: field
    p1@tower_verify.main.1.0: field
    p2@tower_verify.main.1.0: field
    prod@tower_verify.main.1.0: field
    prod_spec_input_layer_eval@tower_verify.main.1.0: field
    q1@tower_verify.main.1.0: field
    q2@tower_verify.main.1.0: field
    res.eq_eval.0.0: field
    round@tower_verify.main.1.0: u32
    rp@.eq_eval: field
    rt@tower_verify.main.1.0: field
    rt_len@tower_verify.main.1.0: u32
    spec_index@tower_verify.main.1.0: u32
    spec_index@tower_verify.main.1.1: u32
    sumcheck_claim^expected_evaluation@tower_verify.main.1.0: field
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
    x.eq_eval.0.0: field
    y.eq_eval.0.0: field
Outputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    eval_len@tower_verify.main.1.0: u32
    expected_evaluation@tower_verify.main.1.0: field
    expected_max_round@tower_verify.main.1.0: u32
    i.eq_eval.0.0: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    len.eq_eval.0.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    logup_spec_p_input_layer_eval@tower_verify.main.1.0: field
    logup_spec_q_input_layer_eval@tower_verify.main.1.0: field
    num_fanin@tower_verify.main.1.0: u32
    out_rt@tower_verify.main.1.0: field
    p1@tower_verify.main.1.0: field
    p2@tower_verify.main.1.0: field
    prod@tower_verify.main.1.0: field
    prod_spec_input_layer_eval@tower_verify.main.1.0: field
    q1@tower_verify.main.1.0: field
    q2@tower_verify.main.1.0: field
    res.eq_eval.0.0: field
    round@tower_verify.main.1.0: u32
    rp@.eq_eval: field
    rt@tower_verify.main.1.0: field
    rt_len@tower_verify.main.1.0: u32
    spec_index@tower_verify.main.1.0: u32
    spec_index@tower_verify.main.1.1: u32
    sumcheck_claim^expected_evaluation@tower_verify.main.1.0: field
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
    x.eq_eval.0.0: field
    y.eq_eval.0.0: field
Instructions:
    field load^0.eq_eval.0.0 = x.eq_eval.0.0[i.eq_eval.0.0]
    field xi.eq_eval.0.0 = load^0.eq_eval.0.0
    field load^0.eq_eval.0.0 = y.eq_eval.0.0[i.eq_eval.0.0]
    field yi.eq_eval.0.0 = load^0.eq_eval.0.0
    field xi_yi.eq_eval.0.0 = xi.eq_eval.0.0 * yi.eq_eval.0.0
    field res.eq_eval.0.0 = res.eq_eval.0.0 * xi_yi.eq_eval.0.0 + xi_yi.eq_eval.0.0 - xi.eq_eval.0.0 - yi.eq_eval.0.0 + 1 <Field>
    i.eq_eval.0.0 = i.eq_eval.0.0 + 1 <U32>
Transition:
    i.eq_eval.0.0 != len.eq_eval.0.0 ? -> 6 : -> 7

Block 7:
Func: eq_eval, Scope: 1
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    eval_len@tower_verify.main.1.0: u32
    expected_evaluation@tower_verify.main.1.0: field
    expected_max_round@tower_verify.main.1.0: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    logup_spec_p_input_layer_eval@tower_verify.main.1.0: field
    logup_spec_q_input_layer_eval@tower_verify.main.1.0: field
    num_fanin@tower_verify.main.1.0: u32
    out_rt@tower_verify.main.1.0: field
    p1@tower_verify.main.1.0: field
    p2@tower_verify.main.1.0: field
    prod@tower_verify.main.1.0: field
    prod_spec_input_layer_eval@tower_verify.main.1.0: field
    q1@tower_verify.main.1.0: field
    q2@tower_verify.main.1.0: field
    res.eq_eval.0.0: field
    round@tower_verify.main.1.0: u32
    rp@.eq_eval: field
    rt@tower_verify.main.1.0: field
    rt_len@tower_verify.main.1.0: u32
    spec_index@tower_verify.main.1.0: u32
    spec_index@tower_verify.main.1.1: u32
    sumcheck_claim^expected_evaluation@tower_verify.main.1.0: field
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Outputs:
    %AS: field
    %BP: field
    %RET.eq_eval: field
    %SP: field
    %TS: field
    eval_len@tower_verify.main.1.0: u32
    expected_evaluation@tower_verify.main.1.0: field
    expected_max_round@tower_verify.main.1.0: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    logup_spec_p_input_layer_eval@tower_verify.main.1.0: field
    logup_spec_q_input_layer_eval@tower_verify.main.1.0: field
    num_fanin@tower_verify.main.1.0: u32
    out_rt@tower_verify.main.1.0: field
    p1@tower_verify.main.1.0: field
    p2@tower_verify.main.1.0: field
    prod@tower_verify.main.1.0: field
    prod_spec_input_layer_eval@tower_verify.main.1.0: field
    q1@tower_verify.main.1.0: field
    q2@tower_verify.main.1.0: field
    round@tower_verify.main.1.0: u32
    rt@tower_verify.main.1.0: field
    rt_len@tower_verify.main.1.0: u32
    spec_index@tower_verify.main.1.0: u32
    spec_index@tower_verify.main.1.1: u32
    sumcheck_claim^expected_evaluation@tower_verify.main.1.0: field
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Instructions:
    field %RET.eq_eval = res.eq_eval.0.0
Transition: -> rp@.eq_eval

Block 8:
Func: mle_eval, Scope: 0
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha@tower_verify.main.2.0: field
    alpha_denominator@tower_verify.main.1.0: field
    alpha_numerator@tower_verify.main.1.0: field
    alpha_pows@tower_verify.main.1.0: field
    expected_max_round@tower_verify.main.1.0: u32
    i@tower_verify.main.1.2: u32
    i@tower_verify.main.1.3: u32
    initial_claim@tower_verify.main.1.0: field
    initial_logup_evals@tower_verify.main.1.0: field
    initial_logup_evals_len@tower_verify.main.1.0: u32
    initial_prod_evals@tower_verify.main.1.0: field
    initial_prod_evals_len@tower_verify.main.1.0: u32
    initial_rt@tower_verify.main.1.0: field
    log2_num_fanin@tower_verify.main.1.0: u32
    mle_denominator@tower_verify.main.1.0: field
    mle_len.mle_eval.0.0: u32
    num_fanin@tower_verify.main.1.0: u32
    point.mle_eval.0.0: field
    point_len.mle_eval.0.0: u32
    rp@.mle_eval: field
    self.mle_eval.0.0: field
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Outputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha@tower_verify.main.2.0: field
    alpha_denominator@tower_verify.main.1.0: field
    alpha_numerator@tower_verify.main.1.0: field
    alpha_pows@tower_verify.main.1.0: field
    expected_max_round@tower_verify.main.1.0: u32
    i.mle_eval.0.0: u32
    i@tower_verify.main.1.2: u32
    i@tower_verify.main.1.3: u32
    initial_claim@tower_verify.main.1.0: field
    initial_logup_evals@tower_verify.main.1.0: field
    initial_logup_evals_len@tower_verify.main.1.0: u32
    initial_prod_evals@tower_verify.main.1.0: field
    initial_prod_evals_len@tower_verify.main.1.0: u32
    initial_rt@tower_verify.main.1.0: field
    log2_num_fanin@tower_verify.main.1.0: u32
    mle_denominator@tower_verify.main.1.0: field
    mle_len.mle_eval.0.0: u32
    num_fanin@tower_verify.main.1.0: u32
    point.mle_eval.0.0: field
    point_len.mle_eval.0.0: u32
    rp@.mle_eval: field
    self.mle_eval.0.0: field
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Instructions:
    u32 i.mle_eval.0.0 = 0 <U32>
Transition:
    i.mle_eval.0.0 != point_len.mle_eval.0.0 ? -> 9 : -> 12

Block 9:
Func: mle_eval, Scope: 2
Exec Bound: 1, While Loop: true, Num VM Ops: 0
Inputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha@tower_verify.main.2.0: field
    alpha_denominator@tower_verify.main.1.0: field
    alpha_numerator@tower_verify.main.1.0: field
    alpha_pows@tower_verify.main.1.0: field
    expected_max_round@tower_verify.main.1.0: u32
    i.mle_eval.0.0: u32
    i@tower_verify.main.1.2: u32
    i@tower_verify.main.1.3: u32
    initial_claim@tower_verify.main.1.0: field
    initial_logup_evals@tower_verify.main.1.0: field
    initial_logup_evals_len@tower_verify.main.1.0: u32
    initial_prod_evals@tower_verify.main.1.0: field
    initial_prod_evals_len@tower_verify.main.1.0: u32
    initial_rt@tower_verify.main.1.0: field
    log2_num_fanin@tower_verify.main.1.0: u32
    mle_denominator@tower_verify.main.1.0: field
    mle_len.mle_eval.0.0: u32
    num_fanin@tower_verify.main.1.0: u32
    point.mle_eval.0.0: field
    point_len.mle_eval.0.0: u32
    rp@.mle_eval: field
    self.mle_eval.0.0: field
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Outputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha@tower_verify.main.2.0: field
    alpha_denominator@tower_verify.main.1.0: field
    alpha_numerator@tower_verify.main.1.0: field
    alpha_pows@tower_verify.main.1.0: field
    expected_max_round@tower_verify.main.1.0: u32
    i.mle_eval.0.0: u32
    i@tower_verify.main.1.2: u32
    i@tower_verify.main.1.3: u32
    initial_claim@tower_verify.main.1.0: field
    initial_logup_evals@tower_verify.main.1.0: field
    initial_logup_evals_len@tower_verify.main.1.0: u32
    initial_prod_evals@tower_verify.main.1.0: field
    initial_prod_evals_len@tower_verify.main.1.0: u32
    initial_rt@tower_verify.main.1.0: field
    j.mle_eval.0.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    mle_denominator@tower_verify.main.1.0: field
    mle_len.mle_eval.0.0: u32
    num_fanin@tower_verify.main.1.0: u32
    point.mle_eval.0.0: field
    point_len.mle_eval.0.0: u32
    rp@.mle_eval: field
    self.mle_eval.0.0: field
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Instructions:
    u32 mle_len.mle_eval.0.0 = mle_len.mle_eval.0.0 / 2 <U32>
    u32 j.mle_eval.0.0 = 0 <U32>
Transition:
    j.mle_eval.0.0 != mle_len.mle_eval.0.0 ? -> 10 : -> 11

Block 10:
Func: mle_eval, Scope: 5
Exec Bound: 1, While Loop: true, Num VM Ops: 5
Inputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha@tower_verify.main.2.0: field
    alpha_denominator@tower_verify.main.1.0: field
    alpha_numerator@tower_verify.main.1.0: field
    alpha_pows@tower_verify.main.1.0: field
    expected_max_round@tower_verify.main.1.0: u32
    i.mle_eval.0.0: u32
    i@tower_verify.main.1.2: u32
    i@tower_verify.main.1.3: u32
    initial_claim@tower_verify.main.1.0: field
    initial_logup_evals@tower_verify.main.1.0: field
    initial_logup_evals_len@tower_verify.main.1.0: u32
    initial_prod_evals@tower_verify.main.1.0: field
    initial_prod_evals_len@tower_verify.main.1.0: u32
    initial_rt@tower_verify.main.1.0: field
    j.mle_eval.0.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    mle_denominator@tower_verify.main.1.0: field
    mle_len.mle_eval.0.0: u32
    num_fanin@tower_verify.main.1.0: u32
    point.mle_eval.0.0: field
    point_len.mle_eval.0.0: u32
    rp@.mle_eval: field
    self.mle_eval.0.0: field
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Outputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha@tower_verify.main.2.0: field
    alpha_denominator@tower_verify.main.1.0: field
    alpha_numerator@tower_verify.main.1.0: field
    alpha_pows@tower_verify.main.1.0: field
    expected_max_round@tower_verify.main.1.0: u32
    i.mle_eval.0.0: u32
    i@tower_verify.main.1.2: u32
    i@tower_verify.main.1.3: u32
    initial_claim@tower_verify.main.1.0: field
    initial_logup_evals@tower_verify.main.1.0: field
    initial_logup_evals_len@tower_verify.main.1.0: u32
    initial_prod_evals@tower_verify.main.1.0: field
    initial_prod_evals_len@tower_verify.main.1.0: u32
    initial_rt@tower_verify.main.1.0: field
    j.mle_eval.0.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    mle_denominator@tower_verify.main.1.0: field
    mle_len.mle_eval.0.0: u32
    num_fanin@tower_verify.main.1.0: u32
    point.mle_eval.0.0: field
    point_len.mle_eval.0.0: u32
    rp@.mle_eval: field
    self.mle_eval.0.0: field
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Instructions:
    field load^0.mle_eval.0.0 = point.mle_eval.0.0[i.mle_eval.0.0]
    field load^1.mle_eval.0.0 = self.mle_eval.0.0[j.mle_eval.0.0]
    field load^2.mle_eval.0.0 = point.mle_eval.0.0[i.mle_eval.0.0]
    field load^3.mle_eval.0.0 = self.mle_eval.0.0[mle_len.mle_eval.0.0 + j.mle_eval.0.0]
    self.mle_eval.0.0[j.mle_eval.0.0] = 1 <Field> - load^0.mle_eval.0.0 * load^1.mle_eval.0.0 + load^2.mle_eval.0.0 * load^3.mle_eval.0.0 <field>
    j.mle_eval.0.0 = j.mle_eval.0.0 + 1 <U32>
Transition:
    j.mle_eval.0.0 != mle_len.mle_eval.0.0 ? -> 10 : -> 11

Block 11:
Func: mle_eval, Scope: 4
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha@tower_verify.main.2.0: field
    alpha_denominator@tower_verify.main.1.0: field
    alpha_numerator@tower_verify.main.1.0: field
    alpha_pows@tower_verify.main.1.0: field
    expected_max_round@tower_verify.main.1.0: u32
    i.mle_eval.0.0: u32
    i@tower_verify.main.1.2: u32
    i@tower_verify.main.1.3: u32
    initial_claim@tower_verify.main.1.0: field
    initial_logup_evals@tower_verify.main.1.0: field
    initial_logup_evals_len@tower_verify.main.1.0: u32
    initial_prod_evals@tower_verify.main.1.0: field
    initial_prod_evals_len@tower_verify.main.1.0: u32
    initial_rt@tower_verify.main.1.0: field
    log2_num_fanin@tower_verify.main.1.0: u32
    mle_denominator@tower_verify.main.1.0: field
    mle_len.mle_eval.0.0: u32
    num_fanin@tower_verify.main.1.0: u32
    point.mle_eval.0.0: field
    point_len.mle_eval.0.0: u32
    rp@.mle_eval: field
    self.mle_eval.0.0: field
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Outputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha@tower_verify.main.2.0: field
    alpha_denominator@tower_verify.main.1.0: field
    alpha_numerator@tower_verify.main.1.0: field
    alpha_pows@tower_verify.main.1.0: field
    expected_max_round@tower_verify.main.1.0: u32
    i.mle_eval.0.0: u32
    i@tower_verify.main.1.2: u32
    i@tower_verify.main.1.3: u32
    initial_claim@tower_verify.main.1.0: field
    initial_logup_evals@tower_verify.main.1.0: field
    initial_logup_evals_len@tower_verify.main.1.0: u32
    initial_prod_evals@tower_verify.main.1.0: field
    initial_prod_evals_len@tower_verify.main.1.0: u32
    initial_rt@tower_verify.main.1.0: field
    log2_num_fanin@tower_verify.main.1.0: u32
    mle_denominator@tower_verify.main.1.0: field
    mle_len.mle_eval.0.0: u32
    num_fanin@tower_verify.main.1.0: u32
    point.mle_eval.0.0: field
    point_len.mle_eval.0.0: u32
    rp@.mle_eval: field
    self.mle_eval.0.0: field
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Instructions:
    i.mle_eval.0.0 = i.mle_eval.0.0 + 1 <U32>
Transition:
    i.mle_eval.0.0 != point_len.mle_eval.0.0 ? -> 9 : -> 12

Block 12:
Func: mle_eval, Scope: 1
Exec Bound: 1, While Loop: false, Num VM Ops: 1
Inputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha@tower_verify.main.2.0: field
    alpha_denominator@tower_verify.main.1.0: field
    alpha_numerator@tower_verify.main.1.0: field
    alpha_pows@tower_verify.main.1.0: field
    expected_max_round@tower_verify.main.1.0: u32
    i@tower_verify.main.1.2: u32
    i@tower_verify.main.1.3: u32
    initial_claim@tower_verify.main.1.0: field
    initial_logup_evals@tower_verify.main.1.0: field
    initial_logup_evals_len@tower_verify.main.1.0: u32
    initial_prod_evals@tower_verify.main.1.0: field
    initial_prod_evals_len@tower_verify.main.1.0: u32
    initial_rt@tower_verify.main.1.0: field
    log2_num_fanin@tower_verify.main.1.0: u32
    mle_denominator@tower_verify.main.1.0: field
    num_fanin@tower_verify.main.1.0: u32
    rp@.mle_eval: field
    self.mle_eval.0.0: field
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Outputs:
    %AS: field
    %BP: field
    %RET.mle_eval: field
    %SP: field
    %TS: field
    alpha@tower_verify.main.2.0: field
    alpha_denominator@tower_verify.main.1.0: field
    alpha_numerator@tower_verify.main.1.0: field
    alpha_pows@tower_verify.main.1.0: field
    expected_max_round@tower_verify.main.1.0: u32
    i@tower_verify.main.1.2: u32
    i@tower_verify.main.1.3: u32
    initial_claim@tower_verify.main.1.0: field
    initial_logup_evals@tower_verify.main.1.0: field
    initial_logup_evals_len@tower_verify.main.1.0: u32
    initial_prod_evals@tower_verify.main.1.0: field
    initial_prod_evals_len@tower_verify.main.1.0: u32
    initial_rt@tower_verify.main.1.0: field
    log2_num_fanin@tower_verify.main.1.0: u32
    mle_denominator@tower_verify.main.1.0: field
    num_fanin@tower_verify.main.1.0: u32
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Instructions:
    field load^0.mle_eval.0.1 = self.mle_eval.0.0[0 <Field>]
    field %RET.mle_eval = load^0.mle_eval.0.1
Transition: -> rp@.mle_eval

Block 13:
Func: main, Scope: 8
Exec Bound: 1, While Loop: true, Num VM Ops: 3
Inputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha_pows@tower_verify.main.1.0: field
    eval_len@tower_verify.main.1.0: u32
    expected_max_round@tower_verify.main.1.0: u32
    expected_vec@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0: field
    i@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    logup_spec_p_input_layer_eval@tower_verify.main.1.0: field
    logup_spec_q_input_layer_eval@tower_verify.main.1.0: field
    num_fanin@tower_verify.main.1.0: u32
    out_rt@tower_verify.main.1.0: field
    prod_spec_input_layer_eval@tower_verify.main.1.0: field
    round@tower_verify.main.1.0: u32
    rt_len@tower_verify.main.1.0: u32
    self^challenges@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0: field
    self^max_degree@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0: u32
    self^num_vars@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0: u32
    self^polynomials_received@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0: field
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Outputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha_pows@tower_verify.main.1.0: field
    denom_up@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0: field
    e@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0: u32
    eval_at@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0: field
    eval_len@tower_verify.main.1.0: u32
    evals@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0: field
    evaluations@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0: field
    expected_max_round@tower_verify.main.1.0: u32
    expected_vec@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0: field
    i@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    len@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    logup_spec_p_input_layer_eval@tower_verify.main.1.0: field
    logup_spec_q_input_layer_eval@tower_verify.main.1.0: field
    num_fanin@tower_verify.main.1.0: u32
    out_rt@tower_verify.main.1.0: field
    p_i@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0: field
    prod@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0: field
    prod_spec_input_layer_eval@tower_verify.main.1.0: field
    res@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0: field
    round@tower_verify.main.1.0: u32
    rt_len@tower_verify.main.1.0: u32
    self^challenges@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0: field
    self^max_degree@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0: u32
    self^num_vars@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0: u32
    self^polynomials_received@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0: field
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Instructions:
    field load^0@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0 = self^polynomials_received@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0[i@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0]
    field evaluations@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0 = load^0@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0
    field load^0@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.1 = self^challenges@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0[i@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0]
    field challenge@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0 = load^0@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.1
    u32 p_i_len@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0 = self^max_degree@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0 + 1 <U32>
    field p_i@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0 = evaluations@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0
    field eval_at@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0 = challenge@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0
    u32 len@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0 = p_i_len@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0
    field[len@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0] evals@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0
    field prod@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0 = eval_at@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0
    evals@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0[0 <Field>] = eval_at@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0 <field>
    field res@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0 = 0 <Field>
    field denom_up@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0 = 1 <Field>
    u32 e@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0 = 1 <U32>
Transition:
    e@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0 != len@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0 ? -> 15 : -> 16

Block 14:
Func: main, Scope: 7
Exec Bound: 1, While Loop: false, Num VM Ops: 1
Inputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha_pows@tower_verify.main.1.0: field
    eval_len@tower_verify.main.1.0: u32
    expected_max_round@tower_verify.main.1.0: u32
    expected_vec@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0: field
    initial_prod_evals_len@tower_verify.main.1.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    logup_spec_p_input_layer_eval@tower_verify.main.1.0: field
    logup_spec_q_input_layer_eval@tower_verify.main.1.0: field
    num_fanin@tower_verify.main.1.0: u32
    out_rt@tower_verify.main.1.0: field
    prod_spec_input_layer_eval@tower_verify.main.1.0: field
    round@tower_verify.main.1.0: u32
    rt_len@tower_verify.main.1.0: u32
    self^challenges@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0: field
    self^num_vars@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0: u32
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Outputs:
    %AS: field
    %BP: field
    %RET^expected_evaluation.main: field
    %RET^point.main: field
    %SP: field
    %TS: field
    alpha_pows@tower_verify.main.1.0: field
    eval_len@tower_verify.main.1.0: u32
    expected_max_round@tower_verify.main.1.0: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    logup_spec_p_input_layer_eval@tower_verify.main.1.0: field
    logup_spec_q_input_layer_eval@tower_verify.main.1.0: field
    num_fanin@tower_verify.main.1.0: u32
    out_rt@tower_verify.main.1.0: field
    prod_spec_input_layer_eval@tower_verify.main.1.0: field
    round@tower_verify.main.1.0: u32
    rt_len@tower_verify.main.1.0: u32
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Instructions:
    field load^0@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.2 = expected_vec@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0[self^num_vars@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0]
    field struct^0^point@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0 = self^challenges@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0
    field struct^0^expected_evaluation@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0 = load^0@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.2
    field %RET^expected_evaluation.main = struct^0^expected_evaluation@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0
    field %RET^point.main = struct^0^point@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0
    field ret^0^expected_evaluation@verify_sumcheck@tower_verify.main.5.0 = %RET^expected_evaluation.main
    field ret^0^point@verify_sumcheck@tower_verify.main.5.0 = %RET^point.main
    field sc^expected_evaluation@verify_sumcheck@tower_verify.main.5.0 = ret^0^expected_evaluation@verify_sumcheck@tower_verify.main.5.0
    field sc^point@verify_sumcheck@tower_verify.main.5.0 = ret^0^point@verify_sumcheck@tower_verify.main.5.0
    field %RET^expected_evaluation.main = sc^expected_evaluation@verify_sumcheck@tower_verify.main.5.0
    field %RET^point.main = sc^point@verify_sumcheck@tower_verify.main.5.0
Transition: -> 42

Block 15:
Func: main, Scope: 12
Exec Bound: 1, While Loop: true, Num VM Ops: 1
Inputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha_pows@tower_verify.main.1.0: field
    denom_up@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0: field
    e@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0: u32
    eval_at@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0: field
    eval_len@tower_verify.main.1.0: u32
    evals@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0: field
    evaluations@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0: field
    expected_max_round@tower_verify.main.1.0: u32
    expected_vec@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0: field
    i@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    len@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    logup_spec_p_input_layer_eval@tower_verify.main.1.0: field
    logup_spec_q_input_layer_eval@tower_verify.main.1.0: field
    num_fanin@tower_verify.main.1.0: u32
    out_rt@tower_verify.main.1.0: field
    p_i@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0: field
    prod@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0: field
    prod_spec_input_layer_eval@tower_verify.main.1.0: field
    res@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0: field
    round@tower_verify.main.1.0: u32
    rt_len@tower_verify.main.1.0: u32
    self^challenges@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0: field
    self^max_degree@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0: u32
    self^num_vars@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0: u32
    self^polynomials_received@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0: field
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Outputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha_pows@tower_verify.main.1.0: field
    denom_up@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0: field
    e@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0: u32
    eval_at@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0: field
    eval_len@tower_verify.main.1.0: u32
    evals@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0: field
    evaluations@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0: field
    expected_max_round@tower_verify.main.1.0: u32
    expected_vec@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0: field
    i@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    len@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    logup_spec_p_input_layer_eval@tower_verify.main.1.0: field
    logup_spec_q_input_layer_eval@tower_verify.main.1.0: field
    num_fanin@tower_verify.main.1.0: u32
    out_rt@tower_verify.main.1.0: field
    p_i@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0: field
    prod@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0: field
    prod_spec_input_layer_eval@tower_verify.main.1.0: field
    res@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0: field
    round@tower_verify.main.1.0: u32
    rt_len@tower_verify.main.1.0: u32
    self^challenges@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0: field
    self^max_degree@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0: u32
    self^num_vars@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0: u32
    self^polynomials_received@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0: field
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Instructions:
    field tmp@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0 = eval_at@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0 - (F)e@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0
    evals@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0[e@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0] = tmp@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0 <field>
    field prod@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0 = prod@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0 * tmp@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0
    field denom_up@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0 = denom_up@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0 * (F)e@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0
    e@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0 = e@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0 + 1 <U32>
Transition:
    e@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0 != len@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0 ? -> 15 : -> 16

Block 16:
Func: main, Scope: 11
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha_pows@tower_verify.main.1.0: field
    denom_up@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0: field
    eval_len@tower_verify.main.1.0: u32
    evals@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0: field
    evaluations@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0: field
    expected_max_round@tower_verify.main.1.0: u32
    expected_vec@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0: field
    i@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    len@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    logup_spec_p_input_layer_eval@tower_verify.main.1.0: field
    logup_spec_q_input_layer_eval@tower_verify.main.1.0: field
    num_fanin@tower_verify.main.1.0: u32
    out_rt@tower_verify.main.1.0: field
    p_i@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0: field
    prod@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0: field
    prod_spec_input_layer_eval@tower_verify.main.1.0: field
    res@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0: field
    round@tower_verify.main.1.0: u32
    rt_len@tower_verify.main.1.0: u32
    self^challenges@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0: field
    self^max_degree@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0: u32
    self^num_vars@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0: u32
    self^polynomials_received@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0: field
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Outputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha_pows@tower_verify.main.1.0: field
    denom_down@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0: field
    denom_up@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0: field
    eval_len@tower_verify.main.1.0: u32
    evals@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0: field
    evaluations@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0: field
    expected_max_round@tower_verify.main.1.0: u32
    expected_vec@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0: field
    i@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    it@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0: u32
    len@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    logup_spec_p_input_layer_eval@tower_verify.main.1.0: field
    logup_spec_q_input_layer_eval@tower_verify.main.1.0: field
    num_fanin@tower_verify.main.1.0: u32
    out_rt@tower_verify.main.1.0: field
    p_i@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0: field
    prod@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0: field
    prod_spec_input_layer_eval@tower_verify.main.1.0: field
    res@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0: field
    round@tower_verify.main.1.0: u32
    rt_len@tower_verify.main.1.0: u32
    self^challenges@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0: field
    self^max_degree@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0: u32
    self^num_vars@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0: u32
    self^polynomials_received@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0: field
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Instructions:
    field denom_down@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0 = 1 <Field>
    u32 it@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0 = len@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0
Transition:
    it@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0 > 0 <U32> ? -> 17 : -> 18

Block 17:
Func: main, Scope: 11
Exec Bound: 1, While Loop: true, Num VM Ops: 2
Inputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha_pows@tower_verify.main.1.0: field
    denom_down@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0: field
    denom_up@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0: field
    eval_len@tower_verify.main.1.0: u32
    evals@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0: field
    evaluations@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0: field
    expected_max_round@tower_verify.main.1.0: u32
    expected_vec@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0: field
    i@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    it@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0: u32
    len@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    logup_spec_p_input_layer_eval@tower_verify.main.1.0: field
    logup_spec_q_input_layer_eval@tower_verify.main.1.0: field
    num_fanin@tower_verify.main.1.0: u32
    out_rt@tower_verify.main.1.0: field
    p_i@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0: field
    prod@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0: field
    prod_spec_input_layer_eval@tower_verify.main.1.0: field
    res@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0: field
    round@tower_verify.main.1.0: u32
    rt_len@tower_verify.main.1.0: u32
    self^challenges@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0: field
    self^max_degree@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0: u32
    self^num_vars@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0: u32
    self^polynomials_received@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0: field
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Outputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha_pows@tower_verify.main.1.0: field
    denom_down@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0: field
    denom_up@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0: field
    eval_len@tower_verify.main.1.0: u32
    evals@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0: field
    evaluations@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0: field
    expected_max_round@tower_verify.main.1.0: u32
    expected_vec@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0: field
    i@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    it@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0: u32
    len@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    logup_spec_p_input_layer_eval@tower_verify.main.1.0: field
    logup_spec_q_input_layer_eval@tower_verify.main.1.0: field
    num_fanin@tower_verify.main.1.0: u32
    out_rt@tower_verify.main.1.0: field
    p_i@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0: field
    prod@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0: field
    prod_spec_input_layer_eval@tower_verify.main.1.0: field
    res@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0: field
    round@tower_verify.main.1.0: u32
    rt_len@tower_verify.main.1.0: u32
    self^challenges@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0: field
    self^max_degree@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0: u32
    self^num_vars@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0: u32
    self^polynomials_received@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0: field
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Instructions:
    u32 i@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0 = it@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0 - 1 <U32>
    field load^0@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0 = p_i@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0[i@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0]
    field load^1@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0 = evals@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0[i@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0]
    field res@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0 = res@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0 + load^0@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0 * prod@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0 * denom_down@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0 / denom_up@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0 * load^1@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0
    if i@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0 != 0 <U32>:
        field denom_up@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0 = -1 <Field> * denom_up@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0 * (F)len@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0 - i@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0
        field denom_down@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0 = denom_down@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0 * (F)i@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0
    u32 it@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0 = it@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0 - 1 <U32>
Transition:
    it@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0 > 0 <U32> ? -> 17 : -> 18

Block 18:
Func: main, Scope: 10
Exec Bound: 1, While Loop: false, Num VM Ops: 4
Inputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha_pows@tower_verify.main.1.0: field
    eval_len@tower_verify.main.1.0: u32
    evaluations@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0: field
    expected_max_round@tower_verify.main.1.0: u32
    expected_vec@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0: field
    i@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    logup_spec_p_input_layer_eval@tower_verify.main.1.0: field
    logup_spec_q_input_layer_eval@tower_verify.main.1.0: field
    num_fanin@tower_verify.main.1.0: u32
    out_rt@tower_verify.main.1.0: field
    prod_spec_input_layer_eval@tower_verify.main.1.0: field
    res@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0: field
    round@tower_verify.main.1.0: u32
    rt_len@tower_verify.main.1.0: u32
    self^challenges@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0: field
    self^max_degree@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0: u32
    self^num_vars@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0: u32
    self^polynomials_received@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0: field
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Outputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha_pows@tower_verify.main.1.0: field
    eval_len@tower_verify.main.1.0: u32
    expected_max_round@tower_verify.main.1.0: u32
    expected_vec@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0: field
    i@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    logup_spec_p_input_layer_eval@tower_verify.main.1.0: field
    logup_spec_q_input_layer_eval@tower_verify.main.1.0: field
    num_fanin@tower_verify.main.1.0: u32
    out_rt@tower_verify.main.1.0: field
    prod_spec_input_layer_eval@tower_verify.main.1.0: field
    round@tower_verify.main.1.0: u32
    rt_len@tower_verify.main.1.0: u32
    self^challenges@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0: field
    self^max_degree@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0: u32
    self^num_vars@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0: u32
    self^polynomials_received@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0: field
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Instructions:
    field %RET.main = res@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0
    field ret^0@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0 = %RET.main
    expected_vec@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0[i@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0 + 1 <U32>] = ret^0@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0 <field>
    field load^0@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.1 = expected_vec@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0[i@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0]
    field expected@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0 = load^0@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.1
    field load^0@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.1 = evaluations@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0[0 <Field>]
    field load^1@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0 = evaluations@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0[1 <Field>]
    assert load^0@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.1 + load^1@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0 == expected@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0
    i@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0 = i@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0 + 1 <U32>
Transition:
    i@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0 != self^num_vars@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0 ? -> 13 : -> 14

Block 19:
Func: main, Scope: 6
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha_pows@tower_verify.main.1.0: field
    claimed_sum@verify_sumcheck@tower_verify.main.5.0: field
    eval_len@tower_verify.main.1.0: u32
    expected_max_round@tower_verify.main.1.0: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    logup_spec_p_input_layer_eval@tower_verify.main.1.0: field
    logup_spec_q_input_layer_eval@tower_verify.main.1.0: field
    num_fanin@tower_verify.main.1.0: u32
    out_rt@tower_verify.main.1.0: field
    prod_spec_input_layer_eval@tower_verify.main.1.0: field
    round@tower_verify.main.1.0: u32
    rt_len@tower_verify.main.1.0: u32
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Outputs:
    %AS: field
    %BP: field
    %RET^expected_evaluation.main: field
    %RET^point.main: field
    %SP: field
    %TS: field
    alpha_pows@tower_verify.main.1.0: field
    eval_len@tower_verify.main.1.0: u32
    expected_max_round@tower_verify.main.1.0: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    logup_spec_p_input_layer_eval@tower_verify.main.1.0: field
    logup_spec_q_input_layer_eval@tower_verify.main.1.0: field
    num_fanin@tower_verify.main.1.0: u32
    out_rt@tower_verify.main.1.0: field
    prod_spec_input_layer_eval@tower_verify.main.1.0: field
    round@tower_verify.main.1.0: u32
    rt_len@tower_verify.main.1.0: u32
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Instructions:
    field[0 <U32>] array^0@verify_sumcheck@tower_verify.main.5.0
    field struct^0^point@verify_sumcheck@tower_verify.main.5.0 = array^0@verify_sumcheck@tower_verify.main.5.0
    field struct^0^expected_evaluation@verify_sumcheck@tower_verify.main.5.0 = claimed_sum@verify_sumcheck@tower_verify.main.5.0
    field %RET^expected_evaluation.main = struct^0^expected_evaluation@verify_sumcheck@tower_verify.main.5.0
    field %RET^point.main = struct^0^point@verify_sumcheck@tower_verify.main.5.0
Transition: -> 42

Block 20:
Func: main, Scope: 6
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha_pows@tower_verify.main.1.0: field
    aux_info^max_degree@verify_sumcheck@tower_verify.main.5.0: u32
    aux_info^num_variables@verify_sumcheck@tower_verify.main.5.0: u32
    claimed_sum@verify_sumcheck@tower_verify.main.5.0: field
    eval_len@tower_verify.main.1.0: u32
    expected_max_round@tower_verify.main.1.0: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    logup_spec_p_input_layer_eval@tower_verify.main.1.0: field
    logup_spec_q_input_layer_eval@tower_verify.main.1.0: field
    num_fanin@tower_verify.main.1.0: u32
    out_rt@tower_verify.main.1.0: field
    prod_spec_input_layer_eval@tower_verify.main.1.0: field
    proof^proofs@verify_sumcheck@tower_verify.main.5.0: field
    round@tower_verify.main.1.0: u32
    rt_len@tower_verify.main.1.0: u32
    t^hash@tower_verify.main.1.0: field
    t^hash@verify_sumcheck@tower_verify.main.5.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Outputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha_pows@tower_verify.main.1.0: field
    aux_info^max_degree@verify_sumcheck@tower_verify.main.5.0: u32
    aux_info^num_variables@verify_sumcheck@tower_verify.main.5.0: u32
    claimed_sum@verify_sumcheck@tower_verify.main.5.0: field
    eval_len@tower_verify.main.1.0: u32
    expected_max_round@tower_verify.main.1.0: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    logup_spec_p_input_layer_eval@tower_verify.main.1.0: field
    logup_spec_q_input_layer_eval@tower_verify.main.1.0: field
    num_fanin@tower_verify.main.1.0: u32
    out_rt@tower_verify.main.1.0: field
    prod_spec_input_layer_eval@tower_verify.main.1.0: field
    proof^proofs@verify_sumcheck@tower_verify.main.5.0: field
    round@tower_verify.main.1.0: u32
    rp@.append_message_u32: field
    rt_len@tower_verify.main.1.0: u32
    t^hash.append_message_u32.0.0: field
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Instructions:
    field t^hash.append_message_u32.0.0 = t^hash@verify_sumcheck@tower_verify.main.5.0
    field rp@.append_message_u32 = 21 <Field>
Transition: -> 71

Block 21:
Func: main, Scope: 5
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %AS: field
    %BP: field
    %RET^hash.append_message_u32: field
    %SP: field
    %TS: field
    alpha_pows@tower_verify.main.1.0: field
    aux_info^max_degree@verify_sumcheck@tower_verify.main.5.0: u32
    aux_info^num_variables@verify_sumcheck@tower_verify.main.5.0: u32
    claimed_sum@verify_sumcheck@tower_verify.main.5.0: field
    eval_len@tower_verify.main.1.0: u32
    expected_max_round@tower_verify.main.1.0: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    logup_spec_p_input_layer_eval@tower_verify.main.1.0: field
    logup_spec_q_input_layer_eval@tower_verify.main.1.0: field
    num_fanin@tower_verify.main.1.0: u32
    out_rt@tower_verify.main.1.0: field
    prod_spec_input_layer_eval@tower_verify.main.1.0: field
    proof^proofs@verify_sumcheck@tower_verify.main.5.0: field
    round@tower_verify.main.1.0: u32
    rt_len@tower_verify.main.1.0: u32
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Outputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha_pows@tower_verify.main.1.0: field
    aux_info^max_degree@verify_sumcheck@tower_verify.main.5.0: u32
    aux_info^num_variables@verify_sumcheck@tower_verify.main.5.0: u32
    claimed_sum@verify_sumcheck@tower_verify.main.5.0: field
    eval_len@tower_verify.main.1.0: u32
    expected_max_round@tower_verify.main.1.0: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    logup_spec_p_input_layer_eval@tower_verify.main.1.0: field
    logup_spec_q_input_layer_eval@tower_verify.main.1.0: field
    num_fanin@tower_verify.main.1.0: u32
    out_rt@tower_verify.main.1.0: field
    prod_spec_input_layer_eval@tower_verify.main.1.0: field
    proof^proofs@verify_sumcheck@tower_verify.main.5.0: field
    round@tower_verify.main.1.0: u32
    rp@.append_message_u32: field
    rt_len@tower_verify.main.1.0: u32
    t^hash.append_message_u32.0.0: field
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Instructions:
    field ret^0^hash@verify_sumcheck@tower_verify.main.5.0 = %RET^hash.append_message_u32
    field t^hash@verify_sumcheck@tower_verify.main.5.0 = ret^0^hash@verify_sumcheck@tower_verify.main.5.0
    field t^hash.append_message_u32.0.0 = t^hash@verify_sumcheck@tower_verify.main.5.0
    field rp@.append_message_u32 = 22 <Field>
Transition: -> 71

Block 22:
Func: main, Scope: 5
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %AS: field
    %BP: field
    %RET^hash.append_message_u32: field
    %SP: field
    %TS: field
    alpha_pows@tower_verify.main.1.0: field
    aux_info^max_degree@verify_sumcheck@tower_verify.main.5.0: u32
    aux_info^num_variables@verify_sumcheck@tower_verify.main.5.0: u32
    claimed_sum@verify_sumcheck@tower_verify.main.5.0: field
    eval_len@tower_verify.main.1.0: u32
    expected_max_round@tower_verify.main.1.0: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    logup_spec_p_input_layer_eval@tower_verify.main.1.0: field
    logup_spec_q_input_layer_eval@tower_verify.main.1.0: field
    num_fanin@tower_verify.main.1.0: u32
    out_rt@tower_verify.main.1.0: field
    prod_spec_input_layer_eval@tower_verify.main.1.0: field
    proof^proofs@verify_sumcheck@tower_verify.main.5.0: field
    round@tower_verify.main.1.0: u32
    rt_len@tower_verify.main.1.0: u32
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Outputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha_pows@tower_verify.main.1.0: field
    aux_info^max_degree@verify_sumcheck@tower_verify.main.5.0: u32
    aux_info^num_variables@verify_sumcheck@tower_verify.main.5.0: u32
    claimed_sum@verify_sumcheck@tower_verify.main.5.0: field
    eval_len@tower_verify.main.1.0: u32
    expected_max_round@tower_verify.main.1.0: u32
    i@verify_sumcheck@tower_verify.main.5.0: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    logup_spec_p_input_layer_eval@tower_verify.main.1.0: field
    logup_spec_q_input_layer_eval@tower_verify.main.1.0: field
    num_fanin@tower_verify.main.1.0: u32
    out_rt@tower_verify.main.1.0: field
    prod_spec_input_layer_eval@tower_verify.main.1.0: field
    proof^proofs@verify_sumcheck@tower_verify.main.5.0: field
    round@tower_verify.main.1.0: u32
    rt_len@tower_verify.main.1.0: u32
    t^hash@tower_verify.main.1.0: field
    t^hash@verify_sumcheck@tower_verify.main.5.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
    vs^challenges@verify_sumcheck@tower_verify.main.5.0: field
    vs^finished@verify_sumcheck@tower_verify.main.5.0: bool
    vs^max_degree@verify_sumcheck@tower_verify.main.5.0: u32
    vs^num_vars@verify_sumcheck@tower_verify.main.5.0: u32
    vs^polynomials_received@verify_sumcheck@tower_verify.main.5.0: field
    vs^round@verify_sumcheck@tower_verify.main.5.0: u32
Instructions:
    field ret^0^hash@verify_sumcheck@tower_verify.main.5.0 = %RET^hash.append_message_u32
    field t^hash@verify_sumcheck@tower_verify.main.5.0 = ret^0^hash@verify_sumcheck@tower_verify.main.5.0
    field[aux_info^num_variables@verify_sumcheck@tower_verify.main.5.0] challenges@verify_sumcheck@tower_verify.main.5.0
    field[0][aux_info^num_variables@verify_sumcheck@tower_verify.main.5.0] polynomials_received@verify_sumcheck@tower_verify.main.5.0
    u32 struct^0^round@verify_sumcheck@tower_verify.main.5.0 = 1 <U32>
    u32 struct^0^num_vars@verify_sumcheck@tower_verify.main.5.0 = aux_info^num_variables@verify_sumcheck@tower_verify.main.5.0
    u32 struct^0^max_degree@verify_sumcheck@tower_verify.main.5.0 = aux_info^max_degree@verify_sumcheck@tower_verify.main.5.0
    bool struct^0^finished@verify_sumcheck@tower_verify.main.5.0 = false
    field struct^0^polynomials_received@verify_sumcheck@tower_verify.main.5.0 = polynomials_received@verify_sumcheck@tower_verify.main.5.0
    field struct^0^challenges@verify_sumcheck@tower_verify.main.5.0 = challenges@verify_sumcheck@tower_verify.main.5.0
    field vs^challenges@verify_sumcheck@tower_verify.main.5.0 = struct^0^challenges@verify_sumcheck@tower_verify.main.5.0
    bool vs^finished@verify_sumcheck@tower_verify.main.5.0 = struct^0^finished@verify_sumcheck@tower_verify.main.5.0
    u32 vs^max_degree@verify_sumcheck@tower_verify.main.5.0 = struct^0^max_degree@verify_sumcheck@tower_verify.main.5.0
    u32 vs^num_vars@verify_sumcheck@tower_verify.main.5.0 = struct^0^num_vars@verify_sumcheck@tower_verify.main.5.0
    field vs^polynomials_received@verify_sumcheck@tower_verify.main.5.0 = struct^0^polynomials_received@verify_sumcheck@tower_verify.main.5.0
    u32 vs^round@verify_sumcheck@tower_verify.main.5.0 = struct^0^round@verify_sumcheck@tower_verify.main.5.0
    u32 i@verify_sumcheck@tower_verify.main.5.0 = 0 <U32>
Transition:
    i@verify_sumcheck@tower_verify.main.5.0 != aux_info^num_variables@verify_sumcheck@tower_verify.main.5.0 ? -> 23 : -> 27

Block 23:
Func: main, Scope: 7
Exec Bound: 1, While Loop: true, Num VM Ops: 1
Inputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha_pows@tower_verify.main.1.0: field
    aux_info^max_degree@verify_sumcheck@tower_verify.main.5.0: u32
    aux_info^num_variables@verify_sumcheck@tower_verify.main.5.0: u32
    claimed_sum@verify_sumcheck@tower_verify.main.5.0: field
    eval_len@tower_verify.main.1.0: u32
    expected_max_round@tower_verify.main.1.0: u32
    i@verify_sumcheck@tower_verify.main.5.0: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    logup_spec_p_input_layer_eval@tower_verify.main.1.0: field
    logup_spec_q_input_layer_eval@tower_verify.main.1.0: field
    num_fanin@tower_verify.main.1.0: u32
    out_rt@tower_verify.main.1.0: field
    prod_spec_input_layer_eval@tower_verify.main.1.0: field
    proof^proofs@verify_sumcheck@tower_verify.main.5.0: field
    round@tower_verify.main.1.0: u32
    rt_len@tower_verify.main.1.0: u32
    t^hash@tower_verify.main.1.0: field
    t^hash@verify_sumcheck@tower_verify.main.5.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
    vs^challenges@verify_sumcheck@tower_verify.main.5.0: field
    vs^finished@verify_sumcheck@tower_verify.main.5.0: bool
    vs^max_degree@verify_sumcheck@tower_verify.main.5.0: u32
    vs^num_vars@verify_sumcheck@tower_verify.main.5.0: u32
    vs^polynomials_received@verify_sumcheck@tower_verify.main.5.0: field
    vs^round@verify_sumcheck@tower_verify.main.5.0: u32
Outputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha_pows@tower_verify.main.1.0: field
    aux_info^max_degree@verify_sumcheck@tower_verify.main.5.0: u32
    aux_info^num_variables@verify_sumcheck@tower_verify.main.5.0: u32
    claimed_sum@verify_sumcheck@tower_verify.main.5.0: field
    eval_len@tower_verify.main.1.0: u32
    expected_max_round@tower_verify.main.1.0: u32
    i@verify_sumcheck@tower_verify.main.5.0: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    j@verify_sumcheck@tower_verify.main.5.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    logup_spec_p_input_layer_eval@tower_verify.main.1.0: field
    logup_spec_q_input_layer_eval@tower_verify.main.1.0: field
    num_fanin@tower_verify.main.1.0: u32
    out_rt@tower_verify.main.1.0: field
    prod_spec_input_layer_eval@tower_verify.main.1.0: field
    proof^proofs@verify_sumcheck@tower_verify.main.5.0: field
    prover_msg^evaluations@verify_sumcheck@tower_verify.main.5.0: field
    round@tower_verify.main.1.0: u32
    rt_len@tower_verify.main.1.0: u32
    t^hash@tower_verify.main.1.0: field
    t^hash@verify_sumcheck@tower_verify.main.5.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
    vs^challenges@verify_sumcheck@tower_verify.main.5.0: field
    vs^finished@verify_sumcheck@tower_verify.main.5.0: bool
    vs^max_degree@verify_sumcheck@tower_verify.main.5.0: u32
    vs^num_vars@verify_sumcheck@tower_verify.main.5.0: u32
    vs^polynomials_received@verify_sumcheck@tower_verify.main.5.0: field
    vs^round@verify_sumcheck@tower_verify.main.5.0: u32
Instructions:
    field load^0^evaluations@verify_sumcheck@tower_verify.main.5.0 = proof^proofs@verify_sumcheck@tower_verify.main.5.0[i@verify_sumcheck@tower_verify.main.5.0]
    field prover_msg^evaluations@verify_sumcheck@tower_verify.main.5.0 = load^0^evaluations@verify_sumcheck@tower_verify.main.5.0
    u32 j@verify_sumcheck@tower_verify.main.5.0 = 0 <U32>
Transition:
    j@verify_sumcheck@tower_verify.main.5.0 != aux_info^max_degree@verify_sumcheck@tower_verify.main.5.0 + 1 <U32> ? -> 24 : -> 26

Block 24:
Func: main, Scope: 10
Exec Bound: 1, While Loop: true, Num VM Ops: 1
Inputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha_pows@tower_verify.main.1.0: field
    aux_info^max_degree@verify_sumcheck@tower_verify.main.5.0: u32
    aux_info^num_variables@verify_sumcheck@tower_verify.main.5.0: u32
    claimed_sum@verify_sumcheck@tower_verify.main.5.0: field
    eval_len@tower_verify.main.1.0: u32
    expected_max_round@tower_verify.main.1.0: u32
    i@verify_sumcheck@tower_verify.main.5.0: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    j@verify_sumcheck@tower_verify.main.5.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    logup_spec_p_input_layer_eval@tower_verify.main.1.0: field
    logup_spec_q_input_layer_eval@tower_verify.main.1.0: field
    num_fanin@tower_verify.main.1.0: u32
    out_rt@tower_verify.main.1.0: field
    prod_spec_input_layer_eval@tower_verify.main.1.0: field
    proof^proofs@verify_sumcheck@tower_verify.main.5.0: field
    prover_msg^evaluations@verify_sumcheck@tower_verify.main.5.0: field
    round@tower_verify.main.1.0: u32
    rt_len@tower_verify.main.1.0: u32
    t^hash@tower_verify.main.1.0: field
    t^hash@verify_sumcheck@tower_verify.main.5.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
    vs^challenges@verify_sumcheck@tower_verify.main.5.0: field
    vs^finished@verify_sumcheck@tower_verify.main.5.0: bool
    vs^max_degree@verify_sumcheck@tower_verify.main.5.0: u32
    vs^num_vars@verify_sumcheck@tower_verify.main.5.0: u32
    vs^polynomials_received@verify_sumcheck@tower_verify.main.5.0: field
    vs^round@verify_sumcheck@tower_verify.main.5.0: u32
Outputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    i@verify_sumcheck@tower_verify.main.5.0: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    j@verify_sumcheck@tower_verify.main.5.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    logup_spec_p_input_layer_eval@tower_verify.main.1.0: field
    logup_spec_q_input_layer_eval@tower_verify.main.1.0: field
    num_fanin@tower_verify.main.1.0: u32
    out_rt@tower_verify.main.1.0: field
    prod_spec_input_layer_eval@tower_verify.main.1.0: field
    proof^proofs@verify_sumcheck@tower_verify.main.5.0: field
    prover_msg^evaluations@verify_sumcheck@tower_verify.main.5.0: field
    round@tower_verify.main.1.0: u32
    rp@.append_message_field: field
    rt_len@tower_verify.main.1.0: u32
    t^hash.append_message_field.0.0: field
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
    vs^challenges@verify_sumcheck@tower_verify.main.5.0: field
    vs^finished@verify_sumcheck@tower_verify.main.5.0: bool
    vs^max_degree@verify_sumcheck@tower_verify.main.5.0: u32
    vs^num_vars@verify_sumcheck@tower_verify.main.5.0: u32
    vs^polynomials_received@verify_sumcheck@tower_verify.main.5.0: field
    vs^round@verify_sumcheck@tower_verify.main.5.0: u32
Instructions:
    field t^hash.append_message_field.0.0 = t^hash@verify_sumcheck@tower_verify.main.5.0
    %PHY[%SP + 0] = %BP <field>
    field %BP = %SP
    %PHY[%SP + 1] = alpha_pows@tower_verify.main.1.0 <field>
    %PHY[%SP + 2] = aux_info^max_degree@verify_sumcheck@tower_verify.main.5.0 <u32>
    %PHY[%SP + 3] = aux_info^num_variables@verify_sumcheck@tower_verify.main.5.0 <u32>
    %PHY[%SP + 4] = claimed_sum@verify_sumcheck@tower_verify.main.5.0 <field>
    %PHY[%SP + 5] = eval_len@tower_verify.main.1.0 <u32>
    %PHY[%SP + 6] = expected_max_round@tower_verify.main.1.0 <u32>
    field rp@.append_message_field = 25 <Field>
    %SP = %SP + 7 <Field>
Transition: -> 70

Block 25:
Func: main, Scope: 11
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %AS: field
    %BP: field
    %RET^hash.append_message_field: field
    %SP: field
    %TS: field
    i@verify_sumcheck@tower_verify.main.5.0: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    j@verify_sumcheck@tower_verify.main.5.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    logup_spec_p_input_layer_eval@tower_verify.main.1.0: field
    logup_spec_q_input_layer_eval@tower_verify.main.1.0: field
    num_fanin@tower_verify.main.1.0: u32
    out_rt@tower_verify.main.1.0: field
    prod_spec_input_layer_eval@tower_verify.main.1.0: field
    proof^proofs@verify_sumcheck@tower_verify.main.5.0: field
    prover_msg^evaluations@verify_sumcheck@tower_verify.main.5.0: field
    round@tower_verify.main.1.0: u32
    rt_len@tower_verify.main.1.0: u32
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
    vs^challenges@verify_sumcheck@tower_verify.main.5.0: field
    vs^finished@verify_sumcheck@tower_verify.main.5.0: bool
    vs^max_degree@verify_sumcheck@tower_verify.main.5.0: u32
    vs^num_vars@verify_sumcheck@tower_verify.main.5.0: u32
    vs^polynomials_received@verify_sumcheck@tower_verify.main.5.0: field
    vs^round@verify_sumcheck@tower_verify.main.5.0: u32
Outputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha_pows@tower_verify.main.1.0: field
    aux_info^max_degree@verify_sumcheck@tower_verify.main.5.0: u32
    aux_info^num_variables@verify_sumcheck@tower_verify.main.5.0: u32
    claimed_sum@verify_sumcheck@tower_verify.main.5.0: field
    eval_len@tower_verify.main.1.0: u32
    expected_max_round@tower_verify.main.1.0: u32
    i@verify_sumcheck@tower_verify.main.5.0: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    j@verify_sumcheck@tower_verify.main.5.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    logup_spec_p_input_layer_eval@tower_verify.main.1.0: field
    logup_spec_q_input_layer_eval@tower_verify.main.1.0: field
    num_fanin@tower_verify.main.1.0: u32
    out_rt@tower_verify.main.1.0: field
    prod_spec_input_layer_eval@tower_verify.main.1.0: field
    proof^proofs@verify_sumcheck@tower_verify.main.5.0: field
    prover_msg^evaluations@verify_sumcheck@tower_verify.main.5.0: field
    round@tower_verify.main.1.0: u32
    rt_len@tower_verify.main.1.0: u32
    t^hash@tower_verify.main.1.0: field
    t^hash@verify_sumcheck@tower_verify.main.5.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
    vs^challenges@verify_sumcheck@tower_verify.main.5.0: field
    vs^finished@verify_sumcheck@tower_verify.main.5.0: bool
    vs^max_degree@verify_sumcheck@tower_verify.main.5.0: u32
    vs^num_vars@verify_sumcheck@tower_verify.main.5.0: u32
    vs^polynomials_received@verify_sumcheck@tower_verify.main.5.0: field
    vs^round@verify_sumcheck@tower_verify.main.5.0: u32
Instructions:
    u32 expected_max_round@tower_verify.main.1.0 = %PHY[%BP + 6]
    u32 eval_len@tower_verify.main.1.0 = %PHY[%BP + 5]
    field claimed_sum@verify_sumcheck@tower_verify.main.5.0 = %PHY[%BP + 4]
    u32 aux_info^num_variables@verify_sumcheck@tower_verify.main.5.0 = %PHY[%BP + 3]
    u32 aux_info^max_degree@verify_sumcheck@tower_verify.main.5.0 = %PHY[%BP + 2]
    field alpha_pows@tower_verify.main.1.0 = %PHY[%BP + 1]
    field %BP = %PHY[%BP + 0]
    field ret^0^hash@verify_sumcheck@tower_verify.main.6.0 = %RET^hash.append_message_field
    field t^hash@verify_sumcheck@tower_verify.main.5.0 = ret^0^hash@verify_sumcheck@tower_verify.main.6.0
    j@verify_sumcheck@tower_verify.main.5.0 = j@verify_sumcheck@tower_verify.main.5.0 + 1 <U32>
Transition:
    j@verify_sumcheck@tower_verify.main.5.0 != aux_info^max_degree@verify_sumcheck@tower_verify.main.5.0 + 1 <U32> ? -> 24 : -> 26

Block 26:
Func: main, Scope: 9
Exec Bound: 1, While Loop: false, Num VM Ops: 2
Inputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha_pows@tower_verify.main.1.0: field
    aux_info^max_degree@verify_sumcheck@tower_verify.main.5.0: u32
    aux_info^num_variables@verify_sumcheck@tower_verify.main.5.0: u32
    claimed_sum@verify_sumcheck@tower_verify.main.5.0: field
    eval_len@tower_verify.main.1.0: u32
    expected_max_round@tower_verify.main.1.0: u32
    i@verify_sumcheck@tower_verify.main.5.0: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    logup_spec_p_input_layer_eval@tower_verify.main.1.0: field
    logup_spec_q_input_layer_eval@tower_verify.main.1.0: field
    num_fanin@tower_verify.main.1.0: u32
    out_rt@tower_verify.main.1.0: field
    prod_spec_input_layer_eval@tower_verify.main.1.0: field
    proof^proofs@verify_sumcheck@tower_verify.main.5.0: field
    prover_msg^evaluations@verify_sumcheck@tower_verify.main.5.0: field
    round@tower_verify.main.1.0: u32
    rt_len@tower_verify.main.1.0: u32
    t^hash@tower_verify.main.1.0: field
    t^hash@verify_sumcheck@tower_verify.main.5.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
    vs^challenges@verify_sumcheck@tower_verify.main.5.0: field
    vs^finished@verify_sumcheck@tower_verify.main.5.0: bool
    vs^max_degree@verify_sumcheck@tower_verify.main.5.0: u32
    vs^num_vars@verify_sumcheck@tower_verify.main.5.0: u32
    vs^polynomials_received@verify_sumcheck@tower_verify.main.5.0: field
    vs^round@verify_sumcheck@tower_verify.main.5.0: u32
Outputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha_pows@tower_verify.main.1.0: field
    aux_info^max_degree@verify_sumcheck@tower_verify.main.5.0: u32
    aux_info^num_variables@verify_sumcheck@tower_verify.main.5.0: u32
    claimed_sum@verify_sumcheck@tower_verify.main.5.0: field
    eval_len@tower_verify.main.1.0: u32
    expected_max_round@tower_verify.main.1.0: u32
    i@verify_sumcheck@tower_verify.main.5.0: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    logup_spec_p_input_layer_eval@tower_verify.main.1.0: field
    logup_spec_q_input_layer_eval@tower_verify.main.1.0: field
    num_fanin@tower_verify.main.1.0: u32
    out_rt@tower_verify.main.1.0: field
    prod_spec_input_layer_eval@tower_verify.main.1.0: field
    proof^proofs@verify_sumcheck@tower_verify.main.5.0: field
    round@tower_verify.main.1.0: u32
    rt_len@tower_verify.main.1.0: u32
    t^hash@tower_verify.main.1.0: field
    t^hash@verify_sumcheck@tower_verify.main.5.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
    vs^challenges@verify_sumcheck@tower_verify.main.5.0: field
    vs^finished@verify_sumcheck@tower_verify.main.5.0: bool
    vs^max_degree@verify_sumcheck@tower_verify.main.5.0: u32
    vs^num_vars@verify_sumcheck@tower_verify.main.5.0: u32
    vs^polynomials_received@verify_sumcheck@tower_verify.main.5.0: field
    vs^round@verify_sumcheck@tower_verify.main.5.0: u32
Instructions:
    field self^challenges@verify_round_and_update_state@verify_sumcheck@tower_verify.main.9.0 = vs^challenges@verify_sumcheck@tower_verify.main.5.0
    bool self^finished@verify_round_and_update_state@verify_sumcheck@tower_verify.main.9.0 = vs^finished@verify_sumcheck@tower_verify.main.5.0
    u32 self^max_degree@verify_round_and_update_state@verify_sumcheck@tower_verify.main.9.0 = vs^max_degree@verify_sumcheck@tower_verify.main.5.0
    u32 self^num_vars@verify_round_and_update_state@verify_sumcheck@tower_verify.main.9.0 = vs^num_vars@verify_sumcheck@tower_verify.main.5.0
    field self^polynomials_received@verify_round_and_update_state@verify_sumcheck@tower_verify.main.9.0 = vs^polynomials_received@verify_sumcheck@tower_verify.main.5.0
    u32 self^round@verify_round_and_update_state@verify_sumcheck@tower_verify.main.9.0 = vs^round@verify_sumcheck@tower_verify.main.5.0
    field prover_msg^evaluations@verify_round_and_update_state@verify_sumcheck@tower_verify.main.9.0 = prover_msg^evaluations@verify_sumcheck@tower_verify.main.5.0
    field transcript^hash@verify_round_and_update_state@verify_sumcheck@tower_verify.main.9.0 = t^hash@verify_sumcheck@tower_verify.main.5.0
    assert !self^finished@verify_round_and_update_state@verify_sumcheck@tower_verify.main.9.0
    field challenge@verify_round_and_update_state@verify_sumcheck@tower_verify.main.9.0 = transcript^hash@verify_round_and_update_state@verify_sumcheck@tower_verify.main.9.0
    self^challenges@verify_round_and_update_state@verify_sumcheck@tower_verify.main.9.0[self^round@verify_round_and_update_state@verify_sumcheck@tower_verify.main.9.0 - 1 <U32>] = challenge@verify_round_and_update_state@verify_sumcheck@tower_verify.main.9.0 <field>
    self^polynomials_received@verify_round_and_update_state@verify_sumcheck@tower_verify.main.9.0[self^round@verify_round_and_update_state@verify_sumcheck@tower_verify.main.9.0 - 1 <U32>] = prover_msg^evaluations@verify_round_and_update_state@verify_sumcheck@tower_verify.main.9.0 <field>
    if self^round@verify_round_and_update_state@verify_sumcheck@tower_verify.main.9.0 == self^num_vars@verify_round_and_update_state@verify_sumcheck@tower_verify.main.9.0:
        bool self^finished@verify_round_and_update_state@verify_sumcheck@tower_verify.main.9.0 = true
    else:
        u32 self^round@verify_round_and_update_state@verify_sumcheck@tower_verify.main.9.0 = self^round@verify_round_and_update_state@verify_sumcheck@tower_verify.main.9.0 + 1 <U32>
    field %RET^challenges.main = self^challenges@verify_round_and_update_state@verify_sumcheck@tower_verify.main.9.0
    bool %RET^finished.main = self^finished@verify_round_and_update_state@verify_sumcheck@tower_verify.main.9.0
    u32 %RET^max_degree.main = self^max_degree@verify_round_and_update_state@verify_sumcheck@tower_verify.main.9.0
    u32 %RET^num_vars.main = self^num_vars@verify_round_and_update_state@verify_sumcheck@tower_verify.main.9.0
    field %RET^polynomials_received.main = self^polynomials_received@verify_round_and_update_state@verify_sumcheck@tower_verify.main.9.0
    u32 %RET^round.main = self^round@verify_round_and_update_state@verify_sumcheck@tower_verify.main.9.0
    field ret^0^challenges@verify_sumcheck@tower_verify.main.5.0 = %RET^challenges.main
    bool ret^0^finished@verify_sumcheck@tower_verify.main.5.0 = %RET^finished.main
    u32 ret^0^max_degree@verify_sumcheck@tower_verify.main.5.0 = %RET^max_degree.main
    u32 ret^0^num_vars@verify_sumcheck@tower_verify.main.5.0 = %RET^num_vars.main
    field ret^0^polynomials_received@verify_sumcheck@tower_verify.main.5.0 = %RET^polynomials_received.main
    u32 ret^0^round@verify_sumcheck@tower_verify.main.5.0 = %RET^round.main
    field vs^challenges@verify_sumcheck@tower_verify.main.5.0 = ret^0^challenges@verify_sumcheck@tower_verify.main.5.0
    bool vs^finished@verify_sumcheck@tower_verify.main.5.0 = ret^0^finished@verify_sumcheck@tower_verify.main.5.0
    u32 vs^max_degree@verify_sumcheck@tower_verify.main.5.0 = ret^0^max_degree@verify_sumcheck@tower_verify.main.5.0
    u32 vs^num_vars@verify_sumcheck@tower_verify.main.5.0 = ret^0^num_vars@verify_sumcheck@tower_verify.main.5.0
    field vs^polynomials_received@verify_sumcheck@tower_verify.main.5.0 = ret^0^polynomials_received@verify_sumcheck@tower_verify.main.5.0
    u32 vs^round@verify_sumcheck@tower_verify.main.5.0 = ret^0^round@verify_sumcheck@tower_verify.main.5.0
    i@verify_sumcheck@tower_verify.main.5.0 = i@verify_sumcheck@tower_verify.main.5.0 + 1 <U32>
Transition:
    i@verify_sumcheck@tower_verify.main.5.0 != aux_info^num_variables@verify_sumcheck@tower_verify.main.5.0 ? -> 23 : -> 27

Block 27:
Func: main, Scope: 6
Exec Bound: 1, While Loop: false, Num VM Ops: 1
Inputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha_pows@tower_verify.main.1.0: field
    claimed_sum@verify_sumcheck@tower_verify.main.5.0: field
    eval_len@tower_verify.main.1.0: u32
    expected_max_round@tower_verify.main.1.0: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    logup_spec_p_input_layer_eval@tower_verify.main.1.0: field
    logup_spec_q_input_layer_eval@tower_verify.main.1.0: field
    num_fanin@tower_verify.main.1.0: u32
    out_rt@tower_verify.main.1.0: field
    prod_spec_input_layer_eval@tower_verify.main.1.0: field
    round@tower_verify.main.1.0: u32
    rt_len@tower_verify.main.1.0: u32
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
    vs^challenges@verify_sumcheck@tower_verify.main.5.0: field
    vs^finished@verify_sumcheck@tower_verify.main.5.0: bool
    vs^max_degree@verify_sumcheck@tower_verify.main.5.0: u32
    vs^num_vars@verify_sumcheck@tower_verify.main.5.0: u32
    vs^polynomials_received@verify_sumcheck@tower_verify.main.5.0: field
Outputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha_pows@tower_verify.main.1.0: field
    eval_len@tower_verify.main.1.0: u32
    expected_max_round@tower_verify.main.1.0: u32
    expected_vec@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0: field
    i@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    logup_spec_p_input_layer_eval@tower_verify.main.1.0: field
    logup_spec_q_input_layer_eval@tower_verify.main.1.0: field
    num_fanin@tower_verify.main.1.0: u32
    out_rt@tower_verify.main.1.0: field
    prod_spec_input_layer_eval@tower_verify.main.1.0: field
    round@tower_verify.main.1.0: u32
    rt_len@tower_verify.main.1.0: u32
    self^challenges@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0: field
    self^max_degree@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0: u32
    self^num_vars@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0: u32
    self^polynomials_received@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0: field
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Instructions:
    field self^challenges@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0 = vs^challenges@verify_sumcheck@tower_verify.main.5.0
    bool self^finished@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0 = vs^finished@verify_sumcheck@tower_verify.main.5.0
    u32 self^max_degree@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0 = vs^max_degree@verify_sumcheck@tower_verify.main.5.0
    u32 self^num_vars@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0 = vs^num_vars@verify_sumcheck@tower_verify.main.5.0
    field self^polynomials_received@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0 = vs^polynomials_received@verify_sumcheck@tower_verify.main.5.0
    field asserted_sum@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0 = claimed_sum@verify_sumcheck@tower_verify.main.5.0
    assert self^finished@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0
    field[self^num_vars@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0 + 1 <U32>] expected_vec@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0
    expected_vec@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0[0 <Field>] = asserted_sum@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0 <field>
    u32 i@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0 = 0 <U32>
Transition:
    i@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0 != self^num_vars@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0 ? -> 13 : -> 14

Block 28:
Func: main, Scope: 1
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %AS: field
    %BP: field
    %RET^hash.append_message_field: field
    %SP: field
    %TS: field
    initial_logup_evals@tower_verify.main.1.0: field
    initial_logup_evals_len@tower_verify.main.1.0: u32
    initial_prod_evals@tower_verify.main.1.0: field
    initial_prod_evals_len@tower_verify.main.1.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    num_fanin@tower_verify.main.1.0: u32
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Outputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha@tower_verify.main.1.0: field
    alpha_pows@tower_verify.main.1.0: field
    expected_max_round@tower_verify.main.1.0: u32
    i@tower_verify.main.1.0: u32
    initial_logup_evals@tower_verify.main.1.0: field
    initial_logup_evals_len@tower_verify.main.1.0: u32
    initial_prod_evals@tower_verify.main.1.0: field
    initial_prod_evals_len@tower_verify.main.1.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    num_fanin@tower_verify.main.1.0: u32
    state@tower_verify.main.1.0: field
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Instructions:
    u32 expected_max_round@tower_verify.main.1.0 = %PHY[%BP + 1]
    field %BP = %PHY[%BP + 0]
    field ret^0^hash@tower_verify.main.1.0 = %RET^hash.append_message_field
    field t^hash@tower_verify.main.1.0 = ret^0^hash@tower_verify.main.1.0
    field alpha@tower_verify.main.1.0 = t^hash@tower_verify.main.1.0
    field[initial_prod_evals_len@tower_verify.main.1.0 + initial_logup_evals_len@tower_verify.main.1.0 * 2 <U32>] alpha_pows@tower_verify.main.1.0
    field state@tower_verify.main.1.0 = 1 <Field>
    u32 i@tower_verify.main.1.0 = 0 <U32>
Transition:
    i@tower_verify.main.1.0 != initial_prod_evals_len@tower_verify.main.1.0 + initial_logup_evals_len@tower_verify.main.1.0 * 2 <U32> ? -> 29 : -> 30

Block 29:
Func: main, Scope: 3
Exec Bound: 1, While Loop: true, Num VM Ops: 1
Inputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha@tower_verify.main.1.0: field
    alpha_pows@tower_verify.main.1.0: field
    expected_max_round@tower_verify.main.1.0: u32
    i@tower_verify.main.1.0: u32
    initial_logup_evals@tower_verify.main.1.0: field
    initial_logup_evals_len@tower_verify.main.1.0: u32
    initial_prod_evals@tower_verify.main.1.0: field
    initial_prod_evals_len@tower_verify.main.1.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    num_fanin@tower_verify.main.1.0: u32
    state@tower_verify.main.1.0: field
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Outputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha@tower_verify.main.1.0: field
    alpha_pows@tower_verify.main.1.0: field
    expected_max_round@tower_verify.main.1.0: u32
    i@tower_verify.main.1.0: u32
    initial_logup_evals@tower_verify.main.1.0: field
    initial_logup_evals_len@tower_verify.main.1.0: u32
    initial_prod_evals@tower_verify.main.1.0: field
    initial_prod_evals_len@tower_verify.main.1.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    num_fanin@tower_verify.main.1.0: u32
    state@tower_verify.main.1.0: field
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Instructions:
    alpha_pows@tower_verify.main.1.0[i@tower_verify.main.1.0] = state@tower_verify.main.1.0 <field>
    field state@tower_verify.main.1.0 = state@tower_verify.main.1.0 * alpha@tower_verify.main.1.0
    i@tower_verify.main.1.0 = i@tower_verify.main.1.0 + 1 <U32>
Transition:
    i@tower_verify.main.1.0 != initial_prod_evals_len@tower_verify.main.1.0 + initial_logup_evals_len@tower_verify.main.1.0 * 2 <U32> ? -> 29 : -> 30

Block 30:
Func: main, Scope: 2
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha_pows@tower_verify.main.1.0: field
    expected_max_round@tower_verify.main.1.0: u32
    initial_logup_evals@tower_verify.main.1.0: field
    initial_logup_evals_len@tower_verify.main.1.0: u32
    initial_prod_evals@tower_verify.main.1.0: field
    initial_prod_evals_len@tower_verify.main.1.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    num_fanin@tower_verify.main.1.0: u32
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Outputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha_pows@tower_verify.main.1.0: field
    expected_max_round@tower_verify.main.1.0: u32
    i@tower_verify.main.1.1: u32
    initial_logup_evals@tower_verify.main.1.0: field
    initial_logup_evals_len@tower_verify.main.1.0: u32
    initial_prod_evals@tower_verify.main.1.0: field
    initial_prod_evals_len@tower_verify.main.1.0: u32
    initial_rt@tower_verify.main.1.0: field
    log2_num_fanin@tower_verify.main.1.0: u32
    num_fanin@tower_verify.main.1.0: u32
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Instructions:
    field[log2_num_fanin@tower_verify.main.1.0] initial_rt@tower_verify.main.1.0
    u32 i@tower_verify.main.1.1 = 0 <U32>
Transition:
    i@tower_verify.main.1.1 != log2_num_fanin@tower_verify.main.1.0 ? -> 31 : -> 33

Block 31:
Func: main, Scope: 3
Exec Bound: 1, While Loop: true, Num VM Ops: 0
Inputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha_pows@tower_verify.main.1.0: field
    expected_max_round@tower_verify.main.1.0: u32
    i@tower_verify.main.1.1: u32
    initial_logup_evals@tower_verify.main.1.0: field
    initial_logup_evals_len@tower_verify.main.1.0: u32
    initial_prod_evals@tower_verify.main.1.0: field
    initial_prod_evals_len@tower_verify.main.1.0: u32
    initial_rt@tower_verify.main.1.0: field
    log2_num_fanin@tower_verify.main.1.0: u32
    num_fanin@tower_verify.main.1.0: u32
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Outputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    initial_logup_evals@tower_verify.main.1.0: field
    initial_logup_evals_len@tower_verify.main.1.0: u32
    initial_prod_evals@tower_verify.main.1.0: field
    initial_prod_evals_len@tower_verify.main.1.0: u32
    initial_rt@tower_verify.main.1.0: field
    log2_num_fanin@tower_verify.main.1.0: u32
    num_fanin@tower_verify.main.1.0: u32
    rp@.append_message_field: field
    t^hash.append_message_field.0.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Instructions:
    field t^hash.append_message_field.0.0 = t^hash@tower_verify.main.1.0
    %PHY[%SP + 0] = %BP <field>
    field %BP = %SP
    %PHY[%SP + 1] = alpha_pows@tower_verify.main.1.0 <field>
    %PHY[%SP + 2] = expected_max_round@tower_verify.main.1.0 <u32>
    %PHY[%SP + 3] = i@tower_verify.main.1.1 <u32>
    field rp@.append_message_field = 32 <Field>
    %SP = %SP + 4 <Field>
Transition: -> 70

Block 32:
Func: main, Scope: 4
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %AS: field
    %BP: field
    %RET^hash.append_message_field: field
    %SP: field
    %TS: field
    initial_logup_evals@tower_verify.main.1.0: field
    initial_logup_evals_len@tower_verify.main.1.0: u32
    initial_prod_evals@tower_verify.main.1.0: field
    initial_prod_evals_len@tower_verify.main.1.0: u32
    initial_rt@tower_verify.main.1.0: field
    log2_num_fanin@tower_verify.main.1.0: u32
    num_fanin@tower_verify.main.1.0: u32
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Outputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha_pows@tower_verify.main.1.0: field
    expected_max_round@tower_verify.main.1.0: u32
    i@tower_verify.main.1.1: u32
    initial_logup_evals@tower_verify.main.1.0: field
    initial_logup_evals_len@tower_verify.main.1.0: u32
    initial_prod_evals@tower_verify.main.1.0: field
    initial_prod_evals_len@tower_verify.main.1.0: u32
    initial_rt@tower_verify.main.1.0: field
    log2_num_fanin@tower_verify.main.1.0: u32
    num_fanin@tower_verify.main.1.0: u32
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Instructions:
    u32 i@tower_verify.main.1.1 = %PHY[%BP + 3]
    u32 expected_max_round@tower_verify.main.1.0 = %PHY[%BP + 2]
    field alpha_pows@tower_verify.main.1.0 = %PHY[%BP + 1]
    field %BP = %PHY[%BP + 0]
    field ret^0^hash@tower_verify.main.2.0 = %RET^hash.append_message_field
    field t^hash@tower_verify.main.1.0 = ret^0^hash@tower_verify.main.2.0
    i@tower_verify.main.1.1 = i@tower_verify.main.1.1 + 1 <U32>
Transition:
    i@tower_verify.main.1.1 != log2_num_fanin@tower_verify.main.1.0 ? -> 31 : -> 33

Block 33:
Func: main, Scope: 2
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha_pows@tower_verify.main.1.0: field
    expected_max_round@tower_verify.main.1.0: u32
    initial_logup_evals@tower_verify.main.1.0: field
    initial_logup_evals_len@tower_verify.main.1.0: u32
    initial_prod_evals@tower_verify.main.1.0: field
    initial_prod_evals_len@tower_verify.main.1.0: u32
    initial_rt@tower_verify.main.1.0: field
    log2_num_fanin@tower_verify.main.1.0: u32
    num_fanin@tower_verify.main.1.0: u32
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Outputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha_pows@tower_verify.main.1.0: field
    expected_max_round@tower_verify.main.1.0: u32
    i@tower_verify.main.1.2: u32
    initial_claim@tower_verify.main.1.0: field
    initial_logup_evals@tower_verify.main.1.0: field
    initial_logup_evals_len@tower_verify.main.1.0: u32
    initial_prod_evals@tower_verify.main.1.0: field
    initial_prod_evals_len@tower_verify.main.1.0: u32
    initial_rt@tower_verify.main.1.0: field
    log2_num_fanin@tower_verify.main.1.0: u32
    num_fanin@tower_verify.main.1.0: u32
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Instructions:
    field initial_claim@tower_verify.main.1.0 = 0 <Field>
    u32 i@tower_verify.main.1.2 = 0 <U32>
Transition:
    i@tower_verify.main.1.2 != initial_prod_evals_len@tower_verify.main.1.0 ? -> 34 : -> 36

Block 34:
Func: main, Scope: 3
Exec Bound: 1, While Loop: true, Num VM Ops: 2
Inputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha_pows@tower_verify.main.1.0: field
    expected_max_round@tower_verify.main.1.0: u32
    i@tower_verify.main.1.2: u32
    initial_claim@tower_verify.main.1.0: field
    initial_logup_evals@tower_verify.main.1.0: field
    initial_logup_evals_len@tower_verify.main.1.0: u32
    initial_prod_evals@tower_verify.main.1.0: field
    initial_prod_evals_len@tower_verify.main.1.0: u32
    initial_rt@tower_verify.main.1.0: field
    log2_num_fanin@tower_verify.main.1.0: u32
    num_fanin@tower_verify.main.1.0: u32
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Outputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha@tower_verify.main.2.0: field
    alpha_pows@tower_verify.main.1.0: field
    expected_max_round@tower_verify.main.1.0: u32
    i@tower_verify.main.1.2: u32
    initial_claim@tower_verify.main.1.0: field
    initial_logup_evals@tower_verify.main.1.0: field
    initial_logup_evals_len@tower_verify.main.1.0: u32
    initial_prod_evals@tower_verify.main.1.0: field
    initial_prod_evals_len@tower_verify.main.1.0: u32
    initial_rt@tower_verify.main.1.0: field
    log2_num_fanin@tower_verify.main.1.0: u32
    mle_len.mle_eval.0.0: u32
    num_fanin@tower_verify.main.1.0: u32
    point.mle_eval.0.0: field
    point_len.mle_eval.0.0: u32
    rp@.mle_eval: field
    self.mle_eval.0.0: field
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Instructions:
    field load^0@tower_verify.main.1.0 = initial_prod_evals@tower_verify.main.1.0[i@tower_verify.main.1.2]
    field evals@tower_verify.main.1.0 = load^0@tower_verify.main.1.0
    field load^0@tower_verify.main.1.1 = alpha_pows@tower_verify.main.1.0[i@tower_verify.main.1.2]
    field alpha@tower_verify.main.2.0 = load^0@tower_verify.main.1.1
    field self.mle_eval.0.0 = evals@tower_verify.main.1.0
    u32 mle_len.mle_eval.0.0 = num_fanin@tower_verify.main.1.0
    field point.mle_eval.0.0 = initial_rt@tower_verify.main.1.0
    u32 point_len.mle_eval.0.0 = log2_num_fanin@tower_verify.main.1.0
    field rp@.mle_eval = 35 <Field>
Transition: -> 8

Block 35:
Func: main, Scope: 4
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %AS: field
    %BP: field
    %RET.mle_eval: field
    %SP: field
    %TS: field
    alpha@tower_verify.main.2.0: field
    alpha_pows@tower_verify.main.1.0: field
    expected_max_round@tower_verify.main.1.0: u32
    i@tower_verify.main.1.2: u32
    initial_claim@tower_verify.main.1.0: field
    initial_logup_evals@tower_verify.main.1.0: field
    initial_logup_evals_len@tower_verify.main.1.0: u32
    initial_prod_evals@tower_verify.main.1.0: field
    initial_prod_evals_len@tower_verify.main.1.0: u32
    initial_rt@tower_verify.main.1.0: field
    log2_num_fanin@tower_verify.main.1.0: u32
    num_fanin@tower_verify.main.1.0: u32
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Outputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha_pows@tower_verify.main.1.0: field
    expected_max_round@tower_verify.main.1.0: u32
    i@tower_verify.main.1.2: u32
    initial_claim@tower_verify.main.1.0: field
    initial_logup_evals@tower_verify.main.1.0: field
    initial_logup_evals_len@tower_verify.main.1.0: u32
    initial_prod_evals@tower_verify.main.1.0: field
    initial_prod_evals_len@tower_verify.main.1.0: u32
    initial_rt@tower_verify.main.1.0: field
    log2_num_fanin@tower_verify.main.1.0: u32
    num_fanin@tower_verify.main.1.0: u32
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Instructions:
    field ret^0@tower_verify.main.2.1 = %RET.mle_eval
    field initial_claim@tower_verify.main.1.0 = initial_claim@tower_verify.main.1.0 + ret^0@tower_verify.main.2.1 * alpha@tower_verify.main.2.0
    i@tower_verify.main.1.2 = i@tower_verify.main.1.2 + 1 <U32>
Transition:
    i@tower_verify.main.1.2 != initial_prod_evals_len@tower_verify.main.1.0 ? -> 34 : -> 36

Block 36:
Func: main, Scope: 2
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha_pows@tower_verify.main.1.0: field
    expected_max_round@tower_verify.main.1.0: u32
    initial_claim@tower_verify.main.1.0: field
    initial_logup_evals@tower_verify.main.1.0: field
    initial_logup_evals_len@tower_verify.main.1.0: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    initial_rt@tower_verify.main.1.0: field
    log2_num_fanin@tower_verify.main.1.0: u32
    num_fanin@tower_verify.main.1.0: u32
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Outputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha_pows@tower_verify.main.1.0: field
    expected_max_round@tower_verify.main.1.0: u32
    i@tower_verify.main.1.3: u32
    initial_claim@tower_verify.main.1.0: field
    initial_logup_evals@tower_verify.main.1.0: field
    initial_logup_evals_len@tower_verify.main.1.0: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    initial_rt@tower_verify.main.1.0: field
    log2_num_fanin@tower_verify.main.1.0: u32
    num_fanin@tower_verify.main.1.0: u32
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Instructions:
    u32 i@tower_verify.main.1.3 = 0 <U32>
Transition:
    i@tower_verify.main.1.3 != initial_logup_evals_len@tower_verify.main.1.0 ? -> 37 : -> 40

Block 37:
Func: main, Scope: 3
Exec Bound: 1, While Loop: true, Num VM Ops: 14
Inputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha_pows@tower_verify.main.1.0: field
    expected_max_round@tower_verify.main.1.0: u32
    i@tower_verify.main.1.3: u32
    initial_claim@tower_verify.main.1.0: field
    initial_logup_evals@tower_verify.main.1.0: field
    initial_logup_evals_len@tower_verify.main.1.0: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    initial_rt@tower_verify.main.1.0: field
    log2_num_fanin@tower_verify.main.1.0: u32
    num_fanin@tower_verify.main.1.0: u32
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Outputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha_denominator@tower_verify.main.1.0: field
    alpha_numerator@tower_verify.main.1.0: field
    alpha_pows@tower_verify.main.1.0: field
    expected_max_round@tower_verify.main.1.0: u32
    i@tower_verify.main.1.3: u32
    initial_claim@tower_verify.main.1.0: field
    initial_logup_evals@tower_verify.main.1.0: field
    initial_logup_evals_len@tower_verify.main.1.0: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    initial_rt@tower_verify.main.1.0: field
    log2_num_fanin@tower_verify.main.1.0: u32
    mle_denominator@tower_verify.main.1.0: field
    mle_len.mle_eval.0.0: u32
    num_fanin@tower_verify.main.1.0: u32
    point.mle_eval.0.0: field
    point_len.mle_eval.0.0: u32
    rp@.mle_eval: field
    self.mle_eval.0.0: field
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Instructions:
    field load^0@tower_verify.main.1.2 = alpha_pows@tower_verify.main.1.0[initial_prod_evals_len@tower_verify.main.1.0 + 2 <U32> * i@tower_verify.main.1.3]
    field alpha_numerator@tower_verify.main.1.0 = load^0@tower_verify.main.1.2
    field load^0@tower_verify.main.1.2 = alpha_pows@tower_verify.main.1.0[initial_prod_evals_len@tower_verify.main.1.0 + 2 <U32> * i@tower_verify.main.1.3 + 1 <U32>]
    field alpha_denominator@tower_verify.main.1.0 = load^0@tower_verify.main.1.2
    field[2 <U32>] array^0@tower_verify.main.1.0
    field load^0@tower_verify.main.1.3 = initial_logup_evals@tower_verify.main.1.0[i@tower_verify.main.1.3]
    field load^1@tower_verify.main.1.0 = load^0@tower_verify.main.1.3[0 <Field>]
    field init^0@tower_verify.main.1.0 = load^1@tower_verify.main.1.0
    field load^2@tower_verify.main.1.0 = initial_logup_evals@tower_verify.main.1.0[i@tower_verify.main.1.3]
    field load^3@tower_verify.main.1.0 = load^2@tower_verify.main.1.0[1 <Field>]
    field init^1@tower_verify.main.1.0 = load^3@tower_verify.main.1.0
    array^0@tower_verify.main.1.0[0 <Field>] = init^0@tower_verify.main.1.0 <field>, init
    array^0@tower_verify.main.1.0[1 <Field>] = init^1@tower_verify.main.1.0 <field>, init
    field mle_numerator@tower_verify.main.1.0 = array^0@tower_verify.main.1.0
    field[2 <U32>] array^0@tower_verify.main.1.0
    field load^0@tower_verify.main.1.3 = initial_logup_evals@tower_verify.main.1.0[i@tower_verify.main.1.3]
    field load^1@tower_verify.main.1.0 = load^0@tower_verify.main.1.3[2 <Field>]
    field init^0@tower_verify.main.1.0 = load^1@tower_verify.main.1.0
    field load^2@tower_verify.main.1.0 = initial_logup_evals@tower_verify.main.1.0[i@tower_verify.main.1.3]
    field load^3@tower_verify.main.1.0 = load^2@tower_verify.main.1.0[3 <Field>]
    field init^1@tower_verify.main.1.0 = load^3@tower_verify.main.1.0
    array^0@tower_verify.main.1.0[0 <Field>] = init^0@tower_verify.main.1.0 <field>, init
    array^0@tower_verify.main.1.0[1 <Field>] = init^1@tower_verify.main.1.0 <field>, init
    field mle_denominator@tower_verify.main.1.0 = array^0@tower_verify.main.1.0
    field self.mle_eval.0.0 = mle_numerator@tower_verify.main.1.0
    u32 mle_len.mle_eval.0.0 = num_fanin@tower_verify.main.1.0
    field point.mle_eval.0.0 = initial_rt@tower_verify.main.1.0
    u32 point_len.mle_eval.0.0 = log2_num_fanin@tower_verify.main.1.0
    field rp@.mle_eval = 38 <Field>
Transition: -> 8

Block 38:
Func: main, Scope: 4
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %AS: field
    %BP: field
    %RET.mle_eval: field
    %SP: field
    %TS: field
    alpha_denominator@tower_verify.main.1.0: field
    alpha_numerator@tower_verify.main.1.0: field
    alpha_pows@tower_verify.main.1.0: field
    expected_max_round@tower_verify.main.1.0: u32
    i@tower_verify.main.1.3: u32
    initial_claim@tower_verify.main.1.0: field
    initial_logup_evals@tower_verify.main.1.0: field
    initial_logup_evals_len@tower_verify.main.1.0: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    initial_rt@tower_verify.main.1.0: field
    log2_num_fanin@tower_verify.main.1.0: u32
    mle_denominator@tower_verify.main.1.0: field
    num_fanin@tower_verify.main.1.0: u32
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Outputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha_denominator@tower_verify.main.1.0: field
    alpha_pows@tower_verify.main.1.0: field
    expected_max_round@tower_verify.main.1.0: u32
    i@tower_verify.main.1.3: u32
    initial_claim@tower_verify.main.1.0: field
    initial_logup_evals@tower_verify.main.1.0: field
    initial_logup_evals_len@tower_verify.main.1.0: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    initial_rt@tower_verify.main.1.0: field
    log2_num_fanin@tower_verify.main.1.0: u32
    mle_len.mle_eval.0.0: u32
    num_fanin@tower_verify.main.1.0: u32
    point.mle_eval.0.0: field
    point_len.mle_eval.0.0: u32
    rp@.mle_eval: field
    self.mle_eval.0.0: field
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Instructions:
    field ret^0@tower_verify.main.2.2 = %RET.mle_eval
    field initial_claim@tower_verify.main.1.0 = initial_claim@tower_verify.main.1.0 + ret^0@tower_verify.main.2.2 * alpha_numerator@tower_verify.main.1.0
    field self.mle_eval.0.0 = mle_denominator@tower_verify.main.1.0
    u32 mle_len.mle_eval.0.0 = num_fanin@tower_verify.main.1.0
    field point.mle_eval.0.0 = initial_rt@tower_verify.main.1.0
    u32 point_len.mle_eval.0.0 = log2_num_fanin@tower_verify.main.1.0
    field rp@.mle_eval = 39 <Field>
Transition: -> 8

Block 39:
Func: main, Scope: 4
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %AS: field
    %BP: field
    %RET.mle_eval: field
    %SP: field
    %TS: field
    alpha_denominator@tower_verify.main.1.0: field
    alpha_pows@tower_verify.main.1.0: field
    expected_max_round@tower_verify.main.1.0: u32
    i@tower_verify.main.1.3: u32
    initial_claim@tower_verify.main.1.0: field
    initial_logup_evals@tower_verify.main.1.0: field
    initial_logup_evals_len@tower_verify.main.1.0: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    initial_rt@tower_verify.main.1.0: field
    log2_num_fanin@tower_verify.main.1.0: u32
    num_fanin@tower_verify.main.1.0: u32
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Outputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha_pows@tower_verify.main.1.0: field
    expected_max_round@tower_verify.main.1.0: u32
    i@tower_verify.main.1.3: u32
    initial_claim@tower_verify.main.1.0: field
    initial_logup_evals@tower_verify.main.1.0: field
    initial_logup_evals_len@tower_verify.main.1.0: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    initial_rt@tower_verify.main.1.0: field
    log2_num_fanin@tower_verify.main.1.0: u32
    num_fanin@tower_verify.main.1.0: u32
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Instructions:
    field ret^0@tower_verify.main.2.2 = %RET.mle_eval
    field initial_claim@tower_verify.main.1.0 = initial_claim@tower_verify.main.1.0 + ret^0@tower_verify.main.2.2 * alpha_denominator@tower_verify.main.1.0
    i@tower_verify.main.1.3 = i@tower_verify.main.1.3 + 1 <U32>
Transition:
    i@tower_verify.main.1.3 != initial_logup_evals_len@tower_verify.main.1.0 ? -> 37 : -> 40

Block 40:
Func: main, Scope: 2
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha_pows@tower_verify.main.1.0: field
    expected_max_round@tower_verify.main.1.0: u32
    initial_claim@tower_verify.main.1.0: field
    initial_prod_evals_len@tower_verify.main.1.0: u32
    initial_rt@tower_verify.main.1.0: field
    log2_num_fanin@tower_verify.main.1.0: u32
    num_fanin@tower_verify.main.1.0: u32
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Outputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha_pows@tower_verify.main.1.0: field
    eval_len@tower_verify.main.1.0: u32
    expected_max_round@tower_verify.main.1.0: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    logup_spec_p_input_layer_eval@tower_verify.main.1.0: field
    logup_spec_q_input_layer_eval@tower_verify.main.1.0: field
    next_rt^eval@tower_verify.main.1.0: field
    next_rt^point@tower_verify.main.1.0: field
    num_fanin@tower_verify.main.1.0: u32
    prod_spec_input_layer_eval@tower_verify.main.1.0: field
    round@tower_verify.main.1.0: u32
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Instructions:
    field[tower_proofs^prod_spec_size@tower_verify.main.1.0] prod_spec_input_layer_eval@tower_verify.main.1.0
    field[tower_proofs^logup_spec_size@tower_verify.main.1.0] logup_spec_p_input_layer_eval@tower_verify.main.1.0
    field[tower_proofs^logup_spec_size@tower_verify.main.1.0] logup_spec_q_input_layer_eval@tower_verify.main.1.0
    field struct^0^point@tower_verify.main.1.0 = initial_rt@tower_verify.main.1.0
    field struct^0^eval@tower_verify.main.1.0 = initial_claim@tower_verify.main.1.0
    field next_rt^eval@tower_verify.main.1.0 = struct^0^eval@tower_verify.main.1.0
    field next_rt^point@tower_verify.main.1.0 = struct^0^point@tower_verify.main.1.0
    u32 eval_len@tower_verify.main.1.0 = 1 <U32>
    u32 round@tower_verify.main.1.0 = 0 <U32>
Transition:
    round@tower_verify.main.1.0 != expected_max_round@tower_verify.main.1.0 - 1 <U32> ? -> 41 : -> 69

Block 41:
Func: main, Scope: 3
Exec Bound: 1, While Loop: true, Num VM Ops: 1
Inputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha_pows@tower_verify.main.1.0: field
    eval_len@tower_verify.main.1.0: u32
    expected_max_round@tower_verify.main.1.0: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    logup_spec_p_input_layer_eval@tower_verify.main.1.0: field
    logup_spec_q_input_layer_eval@tower_verify.main.1.0: field
    next_rt^eval@tower_verify.main.1.0: field
    next_rt^point@tower_verify.main.1.0: field
    num_fanin@tower_verify.main.1.0: u32
    prod_spec_input_layer_eval@tower_verify.main.1.0: field
    round@tower_verify.main.1.0: u32
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Outputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha_pows@tower_verify.main.1.0: field
    aux_info^max_degree@verify_sumcheck@tower_verify.main.5.0: u32
    aux_info^num_variables@verify_sumcheck@tower_verify.main.5.0: u32
    claimed_sum@verify_sumcheck@tower_verify.main.5.0: field
    eval_len@tower_verify.main.1.0: u32
    expected_max_round@tower_verify.main.1.0: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    logup_spec_p_input_layer_eval@tower_verify.main.1.0: field
    logup_spec_q_input_layer_eval@tower_verify.main.1.0: field
    num_fanin@tower_verify.main.1.0: u32
    out_rt@tower_verify.main.1.0: field
    prod_spec_input_layer_eval@tower_verify.main.1.0: field
    proof^proofs@verify_sumcheck@tower_verify.main.5.0: field
    round@tower_verify.main.1.0: u32
    rt_len@tower_verify.main.1.0: u32
    t^hash@tower_verify.main.1.0: field
    t^hash@verify_sumcheck@tower_verify.main.5.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Instructions:
    field out_rt@tower_verify.main.1.0 = next_rt^point@tower_verify.main.1.0
    field out_claim@tower_verify.main.1.0 = next_rt^eval@tower_verify.main.1.0
    u32 rt_len@tower_verify.main.1.0 = round@tower_verify.main.1.0 + 1 <U32> * log2_num_fanin@tower_verify.main.1.0
    field[0 <U32>] array^0@tower_verify.main.1.1
    field load^0@tower_verify.main.1.4 = tower_proofs^proofs@tower_verify.main.1.0[round@tower_verify.main.1.0]
    field struct^0^proofs@tower_verify.main.1.0 = load^0@tower_verify.main.1.4
    u32 struct^1^max_degree@tower_verify.main.1.0 = num_fanin@tower_verify.main.1.0 + 1 <U32>
    u32 struct^1^num_variables@tower_verify.main.1.0 = rt_len@tower_verify.main.1.0
    field claimed_sum@verify_sumcheck@tower_verify.main.5.0 = out_claim@tower_verify.main.1.0
    field proof^proofs@verify_sumcheck@tower_verify.main.5.0 = struct^0^proofs@tower_verify.main.1.0
    u32 aux_info^max_degree@verify_sumcheck@tower_verify.main.5.0 = struct^1^max_degree@tower_verify.main.1.0
    u32 aux_info^num_variables@verify_sumcheck@tower_verify.main.5.0 = struct^1^num_variables@tower_verify.main.1.0
    field t^hash@verify_sumcheck@tower_verify.main.5.0 = t^hash@tower_verify.main.1.0
Transition:
    aux_info^num_variables@verify_sumcheck@tower_verify.main.5.0 == 0 <U32> ? -> 19 : -> 20

Block 42:
Func: main, Scope: 4
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %AS: field
    %BP: field
    %RET^expected_evaluation.main: field
    %RET^point.main: field
    %SP: field
    %TS: field
    alpha_pows@tower_verify.main.1.0: field
    eval_len@tower_verify.main.1.0: u32
    expected_max_round@tower_verify.main.1.0: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    logup_spec_p_input_layer_eval@tower_verify.main.1.0: field
    logup_spec_q_input_layer_eval@tower_verify.main.1.0: field
    num_fanin@tower_verify.main.1.0: u32
    out_rt@tower_verify.main.1.0: field
    prod_spec_input_layer_eval@tower_verify.main.1.0: field
    round@tower_verify.main.1.0: u32
    rt_len@tower_verify.main.1.0: u32
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Outputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha_pows@tower_verify.main.1.0: field
    eval_len@tower_verify.main.1.0: u32
    expected_evaluation@tower_verify.main.1.0: field
    expected_max_round@tower_verify.main.1.0: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    logup_spec_p_input_layer_eval@tower_verify.main.1.0: field
    logup_spec_q_input_layer_eval@tower_verify.main.1.0: field
    num_fanin@tower_verify.main.1.0: u32
    out_rt@tower_verify.main.1.0: field
    prod_spec_input_layer_eval@tower_verify.main.1.0: field
    round@tower_verify.main.1.0: u32
    rt@tower_verify.main.1.0: field
    rt_len@tower_verify.main.1.0: u32
    spec_index@tower_verify.main.1.0: u32
    sumcheck_claim^expected_evaluation@tower_verify.main.1.0: field
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Instructions:
    field ret^0^expected_evaluation@tower_verify.main.1.0 = %RET^expected_evaluation.main
    field ret^0^point@tower_verify.main.1.0 = %RET^point.main
    field sumcheck_claim^expected_evaluation@tower_verify.main.1.0 = ret^0^expected_evaluation@tower_verify.main.1.0
    field sumcheck_claim^point@tower_verify.main.1.0 = ret^0^point@tower_verify.main.1.0
    field rt@tower_verify.main.1.0 = sumcheck_claim^point@tower_verify.main.1.0
    field expected_evaluation@tower_verify.main.1.0 = 0 <Field>
    u32 spec_index@tower_verify.main.1.0 = 0 <U32>
Transition:
    spec_index@tower_verify.main.1.0 != tower_proofs^prod_spec_size@tower_verify.main.1.0 ? -> 43 : -> 49

Block 43:
Func: main, Scope: 6
Exec Bound: 1, While Loop: true, Num VM Ops: 1
Inputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha_pows@tower_verify.main.1.0: field
    eval_len@tower_verify.main.1.0: u32
    expected_evaluation@tower_verify.main.1.0: field
    expected_max_round@tower_verify.main.1.0: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    logup_spec_p_input_layer_eval@tower_verify.main.1.0: field
    logup_spec_q_input_layer_eval@tower_verify.main.1.0: field
    num_fanin@tower_verify.main.1.0: u32
    out_rt@tower_verify.main.1.0: field
    prod_spec_input_layer_eval@tower_verify.main.1.0: field
    round@tower_verify.main.1.0: u32
    rt@tower_verify.main.1.0: field
    rt_len@tower_verify.main.1.0: u32
    spec_index@tower_verify.main.1.0: u32
    sumcheck_claim^expected_evaluation@tower_verify.main.1.0: field
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Outputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha_pows@tower_verify.main.1.0: field
    eval_len@tower_verify.main.1.0: u32
    expected_evaluation@tower_verify.main.1.0: field
    expected_max_round@tower_verify.main.1.0: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    logup_spec_p_input_layer_eval@tower_verify.main.1.0: field
    logup_spec_q_input_layer_eval@tower_verify.main.1.0: field
    num_fanin@tower_verify.main.1.0: u32
    out_rt@tower_verify.main.1.0: field
    prod_spec_input_layer_eval@tower_verify.main.1.0: field
    round@tower_verify.main.1.0: u32
    rt@tower_verify.main.1.0: field
    rt_len@tower_verify.main.1.0: u32
    spec_index@tower_verify.main.1.0: u32
    sumcheck_claim^expected_evaluation@tower_verify.main.1.0: field
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Instructions:
    u32 load^0@tower_verify.main.2.0 = tower_proofs^layer_per_spec@tower_verify.main.1.0[spec_index@tower_verify.main.1.0]
Transition:
    load^0@tower_verify.main.2.0 < round@tower_verify.main.1.0 ? -> 44 : -> 48

Block 44:
Func: main, Scope: 8
Exec Bound: 1, While Loop: false, Num VM Ops: 1
Inputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha_pows@tower_verify.main.1.0: field
    eval_len@tower_verify.main.1.0: u32
    expected_evaluation@tower_verify.main.1.0: field
    expected_max_round@tower_verify.main.1.0: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    logup_spec_p_input_layer_eval@tower_verify.main.1.0: field
    logup_spec_q_input_layer_eval@tower_verify.main.1.0: field
    num_fanin@tower_verify.main.1.0: u32
    out_rt@tower_verify.main.1.0: field
    prod_spec_input_layer_eval@tower_verify.main.1.0: field
    round@tower_verify.main.1.0: u32
    rt@tower_verify.main.1.0: field
    rt_len@tower_verify.main.1.0: u32
    spec_index@tower_verify.main.1.0: u32
    sumcheck_claim^expected_evaluation@tower_verify.main.1.0: field
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Outputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha@tower_verify.main.2.1: field
    alpha_pows@tower_verify.main.1.0: field
    eval_len@tower_verify.main.1.0: u32
    expected_evaluation@tower_verify.main.1.0: field
    expected_max_round@tower_verify.main.1.0: u32
    i@tower_verify.main.1.4: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    logup_spec_p_input_layer_eval@tower_verify.main.1.0: field
    logup_spec_q_input_layer_eval@tower_verify.main.1.0: field
    num_fanin@tower_verify.main.1.0: u32
    out_rt@tower_verify.main.1.0: field
    prod@tower_verify.main.1.0: field
    prod_spec_input_layer_eval@tower_verify.main.1.0: field
    round@tower_verify.main.1.0: u32
    rt@tower_verify.main.1.0: field
    rt_len@tower_verify.main.1.0: u32
    spec_index@tower_verify.main.1.0: u32
    sumcheck_claim^expected_evaluation@tower_verify.main.1.0: field
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Instructions:
    field load^0@tower_verify.main.3.0 = alpha_pows@tower_verify.main.1.0[spec_index@tower_verify.main.1.0]
    field alpha@tower_verify.main.2.1 = load^0@tower_verify.main.3.0
    field prod@tower_verify.main.1.0 = 1 <Field>
    u32 i@tower_verify.main.1.4 = 0 <U32>
Transition:
    i@tower_verify.main.1.4 != eval_len@tower_verify.main.1.0 ? -> 45 : -> 46

Block 45:
Func: main, Scope: 10
Exec Bound: 1, While Loop: true, Num VM Ops: 3
Inputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha@tower_verify.main.2.1: field
    alpha_pows@tower_verify.main.1.0: field
    eval_len@tower_verify.main.1.0: u32
    expected_evaluation@tower_verify.main.1.0: field
    expected_max_round@tower_verify.main.1.0: u32
    i@tower_verify.main.1.4: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    logup_spec_p_input_layer_eval@tower_verify.main.1.0: field
    logup_spec_q_input_layer_eval@tower_verify.main.1.0: field
    num_fanin@tower_verify.main.1.0: u32
    out_rt@tower_verify.main.1.0: field
    prod@tower_verify.main.1.0: field
    prod_spec_input_layer_eval@tower_verify.main.1.0: field
    round@tower_verify.main.1.0: u32
    rt@tower_verify.main.1.0: field
    rt_len@tower_verify.main.1.0: u32
    spec_index@tower_verify.main.1.0: u32
    sumcheck_claim^expected_evaluation@tower_verify.main.1.0: field
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Outputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha@tower_verify.main.2.1: field
    alpha_pows@tower_verify.main.1.0: field
    eval_len@tower_verify.main.1.0: u32
    expected_evaluation@tower_verify.main.1.0: field
    expected_max_round@tower_verify.main.1.0: u32
    i@tower_verify.main.1.4: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    logup_spec_p_input_layer_eval@tower_verify.main.1.0: field
    logup_spec_q_input_layer_eval@tower_verify.main.1.0: field
    num_fanin@tower_verify.main.1.0: u32
    out_rt@tower_verify.main.1.0: field
    prod@tower_verify.main.1.0: field
    prod_spec_input_layer_eval@tower_verify.main.1.0: field
    round@tower_verify.main.1.0: u32
    rt@tower_verify.main.1.0: field
    rt_len@tower_verify.main.1.0: u32
    spec_index@tower_verify.main.1.0: u32
    sumcheck_claim^expected_evaluation@tower_verify.main.1.0: field
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Instructions:
    field load^0@tower_verify.main.4.0 = tower_proofs^prod_specs_eval@tower_verify.main.1.0[spec_index@tower_verify.main.1.0]
    field load^1@tower_verify.main.1.1 = load^0@tower_verify.main.4.0[round@tower_verify.main.1.0]
    field load^2@tower_verify.main.1.1 = load^1@tower_verify.main.1.1[i@tower_verify.main.1.4]
    field prod@tower_verify.main.1.0 = prod@tower_verify.main.1.0 * load^2@tower_verify.main.1.1
    i@tower_verify.main.1.4 = i@tower_verify.main.1.4 + 1 <U32>
Transition:
    i@tower_verify.main.1.4 != eval_len@tower_verify.main.1.0 ? -> 45 : -> 46

Block 46:
Func: main, Scope: 9
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha@tower_verify.main.2.1: field
    alpha_pows@tower_verify.main.1.0: field
    eval_len@tower_verify.main.1.0: u32
    expected_evaluation@tower_verify.main.1.0: field
    expected_max_round@tower_verify.main.1.0: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    logup_spec_p_input_layer_eval@tower_verify.main.1.0: field
    logup_spec_q_input_layer_eval@tower_verify.main.1.0: field
    num_fanin@tower_verify.main.1.0: u32
    out_rt@tower_verify.main.1.0: field
    prod@tower_verify.main.1.0: field
    prod_spec_input_layer_eval@tower_verify.main.1.0: field
    round@tower_verify.main.1.0: u32
    rt@tower_verify.main.1.0: field
    rt_len@tower_verify.main.1.0: u32
    spec_index@tower_verify.main.1.0: u32
    sumcheck_claim^expected_evaluation@tower_verify.main.1.0: field
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Outputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    eval_len@tower_verify.main.1.0: u32
    expected_evaluation@tower_verify.main.1.0: field
    expected_max_round@tower_verify.main.1.0: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    len.eq_eval.0.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    logup_spec_p_input_layer_eval@tower_verify.main.1.0: field
    logup_spec_q_input_layer_eval@tower_verify.main.1.0: field
    num_fanin@tower_verify.main.1.0: u32
    out_rt@tower_verify.main.1.0: field
    prod@tower_verify.main.1.0: field
    prod_spec_input_layer_eval@tower_verify.main.1.0: field
    round@tower_verify.main.1.0: u32
    rp@.eq_eval: field
    rt@tower_verify.main.1.0: field
    rt_len@tower_verify.main.1.0: u32
    spec_index@tower_verify.main.1.0: u32
    sumcheck_claim^expected_evaluation@tower_verify.main.1.0: field
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
    x.eq_eval.0.0: field
    y.eq_eval.0.0: field
Instructions:
    u32 len.eq_eval.0.0 = rt_len@tower_verify.main.1.0
    field x.eq_eval.0.0 = out_rt@tower_verify.main.1.0
    field y.eq_eval.0.0 = rt@tower_verify.main.1.0
    %PHY[%SP + 0] = %BP <field>
    field %BP = %SP
    %PHY[%SP + 1] = alpha@tower_verify.main.2.1 <field>
    %PHY[%SP + 2] = alpha_pows@tower_verify.main.1.0 <field>
    field rp@.eq_eval = 47 <Field>
    %SP = %SP + 3 <Field>
Transition: -> 5

Block 47:
Func: main, Scope: 8
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %AS: field
    %BP: field
    %RET.eq_eval: field
    %SP: field
    %TS: field
    eval_len@tower_verify.main.1.0: u32
    expected_evaluation@tower_verify.main.1.0: field
    expected_max_round@tower_verify.main.1.0: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    logup_spec_p_input_layer_eval@tower_verify.main.1.0: field
    logup_spec_q_input_layer_eval@tower_verify.main.1.0: field
    num_fanin@tower_verify.main.1.0: u32
    out_rt@tower_verify.main.1.0: field
    prod@tower_verify.main.1.0: field
    prod_spec_input_layer_eval@tower_verify.main.1.0: field
    round@tower_verify.main.1.0: u32
    rt@tower_verify.main.1.0: field
    rt_len@tower_verify.main.1.0: u32
    spec_index@tower_verify.main.1.0: u32
    sumcheck_claim^expected_evaluation@tower_verify.main.1.0: field
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Outputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha_pows@tower_verify.main.1.0: field
    eval_len@tower_verify.main.1.0: u32
    expected_evaluation@tower_verify.main.1.0: field
    expected_max_round@tower_verify.main.1.0: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    logup_spec_p_input_layer_eval@tower_verify.main.1.0: field
    logup_spec_q_input_layer_eval@tower_verify.main.1.0: field
    num_fanin@tower_verify.main.1.0: u32
    out_rt@tower_verify.main.1.0: field
    prod_spec_input_layer_eval@tower_verify.main.1.0: field
    round@tower_verify.main.1.0: u32
    rt@tower_verify.main.1.0: field
    rt_len@tower_verify.main.1.0: u32
    spec_index@tower_verify.main.1.0: u32
    sumcheck_claim^expected_evaluation@tower_verify.main.1.0: field
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Instructions:
    field alpha_pows@tower_verify.main.1.0 = %PHY[%BP + 2]
    field alpha@tower_verify.main.2.1 = %PHY[%BP + 1]
    field %BP = %PHY[%BP + 0]
    field ret^0@tower_verify.main.3.0 = %RET.eq_eval
    field expected_evaluation@tower_verify.main.1.0 = expected_evaluation@tower_verify.main.1.0 + ret^0@tower_verify.main.3.0 * alpha@tower_verify.main.2.1 * prod@tower_verify.main.1.0
Transition: -> 48

Block 48:
Func: main, Scope: 7
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha_pows@tower_verify.main.1.0: field
    eval_len@tower_verify.main.1.0: u32
    expected_evaluation@tower_verify.main.1.0: field
    expected_max_round@tower_verify.main.1.0: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    logup_spec_p_input_layer_eval@tower_verify.main.1.0: field
    logup_spec_q_input_layer_eval@tower_verify.main.1.0: field
    num_fanin@tower_verify.main.1.0: u32
    out_rt@tower_verify.main.1.0: field
    prod_spec_input_layer_eval@tower_verify.main.1.0: field
    round@tower_verify.main.1.0: u32
    rt@tower_verify.main.1.0: field
    rt_len@tower_verify.main.1.0: u32
    spec_index@tower_verify.main.1.0: u32
    sumcheck_claim^expected_evaluation@tower_verify.main.1.0: field
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Outputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha_pows@tower_verify.main.1.0: field
    eval_len@tower_verify.main.1.0: u32
    expected_evaluation@tower_verify.main.1.0: field
    expected_max_round@tower_verify.main.1.0: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    logup_spec_p_input_layer_eval@tower_verify.main.1.0: field
    logup_spec_q_input_layer_eval@tower_verify.main.1.0: field
    num_fanin@tower_verify.main.1.0: u32
    out_rt@tower_verify.main.1.0: field
    prod_spec_input_layer_eval@tower_verify.main.1.0: field
    round@tower_verify.main.1.0: u32
    rt@tower_verify.main.1.0: field
    rt_len@tower_verify.main.1.0: u32
    spec_index@tower_verify.main.1.0: u32
    sumcheck_claim^expected_evaluation@tower_verify.main.1.0: field
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Instructions:
    spec_index@tower_verify.main.1.0 = spec_index@tower_verify.main.1.0 + 1 <U32>
Transition:
    spec_index@tower_verify.main.1.0 != tower_proofs^prod_spec_size@tower_verify.main.1.0 ? -> 43 : -> 49

Block 49:
Func: main, Scope: 5
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha_pows@tower_verify.main.1.0: field
    eval_len@tower_verify.main.1.0: u32
    expected_evaluation@tower_verify.main.1.0: field
    expected_max_round@tower_verify.main.1.0: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    logup_spec_p_input_layer_eval@tower_verify.main.1.0: field
    logup_spec_q_input_layer_eval@tower_verify.main.1.0: field
    num_fanin@tower_verify.main.1.0: u32
    out_rt@tower_verify.main.1.0: field
    prod_spec_input_layer_eval@tower_verify.main.1.0: field
    round@tower_verify.main.1.0: u32
    rt@tower_verify.main.1.0: field
    rt_len@tower_verify.main.1.0: u32
    sumcheck_claim^expected_evaluation@tower_verify.main.1.0: field
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Outputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha_pows@tower_verify.main.1.0: field
    eval_len@tower_verify.main.1.0: u32
    expected_evaluation@tower_verify.main.1.0: field
    expected_max_round@tower_verify.main.1.0: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    logup_spec_p_input_layer_eval@tower_verify.main.1.0: field
    logup_spec_q_input_layer_eval@tower_verify.main.1.0: field
    num_fanin@tower_verify.main.1.0: u32
    out_rt@tower_verify.main.1.0: field
    prod_spec_input_layer_eval@tower_verify.main.1.0: field
    round@tower_verify.main.1.0: u32
    rt@tower_verify.main.1.0: field
    rt_len@tower_verify.main.1.0: u32
    spec_index@tower_verify.main.1.1: u32
    sumcheck_claim^expected_evaluation@tower_verify.main.1.0: field
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Instructions:
    u32 spec_index@tower_verify.main.1.1 = 0 <U32>
Transition:
    spec_index@tower_verify.main.1.1 != tower_proofs^logup_spec_size@tower_verify.main.1.0 ? -> 50 : -> 54

Block 50:
Func: main, Scope: 6
Exec Bound: 1, While Loop: true, Num VM Ops: 1
Inputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha_pows@tower_verify.main.1.0: field
    eval_len@tower_verify.main.1.0: u32
    expected_evaluation@tower_verify.main.1.0: field
    expected_max_round@tower_verify.main.1.0: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    logup_spec_p_input_layer_eval@tower_verify.main.1.0: field
    logup_spec_q_input_layer_eval@tower_verify.main.1.0: field
    num_fanin@tower_verify.main.1.0: u32
    out_rt@tower_verify.main.1.0: field
    prod_spec_input_layer_eval@tower_verify.main.1.0: field
    round@tower_verify.main.1.0: u32
    rt@tower_verify.main.1.0: field
    rt_len@tower_verify.main.1.0: u32
    spec_index@tower_verify.main.1.1: u32
    sumcheck_claim^expected_evaluation@tower_verify.main.1.0: field
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Outputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha_pows@tower_verify.main.1.0: field
    eval_len@tower_verify.main.1.0: u32
    expected_evaluation@tower_verify.main.1.0: field
    expected_max_round@tower_verify.main.1.0: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    logup_spec_p_input_layer_eval@tower_verify.main.1.0: field
    logup_spec_q_input_layer_eval@tower_verify.main.1.0: field
    num_fanin@tower_verify.main.1.0: u32
    out_rt@tower_verify.main.1.0: field
    prod_spec_input_layer_eval@tower_verify.main.1.0: field
    round@tower_verify.main.1.0: u32
    rt@tower_verify.main.1.0: field
    rt_len@tower_verify.main.1.0: u32
    spec_index@tower_verify.main.1.1: u32
    sumcheck_claim^expected_evaluation@tower_verify.main.1.0: field
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Instructions:
    u32 load^0@tower_verify.main.2.1 = tower_proofs^layer_per_spec@tower_verify.main.1.0[spec_index@tower_verify.main.1.1]
Transition:
    load^0@tower_verify.main.2.1 < round@tower_verify.main.1.0 ? -> 51 : -> 53

Block 51:
Func: main, Scope: 8
Exec Bound: 1, While Loop: false, Num VM Ops: 14
Inputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha_pows@tower_verify.main.1.0: field
    eval_len@tower_verify.main.1.0: u32
    expected_evaluation@tower_verify.main.1.0: field
    expected_max_round@tower_verify.main.1.0: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    logup_spec_p_input_layer_eval@tower_verify.main.1.0: field
    logup_spec_q_input_layer_eval@tower_verify.main.1.0: field
    num_fanin@tower_verify.main.1.0: u32
    out_rt@tower_verify.main.1.0: field
    prod_spec_input_layer_eval@tower_verify.main.1.0: field
    round@tower_verify.main.1.0: u32
    rt@tower_verify.main.1.0: field
    rt_len@tower_verify.main.1.0: u32
    spec_index@tower_verify.main.1.1: u32
    sumcheck_claim^expected_evaluation@tower_verify.main.1.0: field
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Outputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    eval_len@tower_verify.main.1.0: u32
    expected_evaluation@tower_verify.main.1.0: field
    expected_max_round@tower_verify.main.1.0: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    len.eq_eval.0.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    logup_spec_p_input_layer_eval@tower_verify.main.1.0: field
    logup_spec_q_input_layer_eval@tower_verify.main.1.0: field
    num_fanin@tower_verify.main.1.0: u32
    out_rt@tower_verify.main.1.0: field
    p1@tower_verify.main.1.0: field
    p2@tower_verify.main.1.0: field
    prod_spec_input_layer_eval@tower_verify.main.1.0: field
    q1@tower_verify.main.1.0: field
    q2@tower_verify.main.1.0: field
    round@tower_verify.main.1.0: u32
    rp@.eq_eval: field
    rt@tower_verify.main.1.0: field
    rt_len@tower_verify.main.1.0: u32
    spec_index@tower_verify.main.1.1: u32
    sumcheck_claim^expected_evaluation@tower_verify.main.1.0: field
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
    x.eq_eval.0.0: field
    y.eq_eval.0.0: field
Instructions:
    field load^0@tower_verify.main.3.1 = alpha_pows@tower_verify.main.1.0[initial_prod_evals_len@tower_verify.main.1.0 + 2 <U32> * spec_index@tower_verify.main.1.1]
    field alpha_numerator@tower_verify.main.1.1 = load^0@tower_verify.main.3.1
    field load^0@tower_verify.main.3.1 = alpha_pows@tower_verify.main.1.0[initial_prod_evals_len@tower_verify.main.1.0 + 2 <U32> * spec_index@tower_verify.main.1.1 + 1 <U32>]
    field alpha_denominator@tower_verify.main.1.1 = load^0@tower_verify.main.3.1
    field load^0@tower_verify.main.3.2 = tower_proofs^logup_specs_eval@tower_verify.main.1.0[spec_index@tower_verify.main.1.1]
    field load^1@tower_verify.main.1.2 = load^0@tower_verify.main.3.2[round@tower_verify.main.1.0]
    field load^2@tower_verify.main.1.2 = load^1@tower_verify.main.1.2[0 <Field>]
    field p1@tower_verify.main.1.0 = load^2@tower_verify.main.1.2
    field load^0@tower_verify.main.3.2 = tower_proofs^logup_specs_eval@tower_verify.main.1.0[spec_index@tower_verify.main.1.1]
    field load^1@tower_verify.main.1.2 = load^0@tower_verify.main.3.2[round@tower_verify.main.1.0]
    field load^2@tower_verify.main.1.2 = load^1@tower_verify.main.1.2[1 <Field>]
    field p2@tower_verify.main.1.0 = load^2@tower_verify.main.1.2
    field load^0@tower_verify.main.3.2 = tower_proofs^logup_specs_eval@tower_verify.main.1.0[spec_index@tower_verify.main.1.1]
    field load^1@tower_verify.main.1.2 = load^0@tower_verify.main.3.2[round@tower_verify.main.1.0]
    field load^2@tower_verify.main.1.2 = load^1@tower_verify.main.1.2[2 <Field>]
    field q1@tower_verify.main.1.0 = load^2@tower_verify.main.1.2
    field load^0@tower_verify.main.3.2 = tower_proofs^logup_specs_eval@tower_verify.main.1.0[spec_index@tower_verify.main.1.1]
    field load^1@tower_verify.main.1.2 = load^0@tower_verify.main.3.2[round@tower_verify.main.1.0]
    field load^2@tower_verify.main.1.2 = load^1@tower_verify.main.1.2[3 <Field>]
    field q2@tower_verify.main.1.0 = load^2@tower_verify.main.1.2
    u32 len.eq_eval.0.0 = rt_len@tower_verify.main.1.0
    field x.eq_eval.0.0 = out_rt@tower_verify.main.1.0
    field y.eq_eval.0.0 = rt@tower_verify.main.1.0
    %PHY[%SP + 0] = %BP <field>
    field %BP = %SP
    %PHY[%SP + 1] = alpha_denominator@tower_verify.main.1.1 <field>
    %PHY[%SP + 2] = alpha_numerator@tower_verify.main.1.1 <field>
    %PHY[%SP + 3] = alpha_pows@tower_verify.main.1.0 <field>
    field rp@.eq_eval = 52 <Field>
    %SP = %SP + 4 <Field>
Transition: -> 5

Block 52:
Func: main, Scope: 8
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %AS: field
    %BP: field
    %RET.eq_eval: field
    %SP: field
    %TS: field
    eval_len@tower_verify.main.1.0: u32
    expected_evaluation@tower_verify.main.1.0: field
    expected_max_round@tower_verify.main.1.0: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    logup_spec_p_input_layer_eval@tower_verify.main.1.0: field
    logup_spec_q_input_layer_eval@tower_verify.main.1.0: field
    num_fanin@tower_verify.main.1.0: u32
    out_rt@tower_verify.main.1.0: field
    p1@tower_verify.main.1.0: field
    p2@tower_verify.main.1.0: field
    prod_spec_input_layer_eval@tower_verify.main.1.0: field
    q1@tower_verify.main.1.0: field
    q2@tower_verify.main.1.0: field
    round@tower_verify.main.1.0: u32
    rt@tower_verify.main.1.0: field
    rt_len@tower_verify.main.1.0: u32
    spec_index@tower_verify.main.1.1: u32
    sumcheck_claim^expected_evaluation@tower_verify.main.1.0: field
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Outputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha_pows@tower_verify.main.1.0: field
    eval_len@tower_verify.main.1.0: u32
    expected_evaluation@tower_verify.main.1.0: field
    expected_max_round@tower_verify.main.1.0: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    logup_spec_p_input_layer_eval@tower_verify.main.1.0: field
    logup_spec_q_input_layer_eval@tower_verify.main.1.0: field
    num_fanin@tower_verify.main.1.0: u32
    out_rt@tower_verify.main.1.0: field
    prod_spec_input_layer_eval@tower_verify.main.1.0: field
    round@tower_verify.main.1.0: u32
    rt@tower_verify.main.1.0: field
    rt_len@tower_verify.main.1.0: u32
    spec_index@tower_verify.main.1.1: u32
    sumcheck_claim^expected_evaluation@tower_verify.main.1.0: field
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Instructions:
    field alpha_pows@tower_verify.main.1.0 = %PHY[%BP + 3]
    field alpha_numerator@tower_verify.main.1.1 = %PHY[%BP + 2]
    field alpha_denominator@tower_verify.main.1.1 = %PHY[%BP + 1]
    field %BP = %PHY[%BP + 0]
    field ret^0@tower_verify.main.3.1 = %RET.eq_eval
    field expected_evaluation@tower_verify.main.1.0 = expected_evaluation@tower_verify.main.1.0 + ret^0@tower_verify.main.3.1 * alpha_numerator@tower_verify.main.1.1 * p1@tower_verify.main.1.0 * q2@tower_verify.main.1.0 + p2@tower_verify.main.1.0 * q1@tower_verify.main.1.0 + alpha_denominator@tower_verify.main.1.1 * q1@tower_verify.main.1.0 * q2@tower_verify.main.1.0
Transition: -> 53

Block 53:
Func: main, Scope: 7
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha_pows@tower_verify.main.1.0: field
    eval_len@tower_verify.main.1.0: u32
    expected_evaluation@tower_verify.main.1.0: field
    expected_max_round@tower_verify.main.1.0: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    logup_spec_p_input_layer_eval@tower_verify.main.1.0: field
    logup_spec_q_input_layer_eval@tower_verify.main.1.0: field
    num_fanin@tower_verify.main.1.0: u32
    out_rt@tower_verify.main.1.0: field
    prod_spec_input_layer_eval@tower_verify.main.1.0: field
    round@tower_verify.main.1.0: u32
    rt@tower_verify.main.1.0: field
    rt_len@tower_verify.main.1.0: u32
    spec_index@tower_verify.main.1.1: u32
    sumcheck_claim^expected_evaluation@tower_verify.main.1.0: field
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Outputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha_pows@tower_verify.main.1.0: field
    eval_len@tower_verify.main.1.0: u32
    expected_evaluation@tower_verify.main.1.0: field
    expected_max_round@tower_verify.main.1.0: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    logup_spec_p_input_layer_eval@tower_verify.main.1.0: field
    logup_spec_q_input_layer_eval@tower_verify.main.1.0: field
    num_fanin@tower_verify.main.1.0: u32
    out_rt@tower_verify.main.1.0: field
    prod_spec_input_layer_eval@tower_verify.main.1.0: field
    round@tower_verify.main.1.0: u32
    rt@tower_verify.main.1.0: field
    rt_len@tower_verify.main.1.0: u32
    spec_index@tower_verify.main.1.1: u32
    sumcheck_claim^expected_evaluation@tower_verify.main.1.0: field
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Instructions:
    spec_index@tower_verify.main.1.1 = spec_index@tower_verify.main.1.1 + 1 <U32>
Transition:
    spec_index@tower_verify.main.1.1 != tower_proofs^logup_spec_size@tower_verify.main.1.0 ? -> 50 : -> 54

Block 54:
Func: main, Scope: 5
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha_pows@tower_verify.main.1.0: field
    eval_len@tower_verify.main.1.0: u32
    expected_evaluation@tower_verify.main.1.0: field
    expected_max_round@tower_verify.main.1.0: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    logup_spec_p_input_layer_eval@tower_verify.main.1.0: field
    logup_spec_q_input_layer_eval@tower_verify.main.1.0: field
    num_fanin@tower_verify.main.1.0: u32
    prod_spec_input_layer_eval@tower_verify.main.1.0: field
    round@tower_verify.main.1.0: u32
    rt@tower_verify.main.1.0: field
    rt_len@tower_verify.main.1.0: u32
    sumcheck_claim^expected_evaluation@tower_verify.main.1.0: field
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Outputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha_pows@tower_verify.main.1.0: field
    eval_len@tower_verify.main.1.0: u32
    expected_max_round@tower_verify.main.1.0: u32
    i@tower_verify.main.1.5: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    logup_spec_p_input_layer_eval@tower_verify.main.1.0: field
    logup_spec_q_input_layer_eval@tower_verify.main.1.0: field
    num_fanin@tower_verify.main.1.0: u32
    prod_spec_input_layer_eval@tower_verify.main.1.0: field
    r_merge@tower_verify.main.1.0: field
    round@tower_verify.main.1.0: u32
    rt@tower_verify.main.1.0: field
    rt_len@tower_verify.main.1.0: u32
    rt_prime@tower_verify.main.1.0: field
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Instructions:
    assert expected_evaluation@tower_verify.main.1.0 == sumcheck_claim^expected_evaluation@tower_verify.main.1.0
    field[log2_num_fanin@tower_verify.main.1.0] r_merge@tower_verify.main.1.0
    field[rt_len@tower_verify.main.1.0 + log2_num_fanin@tower_verify.main.1.0] rt_prime@tower_verify.main.1.0
    u32 i@tower_verify.main.1.5 = 0 <U32>
Transition:
    i@tower_verify.main.1.5 != rt_len@tower_verify.main.1.0 ? -> 55 : -> 56

Block 55:
Func: main, Scope: 6
Exec Bound: 1, While Loop: true, Num VM Ops: 2
Inputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha_pows@tower_verify.main.1.0: field
    eval_len@tower_verify.main.1.0: u32
    expected_max_round@tower_verify.main.1.0: u32
    i@tower_verify.main.1.5: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    logup_spec_p_input_layer_eval@tower_verify.main.1.0: field
    logup_spec_q_input_layer_eval@tower_verify.main.1.0: field
    num_fanin@tower_verify.main.1.0: u32
    prod_spec_input_layer_eval@tower_verify.main.1.0: field
    r_merge@tower_verify.main.1.0: field
    round@tower_verify.main.1.0: u32
    rt@tower_verify.main.1.0: field
    rt_len@tower_verify.main.1.0: u32
    rt_prime@tower_verify.main.1.0: field
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Outputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha_pows@tower_verify.main.1.0: field
    eval_len@tower_verify.main.1.0: u32
    expected_max_round@tower_verify.main.1.0: u32
    i@tower_verify.main.1.5: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    logup_spec_p_input_layer_eval@tower_verify.main.1.0: field
    logup_spec_q_input_layer_eval@tower_verify.main.1.0: field
    num_fanin@tower_verify.main.1.0: u32
    prod_spec_input_layer_eval@tower_verify.main.1.0: field
    r_merge@tower_verify.main.1.0: field
    round@tower_verify.main.1.0: u32
    rt@tower_verify.main.1.0: field
    rt_len@tower_verify.main.1.0: u32
    rt_prime@tower_verify.main.1.0: field
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Instructions:
    field load^0@tower_verify.main.2.2 = rt@tower_verify.main.1.0[i@tower_verify.main.1.5]
    rt_prime@tower_verify.main.1.0[i@tower_verify.main.1.5] = load^0@tower_verify.main.2.2 <field>
    i@tower_verify.main.1.5 = i@tower_verify.main.1.5 + 1 <U32>
Transition:
    i@tower_verify.main.1.5 != rt_len@tower_verify.main.1.0 ? -> 55 : -> 56

Block 56:
Func: main, Scope: 5
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha_pows@tower_verify.main.1.0: field
    eval_len@tower_verify.main.1.0: u32
    expected_max_round@tower_verify.main.1.0: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    logup_spec_p_input_layer_eval@tower_verify.main.1.0: field
    logup_spec_q_input_layer_eval@tower_verify.main.1.0: field
    num_fanin@tower_verify.main.1.0: u32
    prod_spec_input_layer_eval@tower_verify.main.1.0: field
    r_merge@tower_verify.main.1.0: field
    round@tower_verify.main.1.0: u32
    rt_len@tower_verify.main.1.0: u32
    rt_prime@tower_verify.main.1.0: field
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Outputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha_pows@tower_verify.main.1.0: field
    eval_len@tower_verify.main.1.0: u32
    expected_max_round@tower_verify.main.1.0: u32
    i@tower_verify.main.1.6: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    logup_spec_p_input_layer_eval@tower_verify.main.1.0: field
    logup_spec_q_input_layer_eval@tower_verify.main.1.0: field
    num_fanin@tower_verify.main.1.0: u32
    prod_spec_input_layer_eval@tower_verify.main.1.0: field
    r_merge@tower_verify.main.1.0: field
    round@tower_verify.main.1.0: u32
    rt_len@tower_verify.main.1.0: u32
    rt_prime@tower_verify.main.1.0: field
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Instructions:
    u32 i@tower_verify.main.1.6 = 0 <U32>
Transition:
    i@tower_verify.main.1.6 != log2_num_fanin@tower_verify.main.1.0 ? -> 57 : -> 59

Block 57:
Func: main, Scope: 6
Exec Bound: 1, While Loop: true, Num VM Ops: 0
Inputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha_pows@tower_verify.main.1.0: field
    eval_len@tower_verify.main.1.0: u32
    expected_max_round@tower_verify.main.1.0: u32
    i@tower_verify.main.1.6: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    logup_spec_p_input_layer_eval@tower_verify.main.1.0: field
    logup_spec_q_input_layer_eval@tower_verify.main.1.0: field
    num_fanin@tower_verify.main.1.0: u32
    prod_spec_input_layer_eval@tower_verify.main.1.0: field
    r_merge@tower_verify.main.1.0: field
    round@tower_verify.main.1.0: u32
    rt_len@tower_verify.main.1.0: u32
    rt_prime@tower_verify.main.1.0: field
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Outputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    initial_prod_evals_len@tower_verify.main.1.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    logup_spec_p_input_layer_eval@tower_verify.main.1.0: field
    logup_spec_q_input_layer_eval@tower_verify.main.1.0: field
    num_fanin@tower_verify.main.1.0: u32
    prod_spec_input_layer_eval@tower_verify.main.1.0: field
    r_merge@tower_verify.main.1.0: field
    round@tower_verify.main.1.0: u32
    rp@.append_message_field: field
    rt_len@tower_verify.main.1.0: u32
    rt_prime@tower_verify.main.1.0: field
    t^hash.append_message_field.0.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Instructions:
    field t^hash.append_message_field.0.0 = t^hash@tower_verify.main.1.0
    %PHY[%SP + 0] = %BP <field>
    field %BP = %SP
    %PHY[%SP + 1] = alpha_pows@tower_verify.main.1.0 <field>
    %PHY[%SP + 2] = eval_len@tower_verify.main.1.0 <u32>
    %PHY[%SP + 3] = expected_max_round@tower_verify.main.1.0 <u32>
    %PHY[%SP + 4] = i@tower_verify.main.1.6 <u32>
    field rp@.append_message_field = 58 <Field>
    %SP = %SP + 5 <Field>
Transition: -> 70

Block 58:
Func: main, Scope: 7
Exec Bound: 1, While Loop: false, Num VM Ops: 2
Inputs:
    %AS: field
    %BP: field
    %RET^hash.append_message_field: field
    %SP: field
    %TS: field
    initial_prod_evals_len@tower_verify.main.1.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    logup_spec_p_input_layer_eval@tower_verify.main.1.0: field
    logup_spec_q_input_layer_eval@tower_verify.main.1.0: field
    num_fanin@tower_verify.main.1.0: u32
    prod_spec_input_layer_eval@tower_verify.main.1.0: field
    r_merge@tower_verify.main.1.0: field
    round@tower_verify.main.1.0: u32
    rt_len@tower_verify.main.1.0: u32
    rt_prime@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Outputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha_pows@tower_verify.main.1.0: field
    eval_len@tower_verify.main.1.0: u32
    expected_max_round@tower_verify.main.1.0: u32
    i@tower_verify.main.1.6: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    logup_spec_p_input_layer_eval@tower_verify.main.1.0: field
    logup_spec_q_input_layer_eval@tower_verify.main.1.0: field
    num_fanin@tower_verify.main.1.0: u32
    prod_spec_input_layer_eval@tower_verify.main.1.0: field
    r_merge@tower_verify.main.1.0: field
    round@tower_verify.main.1.0: u32
    rt_len@tower_verify.main.1.0: u32
    rt_prime@tower_verify.main.1.0: field
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Instructions:
    u32 i@tower_verify.main.1.6 = %PHY[%BP + 4]
    u32 expected_max_round@tower_verify.main.1.0 = %PHY[%BP + 3]
    u32 eval_len@tower_verify.main.1.0 = %PHY[%BP + 2]
    field alpha_pows@tower_verify.main.1.0 = %PHY[%BP + 1]
    field %BP = %PHY[%BP + 0]
    field ret^0^hash@tower_verify.main.2.1 = %RET^hash.append_message_field
    field t^hash@tower_verify.main.1.0 = ret^0^hash@tower_verify.main.2.1
    r_merge@tower_verify.main.1.0[i@tower_verify.main.1.6] = t^hash@tower_verify.main.1.0 <field>
    rt_prime@tower_verify.main.1.0[rt_len@tower_verify.main.1.0 + i@tower_verify.main.1.6] = t^hash@tower_verify.main.1.0 <field>
    i@tower_verify.main.1.6 = i@tower_verify.main.1.6 + 1 <U32>
Transition:
    i@tower_verify.main.1.6 != log2_num_fanin@tower_verify.main.1.0 ? -> 57 : -> 59

Block 59:
Func: main, Scope: 5
Exec Bound: 1, While Loop: false, Num VM Ops: 1
Inputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha_pows@tower_verify.main.1.0: field
    eval_len@tower_verify.main.1.0: u32
    expected_max_round@tower_verify.main.1.0: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    logup_spec_p_input_layer_eval@tower_verify.main.1.0: field
    logup_spec_q_input_layer_eval@tower_verify.main.1.0: field
    num_fanin@tower_verify.main.1.0: u32
    prod_spec_input_layer_eval@tower_verify.main.1.0: field
    r_merge@tower_verify.main.1.0: field
    round@tower_verify.main.1.0: u32
    rt_prime@tower_verify.main.1.0: field
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Outputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha_pows@tower_verify.main.1.0: field
    eval_len@tower_verify.main.1.0: u32
    evals@build_eq_x_r_vec_sequential@tower_verify.main.5.0: field
    expected_max_round@tower_verify.main.1.0: u32
    i@build_eq_x_r_vec_sequential@tower_verify.main.5.0: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    logup_spec_p_input_layer_eval@tower_verify.main.1.0: field
    logup_spec_q_input_layer_eval@tower_verify.main.1.0: field
    next_size@build_eq_x_r_vec_sequential@tower_verify.main.5.0: u32
    num_fanin@tower_verify.main.1.0: u32
    prod_spec_input_layer_eval@tower_verify.main.1.0: field
    r@build_eq_x_r_vec_sequential@tower_verify.main.5.0: field
    r_len@build_eq_x_r_vec_sequential@tower_verify.main.5.0: u32
    round@tower_verify.main.1.0: u32
    rt_prime@tower_verify.main.1.0: field
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Instructions:
    u32 r_len@build_eq_x_r_vec_sequential@tower_verify.main.5.0 = log2_num_fanin@tower_verify.main.1.0
    u32 r_len_pow2@build_eq_x_r_vec_sequential@tower_verify.main.5.0 = num_fanin@tower_verify.main.1.0
    field r@build_eq_x_r_vec_sequential@tower_verify.main.5.0 = r_merge@tower_verify.main.1.0
    field[r_len_pow2@build_eq_x_r_vec_sequential@tower_verify.main.5.0] evals@build_eq_x_r_vec_sequential@tower_verify.main.5.0
    evals@build_eq_x_r_vec_sequential@tower_verify.main.5.0[0 <Field>] = 1 <Field> <field>
    u32 next_size@build_eq_x_r_vec_sequential@tower_verify.main.5.0 = 1 <U32>
    u32 i@build_eq_x_r_vec_sequential@tower_verify.main.5.0 = 0 <U32>
Transition:
    i@build_eq_x_r_vec_sequential@tower_verify.main.5.0 != r_len@build_eq_x_r_vec_sequential@tower_verify.main.5.0 ? -> 1 : -> 4

Block 60:
Func: main, Scope: 6
Exec Bound: 1, While Loop: true, Num VM Ops: 1
Inputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha_pows@tower_verify.main.1.0: field
    coeffs@tower_verify.main.1.0: field
    eval_len@tower_verify.main.1.0: u32
    expected_max_round@tower_verify.main.1.0: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    logup_spec_p_input_layer_eval@tower_verify.main.1.0: field
    logup_spec_q_input_layer_eval@tower_verify.main.1.0: field
    num_fanin@tower_verify.main.1.0: u32
    prod_spec_evals@tower_verify.main.1.0: field
    prod_spec_input_layer_eval@tower_verify.main.1.0: field
    round@tower_verify.main.1.0: u32
    rt_prime@tower_verify.main.1.0: field
    spec_index@tower_verify.main.1.2: u32
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Outputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha_pows@tower_verify.main.1.0: field
    coeffs@tower_verify.main.1.0: field
    eval_len@tower_verify.main.1.0: u32
    expected_max_round@tower_verify.main.1.0: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    logup_spec_p_input_layer_eval@tower_verify.main.1.0: field
    logup_spec_q_input_layer_eval@tower_verify.main.1.0: field
    num_fanin@tower_verify.main.1.0: u32
    prod_spec_evals@tower_verify.main.1.0: field
    prod_spec_input_layer_eval@tower_verify.main.1.0: field
    round@tower_verify.main.1.0: u32
    rt_prime@tower_verify.main.1.0: field
    spec_index@tower_verify.main.1.2: u32
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Instructions:
    u32 load^0@tower_verify.main.2.3 = tower_proofs^layer_per_spec@tower_verify.main.1.0[spec_index@tower_verify.main.1.2]
Transition:
    load^0@tower_verify.main.2.3 < round@tower_verify.main.1.0 ? -> 61 : -> 64

Block 61:
Func: main, Scope: 8
Exec Bound: 1, While Loop: false, Num VM Ops: 1
Inputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha_pows@tower_verify.main.1.0: field
    coeffs@tower_verify.main.1.0: field
    eval_len@tower_verify.main.1.0: u32
    expected_max_round@tower_verify.main.1.0: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    logup_spec_p_input_layer_eval@tower_verify.main.1.0: field
    logup_spec_q_input_layer_eval@tower_verify.main.1.0: field
    num_fanin@tower_verify.main.1.0: u32
    prod_spec_evals@tower_verify.main.1.0: field
    prod_spec_input_layer_eval@tower_verify.main.1.0: field
    round@tower_verify.main.1.0: u32
    rt_prime@tower_verify.main.1.0: field
    spec_index@tower_verify.main.1.2: u32
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Outputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha@tower_verify.main.2.2: field
    alpha_pows@tower_verify.main.1.0: field
    coeffs@tower_verify.main.1.0: field
    eval_len@tower_verify.main.1.0: u32
    evals@tower_verify.main.1.1: field
    expected_max_round@tower_verify.main.1.0: u32
    i@tower_verify.main.1.7: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    logup_spec_p_input_layer_eval@tower_verify.main.1.0: field
    logup_spec_q_input_layer_eval@tower_verify.main.1.0: field
    num_fanin@tower_verify.main.1.0: u32
    prod_spec_evals@tower_verify.main.1.0: field
    prod_spec_input_layer_eval@tower_verify.main.1.0: field
    round@tower_verify.main.1.0: u32
    rt_prime@tower_verify.main.1.0: field
    spec_index@tower_verify.main.1.2: u32
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Instructions:
    field load^0@tower_verify.main.3.3 = alpha_pows@tower_verify.main.1.0[spec_index@tower_verify.main.1.2]
    field alpha@tower_verify.main.2.2 = load^0@tower_verify.main.3.3
    field evals@tower_verify.main.1.1 = 0 <Field>
    u32 i@tower_verify.main.1.7 = 0 <U32>
Transition:
    i@tower_verify.main.1.7 != eval_len@tower_verify.main.1.0 ? -> 62 : -> 63

Block 62:
Func: main, Scope: 10
Exec Bound: 1, While Loop: true, Num VM Ops: 4
Inputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha@tower_verify.main.2.2: field
    alpha_pows@tower_verify.main.1.0: field
    coeffs@tower_verify.main.1.0: field
    eval_len@tower_verify.main.1.0: u32
    evals@tower_verify.main.1.1: field
    expected_max_round@tower_verify.main.1.0: u32
    i@tower_verify.main.1.7: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    logup_spec_p_input_layer_eval@tower_verify.main.1.0: field
    logup_spec_q_input_layer_eval@tower_verify.main.1.0: field
    num_fanin@tower_verify.main.1.0: u32
    prod_spec_evals@tower_verify.main.1.0: field
    prod_spec_input_layer_eval@tower_verify.main.1.0: field
    round@tower_verify.main.1.0: u32
    rt_prime@tower_verify.main.1.0: field
    spec_index@tower_verify.main.1.2: u32
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Outputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha@tower_verify.main.2.2: field
    alpha_pows@tower_verify.main.1.0: field
    coeffs@tower_verify.main.1.0: field
    eval_len@tower_verify.main.1.0: u32
    evals@tower_verify.main.1.1: field
    expected_max_round@tower_verify.main.1.0: u32
    i@tower_verify.main.1.7: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    logup_spec_p_input_layer_eval@tower_verify.main.1.0: field
    logup_spec_q_input_layer_eval@tower_verify.main.1.0: field
    num_fanin@tower_verify.main.1.0: u32
    prod_spec_evals@tower_verify.main.1.0: field
    prod_spec_input_layer_eval@tower_verify.main.1.0: field
    round@tower_verify.main.1.0: u32
    rt_prime@tower_verify.main.1.0: field
    spec_index@tower_verify.main.1.2: u32
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Instructions:
    field load^0@tower_verify.main.4.1 = tower_proofs^prod_specs_eval@tower_verify.main.1.0[spec_index@tower_verify.main.1.2]
    field load^1@tower_verify.main.1.3 = load^0@tower_verify.main.4.1[round@tower_verify.main.1.0]
    field load^2@tower_verify.main.1.3 = load^1@tower_verify.main.1.3[i@tower_verify.main.1.7]
    field load^3@tower_verify.main.1.1 = coeffs@tower_verify.main.1.0[i@tower_verify.main.1.7]
    field evals@tower_verify.main.1.1 = evals@tower_verify.main.1.1 + load^2@tower_verify.main.1.3 * load^3@tower_verify.main.1.1
    i@tower_verify.main.1.7 = i@tower_verify.main.1.7 + 1 <U32>
Transition:
    i@tower_verify.main.1.7 != eval_len@tower_verify.main.1.0 ? -> 62 : -> 63

Block 63:
Func: main, Scope: 9
Exec Bound: 1, While Loop: false, Num VM Ops: 1
Inputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha@tower_verify.main.2.2: field
    alpha_pows@tower_verify.main.1.0: field
    coeffs@tower_verify.main.1.0: field
    eval_len@tower_verify.main.1.0: u32
    evals@tower_verify.main.1.1: field
    expected_max_round@tower_verify.main.1.0: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    logup_spec_p_input_layer_eval@tower_verify.main.1.0: field
    logup_spec_q_input_layer_eval@tower_verify.main.1.0: field
    num_fanin@tower_verify.main.1.0: u32
    prod_spec_evals@tower_verify.main.1.0: field
    prod_spec_input_layer_eval@tower_verify.main.1.0: field
    round@tower_verify.main.1.0: u32
    rt_prime@tower_verify.main.1.0: field
    spec_index@tower_verify.main.1.2: u32
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Outputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha_pows@tower_verify.main.1.0: field
    coeffs@tower_verify.main.1.0: field
    eval_len@tower_verify.main.1.0: u32
    expected_max_round@tower_verify.main.1.0: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    logup_spec_p_input_layer_eval@tower_verify.main.1.0: field
    logup_spec_q_input_layer_eval@tower_verify.main.1.0: field
    num_fanin@tower_verify.main.1.0: u32
    prod_spec_evals@tower_verify.main.1.0: field
    prod_spec_input_layer_eval@tower_verify.main.1.0: field
    round@tower_verify.main.1.0: u32
    rt_prime@tower_verify.main.1.0: field
    spec_index@tower_verify.main.1.2: u32
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Instructions:
    prod_spec_input_layer_eval@tower_verify.main.1.0[spec_index@tower_verify.main.1.2] = evals@tower_verify.main.1.1 <field>
    field prod_spec_evals@tower_verify.main.1.0 = prod_spec_evals@tower_verify.main.1.0 + alpha@tower_verify.main.2.2 * evals@tower_verify.main.1.1
Transition: -> 65

Block 64:
Func: main, Scope: 8
Exec Bound: 1, While Loop: false, Num VM Ops: 1
Inputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha_pows@tower_verify.main.1.0: field
    coeffs@tower_verify.main.1.0: field
    eval_len@tower_verify.main.1.0: u32
    expected_max_round@tower_verify.main.1.0: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    logup_spec_p_input_layer_eval@tower_verify.main.1.0: field
    logup_spec_q_input_layer_eval@tower_verify.main.1.0: field
    num_fanin@tower_verify.main.1.0: u32
    prod_spec_evals@tower_verify.main.1.0: field
    prod_spec_input_layer_eval@tower_verify.main.1.0: field
    round@tower_verify.main.1.0: u32
    rt_prime@tower_verify.main.1.0: field
    spec_index@tower_verify.main.1.2: u32
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Outputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha_pows@tower_verify.main.1.0: field
    coeffs@tower_verify.main.1.0: field
    eval_len@tower_verify.main.1.0: u32
    expected_max_round@tower_verify.main.1.0: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    logup_spec_p_input_layer_eval@tower_verify.main.1.0: field
    logup_spec_q_input_layer_eval@tower_verify.main.1.0: field
    num_fanin@tower_verify.main.1.0: u32
    prod_spec_evals@tower_verify.main.1.0: field
    prod_spec_input_layer_eval@tower_verify.main.1.0: field
    round@tower_verify.main.1.0: u32
    rt_prime@tower_verify.main.1.0: field
    spec_index@tower_verify.main.1.2: u32
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Instructions:
    prod_spec_input_layer_eval@tower_verify.main.1.0[spec_index@tower_verify.main.1.2] = 0 <Field> <field>
Transition: -> 65

Block 65:
Func: main, Scope: 7
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha_pows@tower_verify.main.1.0: field
    coeffs@tower_verify.main.1.0: field
    eval_len@tower_verify.main.1.0: u32
    expected_max_round@tower_verify.main.1.0: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    logup_spec_p_input_layer_eval@tower_verify.main.1.0: field
    logup_spec_q_input_layer_eval@tower_verify.main.1.0: field
    num_fanin@tower_verify.main.1.0: u32
    prod_spec_evals@tower_verify.main.1.0: field
    prod_spec_input_layer_eval@tower_verify.main.1.0: field
    round@tower_verify.main.1.0: u32
    rt_prime@tower_verify.main.1.0: field
    spec_index@tower_verify.main.1.2: u32
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Outputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha_pows@tower_verify.main.1.0: field
    coeffs@tower_verify.main.1.0: field
    eval_len@tower_verify.main.1.0: u32
    expected_max_round@tower_verify.main.1.0: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    logup_spec_p_input_layer_eval@tower_verify.main.1.0: field
    logup_spec_q_input_layer_eval@tower_verify.main.1.0: field
    num_fanin@tower_verify.main.1.0: u32
    prod_spec_evals@tower_verify.main.1.0: field
    prod_spec_input_layer_eval@tower_verify.main.1.0: field
    round@tower_verify.main.1.0: u32
    rt_prime@tower_verify.main.1.0: field
    spec_index@tower_verify.main.1.2: u32
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Instructions:
    spec_index@tower_verify.main.1.2 = spec_index@tower_verify.main.1.2 + 1 <U32>
Transition:
    spec_index@tower_verify.main.1.2 != tower_proofs^prod_spec_size@tower_verify.main.1.0 ? -> 60 : -> 66

Block 66:
Func: main, Scope: 5
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha_pows@tower_verify.main.1.0: field
    coeffs@tower_verify.main.1.0: field
    eval_len@tower_verify.main.1.0: u32
    expected_max_round@tower_verify.main.1.0: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    logup_spec_p_input_layer_eval@tower_verify.main.1.0: field
    logup_spec_q_input_layer_eval@tower_verify.main.1.0: field
    num_fanin@tower_verify.main.1.0: u32
    prod_spec_evals@tower_verify.main.1.0: field
    prod_spec_input_layer_eval@tower_verify.main.1.0: field
    round@tower_verify.main.1.0: u32
    rt_prime@tower_verify.main.1.0: field
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Outputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha_pows@tower_verify.main.1.0: field
    coeffs@tower_verify.main.1.0: field
    eval_len@tower_verify.main.1.0: u32
    expected_max_round@tower_verify.main.1.0: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    logup_spec_evals@tower_verify.main.1.0: field
    logup_spec_p_input_layer_eval@tower_verify.main.1.0: field
    logup_spec_q_input_layer_eval@tower_verify.main.1.0: field
    num_fanin@tower_verify.main.1.0: u32
    prod_spec_evals@tower_verify.main.1.0: field
    prod_spec_input_layer_eval@tower_verify.main.1.0: field
    round@tower_verify.main.1.0: u32
    rt_prime@tower_verify.main.1.0: field
    spec_index@tower_verify.main.1.3: u32
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Instructions:
    field logup_spec_evals@tower_verify.main.1.0 = 0 <Field>
    u32 spec_index@tower_verify.main.1.3 = 0 <U32>
Transition:
    spec_index@tower_verify.main.1.3 != tower_proofs^logup_spec_size@tower_verify.main.1.0 ? -> 67 : -> 68

Block 67:
Func: main, Scope: 6
Exec Bound: 1, While Loop: true, Num VM Ops: 21
Inputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha_pows@tower_verify.main.1.0: field
    coeffs@tower_verify.main.1.0: field
    eval_len@tower_verify.main.1.0: u32
    expected_max_round@tower_verify.main.1.0: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    logup_spec_evals@tower_verify.main.1.0: field
    logup_spec_p_input_layer_eval@tower_verify.main.1.0: field
    logup_spec_q_input_layer_eval@tower_verify.main.1.0: field
    num_fanin@tower_verify.main.1.0: u32
    prod_spec_evals@tower_verify.main.1.0: field
    prod_spec_input_layer_eval@tower_verify.main.1.0: field
    round@tower_verify.main.1.0: u32
    rt_prime@tower_verify.main.1.0: field
    spec_index@tower_verify.main.1.3: u32
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Outputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha_pows@tower_verify.main.1.0: field
    coeffs@tower_verify.main.1.0: field
    eval_len@tower_verify.main.1.0: u32
    expected_max_round@tower_verify.main.1.0: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    logup_spec_evals@tower_verify.main.1.0: field
    logup_spec_p_input_layer_eval@tower_verify.main.1.0: field
    logup_spec_q_input_layer_eval@tower_verify.main.1.0: field
    num_fanin@tower_verify.main.1.0: u32
    prod_spec_evals@tower_verify.main.1.0: field
    prod_spec_input_layer_eval@tower_verify.main.1.0: field
    round@tower_verify.main.1.0: u32
    rt_prime@tower_verify.main.1.0: field
    spec_index@tower_verify.main.1.3: u32
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Instructions:
    u32 load^0@tower_verify.main.2.4 = tower_proofs^layer_per_spec@tower_verify.main.1.0[spec_index@tower_verify.main.1.3]
    if load^0@tower_verify.main.2.4 < round@tower_verify.main.1.0:
        field load^0@tower_verify.main.3.4 = alpha_pows@tower_verify.main.1.0[initial_prod_evals_len@tower_verify.main.1.0 + 2 <U32> * spec_index@tower_verify.main.1.3]
        field alpha_numerator@tower_verify.main.1.2 = load^0@tower_verify.main.3.4
        field load^0@tower_verify.main.3.4 = alpha_pows@tower_verify.main.1.0[initial_prod_evals_len@tower_verify.main.1.0 + 2 <U32> * spec_index@tower_verify.main.1.3 + 1 <U32>]
        field alpha_denominator@tower_verify.main.1.2 = load^0@tower_verify.main.3.4
        field load^0@tower_verify.main.3.5 = tower_proofs^logup_specs_eval@tower_verify.main.1.0[spec_index@tower_verify.main.1.3]
        field load^1@tower_verify.main.1.4 = load^0@tower_verify.main.3.5[round@tower_verify.main.1.0]
        field load^2@tower_verify.main.1.4 = load^1@tower_verify.main.1.4[0 <Field>]
        field load^3@tower_verify.main.1.2 = coeffs@tower_verify.main.1.0[0 <Field>]
        field load^4@tower_verify.main.1.0 = tower_proofs^logup_specs_eval@tower_verify.main.1.0[spec_index@tower_verify.main.1.3]
        field load^5@tower_verify.main.1.0 = load^4@tower_verify.main.1.0[round@tower_verify.main.1.0]
        field load^6@tower_verify.main.1.0 = load^5@tower_verify.main.1.0[1 <Field>]
        field load^7@tower_verify.main.1.0 = coeffs@tower_verify.main.1.0[1 <Field>]
        field p_evals@tower_verify.main.1.0 = load^2@tower_verify.main.1.4 * load^3@tower_verify.main.1.2 + load^6@tower_verify.main.1.0 * load^7@tower_verify.main.1.0
        field load^0@tower_verify.main.3.5 = tower_proofs^logup_specs_eval@tower_verify.main.1.0[spec_index@tower_verify.main.1.3]
        field load^1@tower_verify.main.1.4 = load^0@tower_verify.main.3.5[round@tower_verify.main.1.0]
        field load^2@tower_verify.main.1.4 = load^1@tower_verify.main.1.4[2 <Field>]
        field load^3@tower_verify.main.1.2 = coeffs@tower_verify.main.1.0[0 <Field>]
        field load^4@tower_verify.main.1.0 = tower_proofs^logup_specs_eval@tower_verify.main.1.0[spec_index@tower_verify.main.1.3]
        field load^5@tower_verify.main.1.0 = load^4@tower_verify.main.1.0[round@tower_verify.main.1.0]
        field load^6@tower_verify.main.1.0 = load^5@tower_verify.main.1.0[3 <Field>]
        field load^7@tower_verify.main.1.0 = coeffs@tower_verify.main.1.0[1 <Field>]
        field q_evals@tower_verify.main.1.0 = load^2@tower_verify.main.1.4 * load^3@tower_verify.main.1.2 + load^6@tower_verify.main.1.0 * load^7@tower_verify.main.1.0
        logup_spec_p_input_layer_eval@tower_verify.main.1.0[spec_index@tower_verify.main.1.3] = p_evals@tower_verify.main.1.0 <field>
        logup_spec_q_input_layer_eval@tower_verify.main.1.0[spec_index@tower_verify.main.1.3] = q_evals@tower_verify.main.1.0 <field>
        field logup_spec_evals@tower_verify.main.1.0 = logup_spec_evals@tower_verify.main.1.0 + alpha_numerator@tower_verify.main.1.2 * p_evals@tower_verify.main.1.0 + alpha_denominator@tower_verify.main.1.2 * q_evals@tower_verify.main.1.0
    else:
        logup_spec_p_input_layer_eval@tower_verify.main.1.0[spec_index@tower_verify.main.1.3] = 0 <Field> <field>
        logup_spec_q_input_layer_eval@tower_verify.main.1.0[spec_index@tower_verify.main.1.3] = 0 <Field> <field>
        Dummy Load
        Dummy Load
        Dummy Load
        Dummy Load
        Dummy Load
        Dummy Load
        Dummy Load
        Dummy Load
        Dummy Load
        Dummy Load
        Dummy Load
        Dummy Load
        Dummy Load
        Dummy Load
        Dummy Load
        Dummy Load
        Dummy Load
        Dummy Load
    spec_index@tower_verify.main.1.3 = spec_index@tower_verify.main.1.3 + 1 <U32>
Transition:
    spec_index@tower_verify.main.1.3 != tower_proofs^logup_spec_size@tower_verify.main.1.0 ? -> 67 : -> 68

Block 68:
Func: main, Scope: 5
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha_pows@tower_verify.main.1.0: field
    eval_len@tower_verify.main.1.0: u32
    expected_max_round@tower_verify.main.1.0: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    logup_spec_evals@tower_verify.main.1.0: field
    logup_spec_p_input_layer_eval@tower_verify.main.1.0: field
    logup_spec_q_input_layer_eval@tower_verify.main.1.0: field
    num_fanin@tower_verify.main.1.0: u32
    prod_spec_evals@tower_verify.main.1.0: field
    prod_spec_input_layer_eval@tower_verify.main.1.0: field
    round@tower_verify.main.1.0: u32
    rt_prime@tower_verify.main.1.0: field
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Outputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha_pows@tower_verify.main.1.0: field
    eval_len@tower_verify.main.1.0: u32
    expected_max_round@tower_verify.main.1.0: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    logup_spec_p_input_layer_eval@tower_verify.main.1.0: field
    logup_spec_q_input_layer_eval@tower_verify.main.1.0: field
    next_rt^eval@tower_verify.main.1.0: field
    next_rt^point@tower_verify.main.1.0: field
    num_fanin@tower_verify.main.1.0: u32
    prod_spec_input_layer_eval@tower_verify.main.1.0: field
    round@tower_verify.main.1.0: u32
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Instructions:
    field next_eval@tower_verify.main.1.0 = prod_spec_evals@tower_verify.main.1.0 + logup_spec_evals@tower_verify.main.1.0
    field struct^0^point@tower_verify.main.2.0 = rt_prime@tower_verify.main.1.0
    field struct^0^eval@tower_verify.main.2.0 = next_eval@tower_verify.main.1.0
    field next_rt^eval@tower_verify.main.1.0 = struct^0^eval@tower_verify.main.2.0
    field next_rt^point@tower_verify.main.1.0 = struct^0^point@tower_verify.main.2.0
    u32 eval_len@tower_verify.main.1.0 = eval_len@tower_verify.main.1.0 * num_fanin@tower_verify.main.1.0
    round@tower_verify.main.1.0 = round@tower_verify.main.1.0 + 1 <U32>
Transition:
    round@tower_verify.main.1.0 != expected_max_round@tower_verify.main.1.0 - 1 <U32> ? -> 41 : -> 69

Block 69:
Func: main, Scope: 2
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
Outputs:
    %RET.main: u32
Instructions:
    u32 %RET.main = 1 <U32>
Program terminates.

Block 70:
Func: append_message_field, Scope: 0
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    i@verify_sumcheck@tower_verify.main.5.0: u32
    initial_logup_evals@tower_verify.main.1.0: field
    initial_logup_evals_len@tower_verify.main.1.0: u32
    initial_prod_evals@tower_verify.main.1.0: field
    initial_prod_evals_len@tower_verify.main.1.0: u32
    initial_rt@tower_verify.main.1.0: field
    j@verify_sumcheck@tower_verify.main.5.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    logup_spec_p_input_layer_eval@tower_verify.main.1.0: field
    logup_spec_q_input_layer_eval@tower_verify.main.1.0: field
    num_fanin@tower_verify.main.1.0: u32
    out_rt@tower_verify.main.1.0: field
    prod_spec_input_layer_eval@tower_verify.main.1.0: field
    proof^proofs@verify_sumcheck@tower_verify.main.5.0: field
    prover_msg^evaluations@verify_sumcheck@tower_verify.main.5.0: field
    r_merge@tower_verify.main.1.0: field
    round@tower_verify.main.1.0: u32
    rp@.append_message_field: field
    rt_len@tower_verify.main.1.0: u32
    rt_prime@tower_verify.main.1.0: field
    t^hash.append_message_field.0.0: field
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
    vs^challenges@verify_sumcheck@tower_verify.main.5.0: field
    vs^finished@verify_sumcheck@tower_verify.main.5.0: bool
    vs^max_degree@verify_sumcheck@tower_verify.main.5.0: u32
    vs^num_vars@verify_sumcheck@tower_verify.main.5.0: u32
    vs^polynomials_received@verify_sumcheck@tower_verify.main.5.0: field
    vs^round@verify_sumcheck@tower_verify.main.5.0: u32
Outputs:
    %AS: field
    %BP: field
    %RET^hash.append_message_field: field
    %SP: field
    %TS: field
    i@verify_sumcheck@tower_verify.main.5.0: u32
    initial_logup_evals@tower_verify.main.1.0: field
    initial_logup_evals_len@tower_verify.main.1.0: u32
    initial_prod_evals@tower_verify.main.1.0: field
    initial_prod_evals_len@tower_verify.main.1.0: u32
    initial_rt@tower_verify.main.1.0: field
    j@verify_sumcheck@tower_verify.main.5.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    logup_spec_p_input_layer_eval@tower_verify.main.1.0: field
    logup_spec_q_input_layer_eval@tower_verify.main.1.0: field
    num_fanin@tower_verify.main.1.0: u32
    out_rt@tower_verify.main.1.0: field
    prod_spec_input_layer_eval@tower_verify.main.1.0: field
    proof^proofs@verify_sumcheck@tower_verify.main.5.0: field
    prover_msg^evaluations@verify_sumcheck@tower_verify.main.5.0: field
    r_merge@tower_verify.main.1.0: field
    round@tower_verify.main.1.0: u32
    rt_len@tower_verify.main.1.0: u32
    rt_prime@tower_verify.main.1.0: field
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
    vs^challenges@verify_sumcheck@tower_verify.main.5.0: field
    vs^finished@verify_sumcheck@tower_verify.main.5.0: bool
    vs^max_degree@verify_sumcheck@tower_verify.main.5.0: u32
    vs^num_vars@verify_sumcheck@tower_verify.main.5.0: u32
    vs^polynomials_received@verify_sumcheck@tower_verify.main.5.0: field
    vs^round@verify_sumcheck@tower_verify.main.5.0: u32
Instructions:
    field %RET^hash.append_message_field = t^hash.append_message_field.0.0
Transition: -> rp@.append_message_field

Block 71:
Func: append_message_u32, Scope: 0
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %AS: field
    %BP: field
    %SP: field
    %TS: field
    alpha_pows@tower_verify.main.1.0: field
    aux_info^max_degree@verify_sumcheck@tower_verify.main.5.0: u32
    aux_info^num_variables@verify_sumcheck@tower_verify.main.5.0: u32
    claimed_sum@verify_sumcheck@tower_verify.main.5.0: field
    eval_len@tower_verify.main.1.0: u32
    expected_max_round@tower_verify.main.1.0: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    logup_spec_p_input_layer_eval@tower_verify.main.1.0: field
    logup_spec_q_input_layer_eval@tower_verify.main.1.0: field
    num_fanin@tower_verify.main.1.0: u32
    out_rt@tower_verify.main.1.0: field
    prod_spec_input_layer_eval@tower_verify.main.1.0: field
    proof^proofs@verify_sumcheck@tower_verify.main.5.0: field
    round@tower_verify.main.1.0: u32
    rp@.append_message_u32: field
    rt_len@tower_verify.main.1.0: u32
    t^hash.append_message_u32.0.0: field
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Outputs:
    %AS: field
    %BP: field
    %RET^hash.append_message_u32: field
    %SP: field
    %TS: field
    alpha_pows@tower_verify.main.1.0: field
    aux_info^max_degree@verify_sumcheck@tower_verify.main.5.0: u32
    aux_info^num_variables@verify_sumcheck@tower_verify.main.5.0: u32
    claimed_sum@verify_sumcheck@tower_verify.main.5.0: field
    eval_len@tower_verify.main.1.0: u32
    expected_max_round@tower_verify.main.1.0: u32
    initial_prod_evals_len@tower_verify.main.1.0: u32
    log2_num_fanin@tower_verify.main.1.0: u32
    logup_spec_p_input_layer_eval@tower_verify.main.1.0: field
    logup_spec_q_input_layer_eval@tower_verify.main.1.0: field
    num_fanin@tower_verify.main.1.0: u32
    out_rt@tower_verify.main.1.0: field
    prod_spec_input_layer_eval@tower_verify.main.1.0: field
    proof^proofs@verify_sumcheck@tower_verify.main.5.0: field
    round@tower_verify.main.1.0: u32
    rt_len@tower_verify.main.1.0: u32
    t^hash@tower_verify.main.1.0: field
    tower_proofs^layer_per_spec@tower_verify.main.1.0: field
    tower_proofs^logup_spec_size@tower_verify.main.1.0: u32
    tower_proofs^logup_specs_eval@tower_verify.main.1.0: field
    tower_proofs^prod_spec_size@tower_verify.main.1.0: u32
    tower_proofs^prod_specs_eval@tower_verify.main.1.0: field
    tower_proofs^proofs@tower_verify.main.1.0: field
Instructions:
    field %RET^hash.append_message_u32 = t^hash.append_message_u32.0.0
Transition: -> rp@.append_message_u32


--
Post-Processing:


--
Var -> Reg:
Var -> IO map:
i = 0: {"%AS": 4, "%BN": 1, "%BP": 6, "%RET": 2, "%SP": 5, "%TS": 3, "_": 0}
i = 1: {"%AS": 4, "%BN": 1, "%BP": 6, "%RET": 2, "%SP": 5, "%TS": 3, "_": 0, "i@verify_sumcheck@tower_verify.main.5.0": 21, "initial_logup_evals@tower_verify.main.1.0": 7, "initial_logup_evals_len@tower_verify.main.1.0": 8, "initial_prod_evals@tower_verify.main.1.0": 9, "initial_prod_evals_len@tower_verify.main.1.0": 10, "initial_rt@tower_verify.main.1.0": 22, "j@verify_sumcheck@tower_verify.main.5.0": 23, "log2_num_fanin@tower_verify.main.1.0": 11, "logup_spec_p_input_layer_eval@tower_verify.main.1.0": 24, "logup_spec_q_input_layer_eval@tower_verify.main.1.0": 25, "num_fanin@tower_verify.main.1.0": 12, "out_rt@tower_verify.main.1.0": 26, "prod_spec_input_layer_eval@tower_verify.main.1.0": 27, "proof^proofs@verify_sumcheck@tower_verify.main.5.0": 28, "prover_msg^evaluations@verify_sumcheck@tower_verify.main.5.0": 29, "r_merge@tower_verify.main.1.0": 30, "round@tower_verify.main.1.0": 31, "rp@.append_message_field": 13, "rt_len@tower_verify.main.1.0": 32, "rt_prime@tower_verify.main.1.0": 33, "t^hash.append_message_field.0.0": 14, "t^hash@tower_verify.main.1.0": 34, "tower_proofs^layer_per_spec@tower_verify.main.1.0": 15, "tower_proofs^logup_spec_size@tower_verify.main.1.0": 16, "tower_proofs^logup_specs_eval@tower_verify.main.1.0": 17, "tower_proofs^prod_spec_size@tower_verify.main.1.0": 18, "tower_proofs^prod_specs_eval@tower_verify.main.1.0": 19, "tower_proofs^proofs@tower_verify.main.1.0": 20, "vs^challenges@verify_sumcheck@tower_verify.main.5.0": 35, "vs^finished@verify_sumcheck@tower_verify.main.5.0": 36, "vs^max_degree@verify_sumcheck@tower_verify.main.5.0": 37, "vs^num_vars@verify_sumcheck@tower_verify.main.5.0": 38, "vs^polynomials_received@verify_sumcheck@tower_verify.main.5.0": 39, "vs^round@verify_sumcheck@tower_verify.main.5.0": 40}
i = 2: {"%AS": 4, "%BN": 1, "%BP": 6, "%RET": 2, "%SP": 5, "%TS": 3, "_": 0, "alpha_pows@tower_verify.main.1.0": 7, "eval_len@tower_verify.main.1.0": 8, "evals@build_eq_x_r_vec_sequential@tower_verify.main.5.0": 9, "expected_max_round@tower_verify.main.1.0": 10, "i@build_eq_x_r_vec_sequential@tower_verify.main.5.0": 11, "initial_prod_evals_len@tower_verify.main.1.0": 12, "j@build_eq_x_r_vec_sequential@tower_verify.main.5.0": 13, "log2_num_fanin@tower_verify.main.1.0": 14, "logup_spec_p_input_layer_eval@tower_verify.main.1.0": 15, "logup_spec_q_input_layer_eval@tower_verify.main.1.0": 16, "next_size@build_eq_x_r_vec_sequential@tower_verify.main.5.0": 17, "num_fanin@tower_verify.main.1.0": 18, "prod_spec_input_layer_eval@tower_verify.main.1.0": 19, "r@build_eq_x_r_vec_sequential@tower_verify.main.5.0": 20, "r_i@build_eq_x_r_vec_sequential@tower_verify.main.5.0": 21, "r_len@build_eq_x_r_vec_sequential@tower_verify.main.5.0": 22, "round@tower_verify.main.1.0": 23, "rt_prime@tower_verify.main.1.0": 24, "t^hash@tower_verify.main.1.0": 25, "tower_proofs^layer_per_spec@tower_verify.main.1.0": 26, "tower_proofs^logup_spec_size@tower_verify.main.1.0": 27, "tower_proofs^logup_specs_eval@tower_verify.main.1.0": 28, "tower_proofs^prod_spec_size@tower_verify.main.1.0": 29, "tower_proofs^prod_specs_eval@tower_verify.main.1.0": 30, "tower_proofs^proofs@tower_verify.main.1.0": 31}
i = 3: {"%AS": 4, "%BN": 1, "%BP": 6, "%RET": 2, "%SP": 5, "%TS": 3, "_": 0, "alpha_pows@tower_verify.main.1.0": 7, "eval_len@tower_verify.main.1.0": 8, "evals@build_eq_x_r_vec_sequential@tower_verify.main.5.0": 9, "expected_max_round@tower_verify.main.1.0": 10, "i@build_eq_x_r_vec_sequential@tower_verify.main.5.0": 11, "initial_prod_evals_len@tower_verify.main.1.0": 12, "log2_num_fanin@tower_verify.main.1.0": 13, "logup_spec_p_input_layer_eval@tower_verify.main.1.0": 14, "logup_spec_q_input_layer_eval@tower_verify.main.1.0": 15, "next_size@build_eq_x_r_vec_sequential@tower_verify.main.5.0": 16, "num_fanin@tower_verify.main.1.0": 17, "prod_spec_input_layer_eval@tower_verify.main.1.0": 18, "r@build_eq_x_r_vec_sequential@tower_verify.main.5.0": 19, "r_len@build_eq_x_r_vec_sequential@tower_verify.main.5.0": 20, "round@tower_verify.main.1.0": 21, "rt_prime@tower_verify.main.1.0": 22, "t^hash@tower_verify.main.1.0": 23, "tower_proofs^layer_per_spec@tower_verify.main.1.0": 24, "tower_proofs^logup_spec_size@tower_verify.main.1.0": 25, "tower_proofs^logup_specs_eval@tower_verify.main.1.0": 26, "tower_proofs^prod_spec_size@tower_verify.main.1.0": 27, "tower_proofs^prod_specs_eval@tower_verify.main.1.0": 28, "tower_proofs^proofs@tower_verify.main.1.0": 29}
i = 4: {"%AS": 4, "%BN": 1, "%BP": 6, "%RET": 2, "%SP": 5, "%TS": 3, "_": 0, "alpha_pows@tower_verify.main.1.0": 7, "coeffs@tower_verify.main.1.0": 8, "eval_len@tower_verify.main.1.0": 9, "expected_max_round@tower_verify.main.1.0": 10, "initial_prod_evals_len@tower_verify.main.1.0": 11, "log2_num_fanin@tower_verify.main.1.0": 12, "logup_spec_p_input_layer_eval@tower_verify.main.1.0": 13, "logup_spec_q_input_layer_eval@tower_verify.main.1.0": 14, "num_fanin@tower_verify.main.1.0": 15, "prod_spec_evals@tower_verify.main.1.0": 16, "prod_spec_input_layer_eval@tower_verify.main.1.0": 17, "round@tower_verify.main.1.0": 18, "rt_prime@tower_verify.main.1.0": 19, "spec_index@tower_verify.main.1.2": 20, "t^hash@tower_verify.main.1.0": 21, "tower_proofs^layer_per_spec@tower_verify.main.1.0": 22, "tower_proofs^logup_spec_size@tower_verify.main.1.0": 23, "tower_proofs^logup_specs_eval@tower_verify.main.1.0": 24, "tower_proofs^prod_spec_size@tower_verify.main.1.0": 25, "tower_proofs^prod_specs_eval@tower_verify.main.1.0": 26, "tower_proofs^proofs@tower_verify.main.1.0": 27}
i = 5: {"%AS": 4, "%BN": 1, "%BP": 6, "%RET": 2, "%SP": 5, "%TS": 3, "_": 0, "eval_len@tower_verify.main.1.0": 7, "expected_evaluation@tower_verify.main.1.0": 8, "expected_max_round@tower_verify.main.1.0": 9, "i.eq_eval.0.0": 10, "initial_prod_evals_len@tower_verify.main.1.0": 11, "len.eq_eval.0.0": 12, "log2_num_fanin@tower_verify.main.1.0": 13, "logup_spec_p_input_layer_eval@tower_verify.main.1.0": 14, "logup_spec_q_input_layer_eval@tower_verify.main.1.0": 15, "num_fanin@tower_verify.main.1.0": 16, "out_rt@tower_verify.main.1.0": 17, "p1@tower_verify.main.1.0": 18, "p2@tower_verify.main.1.0": 19, "prod@tower_verify.main.1.0": 20, "prod_spec_input_layer_eval@tower_verify.main.1.0": 21, "q1@tower_verify.main.1.0": 22, "q2@tower_verify.main.1.0": 23, "res.eq_eval.0.0": 24, "round@tower_verify.main.1.0": 25, "rp@.eq_eval": 26, "rt@tower_verify.main.1.0": 27, "rt_len@tower_verify.main.1.0": 28, "spec_index@tower_verify.main.1.0": 29, "spec_index@tower_verify.main.1.1": 30, "sumcheck_claim^expected_evaluation@tower_verify.main.1.0": 31, "t^hash@tower_verify.main.1.0": 32, "tower_proofs^layer_per_spec@tower_verify.main.1.0": 33, "tower_proofs^logup_spec_size@tower_verify.main.1.0": 34, "tower_proofs^logup_specs_eval@tower_verify.main.1.0": 35, "tower_proofs^prod_spec_size@tower_verify.main.1.0": 36, "tower_proofs^prod_specs_eval@tower_verify.main.1.0": 37, "tower_proofs^proofs@tower_verify.main.1.0": 38, "x.eq_eval.0.0": 39, "y.eq_eval.0.0": 40}
i = 6: {"%AS": 4, "%BN": 1, "%BP": 6, "%RET": 2, "%RET.eq_eval": 7, "%SP": 5, "%TS": 3, "_": 0, "eval_len@tower_verify.main.1.0": 8, "expected_evaluation@tower_verify.main.1.0": 9, "expected_max_round@tower_verify.main.1.0": 10, "initial_prod_evals_len@tower_verify.main.1.0": 11, "log2_num_fanin@tower_verify.main.1.0": 12, "logup_spec_p_input_layer_eval@tower_verify.main.1.0": 13, "logup_spec_q_input_layer_eval@tower_verify.main.1.0": 14, "num_fanin@tower_verify.main.1.0": 15, "out_rt@tower_verify.main.1.0": 16, "p1@tower_verify.main.1.0": 17, "p2@tower_verify.main.1.0": 18, "prod@tower_verify.main.1.0": 19, "prod_spec_input_layer_eval@tower_verify.main.1.0": 20, "q1@tower_verify.main.1.0": 21, "q2@tower_verify.main.1.0": 22, "round@tower_verify.main.1.0": 23, "rt@tower_verify.main.1.0": 24, "rt_len@tower_verify.main.1.0": 25, "spec_index@tower_verify.main.1.0": 26, "spec_index@tower_verify.main.1.1": 27, "sumcheck_claim^expected_evaluation@tower_verify.main.1.0": 28, "t^hash@tower_verify.main.1.0": 29, "tower_proofs^layer_per_spec@tower_verify.main.1.0": 30, "tower_proofs^logup_spec_size@tower_verify.main.1.0": 31, "tower_proofs^logup_specs_eval@tower_verify.main.1.0": 32, "tower_proofs^prod_spec_size@tower_verify.main.1.0": 33, "tower_proofs^prod_specs_eval@tower_verify.main.1.0": 34, "tower_proofs^proofs@tower_verify.main.1.0": 35}
i = 7: {"%AS": 4, "%BN": 1, "%BP": 6, "%RET": 2, "%SP": 5, "%TS": 3, "_": 0, "alpha@tower_verify.main.2.0": 7, "alpha_denominator@tower_verify.main.1.0": 8, "alpha_numerator@tower_verify.main.1.0": 9, "alpha_pows@tower_verify.main.1.0": 10, "expected_max_round@tower_verify.main.1.0": 11, "i.mle_eval.0.0": 12, "i@tower_verify.main.1.2": 13, "i@tower_verify.main.1.3": 14, "initial_claim@tower_verify.main.1.0": 15, "initial_logup_evals@tower_verify.main.1.0": 16, "initial_logup_evals_len@tower_verify.main.1.0": 17, "initial_prod_evals@tower_verify.main.1.0": 18, "initial_prod_evals_len@tower_verify.main.1.0": 19, "initial_rt@tower_verify.main.1.0": 20, "log2_num_fanin@tower_verify.main.1.0": 21, "mle_denominator@tower_verify.main.1.0": 22, "mle_len.mle_eval.0.0": 23, "num_fanin@tower_verify.main.1.0": 24, "point.mle_eval.0.0": 25, "point_len.mle_eval.0.0": 26, "rp@.mle_eval": 27, "self.mle_eval.0.0": 28, "t^hash@tower_verify.main.1.0": 29, "tower_proofs^layer_per_spec@tower_verify.main.1.0": 30, "tower_proofs^logup_spec_size@tower_verify.main.1.0": 31, "tower_proofs^logup_specs_eval@tower_verify.main.1.0": 32, "tower_proofs^prod_spec_size@tower_verify.main.1.0": 33, "tower_proofs^prod_specs_eval@tower_verify.main.1.0": 34, "tower_proofs^proofs@tower_verify.main.1.0": 35}
i = 8: {"%AS": 4, "%BN": 1, "%BP": 6, "%RET": 2, "%SP": 5, "%TS": 3, "_": 0, "alpha@tower_verify.main.2.0": 7, "alpha_denominator@tower_verify.main.1.0": 8, "alpha_numerator@tower_verify.main.1.0": 9, "alpha_pows@tower_verify.main.1.0": 10, "expected_max_round@tower_verify.main.1.0": 11, "i.mle_eval.0.0": 12, "i@tower_verify.main.1.2": 13, "i@tower_verify.main.1.3": 14, "initial_claim@tower_verify.main.1.0": 15, "initial_logup_evals@tower_verify.main.1.0": 16, "initial_logup_evals_len@tower_verify.main.1.0": 17, "initial_prod_evals@tower_verify.main.1.0": 18, "initial_prod_evals_len@tower_verify.main.1.0": 19, "initial_rt@tower_verify.main.1.0": 20, "j.mle_eval.0.0": 21, "log2_num_fanin@tower_verify.main.1.0": 22, "mle_denominator@tower_verify.main.1.0": 23, "mle_len.mle_eval.0.0": 24, "num_fanin@tower_verify.main.1.0": 25, "point.mle_eval.0.0": 26, "point_len.mle_eval.0.0": 27, "rp@.mle_eval": 28, "self.mle_eval.0.0": 29, "t^hash@tower_verify.main.1.0": 30, "tower_proofs^layer_per_spec@tower_verify.main.1.0": 31, "tower_proofs^logup_spec_size@tower_verify.main.1.0": 32, "tower_proofs^logup_specs_eval@tower_verify.main.1.0": 33, "tower_proofs^prod_spec_size@tower_verify.main.1.0": 34, "tower_proofs^prod_specs_eval@tower_verify.main.1.0": 35, "tower_proofs^proofs@tower_verify.main.1.0": 36}
i = 9: {"%AS": 4, "%BN": 1, "%BP": 6, "%RET": 2, "%RET.mle_eval": 7, "%SP": 5, "%TS": 3, "_": 0, "alpha@tower_verify.main.2.0": 8, "alpha_denominator@tower_verify.main.1.0": 9, "alpha_numerator@tower_verify.main.1.0": 10, "alpha_pows@tower_verify.main.1.0": 11, "expected_max_round@tower_verify.main.1.0": 12, "i@tower_verify.main.1.2": 13, "i@tower_verify.main.1.3": 14, "initial_claim@tower_verify.main.1.0": 15, "initial_logup_evals@tower_verify.main.1.0": 16, "initial_logup_evals_len@tower_verify.main.1.0": 17, "initial_prod_evals@tower_verify.main.1.0": 18, "initial_prod_evals_len@tower_verify.main.1.0": 19, "initial_rt@tower_verify.main.1.0": 20, "log2_num_fanin@tower_verify.main.1.0": 21, "mle_denominator@tower_verify.main.1.0": 22, "num_fanin@tower_verify.main.1.0": 23, "t^hash@tower_verify.main.1.0": 24, "tower_proofs^layer_per_spec@tower_verify.main.1.0": 25, "tower_proofs^logup_spec_size@tower_verify.main.1.0": 26, "tower_proofs^logup_specs_eval@tower_verify.main.1.0": 27, "tower_proofs^prod_spec_size@tower_verify.main.1.0": 28, "tower_proofs^prod_specs_eval@tower_verify.main.1.0": 29, "tower_proofs^proofs@tower_verify.main.1.0": 30}
i = 10: {"%AS": 4, "%BN": 1, "%BP": 6, "%RET": 2, "%SP": 5, "%TS": 3, "_": 0, "alpha_pows@tower_verify.main.1.0": 7, "denom_up@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0": 8, "e@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0": 9, "eval_at@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0": 10, "eval_len@tower_verify.main.1.0": 11, "evals@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0": 12, "evaluations@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0": 13, "expected_max_round@tower_verify.main.1.0": 14, "expected_vec@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0": 15, "i@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0": 16, "initial_prod_evals_len@tower_verify.main.1.0": 17, "len@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0": 18, "log2_num_fanin@tower_verify.main.1.0": 19, "logup_spec_p_input_layer_eval@tower_verify.main.1.0": 20, "logup_spec_q_input_layer_eval@tower_verify.main.1.0": 21, "num_fanin@tower_verify.main.1.0": 22, "out_rt@tower_verify.main.1.0": 23, "p_i@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0": 24, "prod@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0": 25, "prod_spec_input_layer_eval@tower_verify.main.1.0": 26, "res@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0": 27, "round@tower_verify.main.1.0": 28, "rt_len@tower_verify.main.1.0": 29, "self^challenges@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0": 30, "self^max_degree@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0": 31, "self^num_vars@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0": 32, "self^polynomials_received@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0": 33, "t^hash@tower_verify.main.1.0": 34, "tower_proofs^layer_per_spec@tower_verify.main.1.0": 35, "tower_proofs^logup_spec_size@tower_verify.main.1.0": 36, "tower_proofs^logup_specs_eval@tower_verify.main.1.0": 37, "tower_proofs^prod_spec_size@tower_verify.main.1.0": 38, "tower_proofs^prod_specs_eval@tower_verify.main.1.0": 39, "tower_proofs^proofs@tower_verify.main.1.0": 40}
i = 11: {"%AS": 4, "%BN": 1, "%BP": 6, "%RET": 2, "%RET^expected_evaluation.main": 7, "%RET^point.main": 8, "%SP": 5, "%TS": 3, "_": 0, "alpha_pows@tower_verify.main.1.0": 9, "eval_len@tower_verify.main.1.0": 10, "expected_max_round@tower_verify.main.1.0": 11, "initial_prod_evals_len@tower_verify.main.1.0": 12, "log2_num_fanin@tower_verify.main.1.0": 13, "logup_spec_p_input_layer_eval@tower_verify.main.1.0": 14, "logup_spec_q_input_layer_eval@tower_verify.main.1.0": 15, "num_fanin@tower_verify.main.1.0": 16, "out_rt@tower_verify.main.1.0": 17, "prod_spec_input_layer_eval@tower_verify.main.1.0": 18, "round@tower_verify.main.1.0": 19, "rt_len@tower_verify.main.1.0": 20, "t^hash@tower_verify.main.1.0": 21, "tower_proofs^layer_per_spec@tower_verify.main.1.0": 22, "tower_proofs^logup_spec_size@tower_verify.main.1.0": 23, "tower_proofs^logup_specs_eval@tower_verify.main.1.0": 24, "tower_proofs^prod_spec_size@tower_verify.main.1.0": 25, "tower_proofs^prod_specs_eval@tower_verify.main.1.0": 26, "tower_proofs^proofs@tower_verify.main.1.0": 27}
i = 12: {"%AS": 4, "%BN": 1, "%BP": 6, "%RET": 2, "%SP": 5, "%TS": 3, "_": 0, "alpha_pows@tower_verify.main.1.0": 7, "denom_down@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0": 8, "denom_up@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0": 9, "eval_len@tower_verify.main.1.0": 10, "evals@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0": 11, "evaluations@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0": 12, "expected_max_round@tower_verify.main.1.0": 13, "expected_vec@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0": 14, "i@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0": 15, "initial_prod_evals_len@tower_verify.main.1.0": 16, "it@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0": 17, "len@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0": 18, "log2_num_fanin@tower_verify.main.1.0": 19, "logup_spec_p_input_layer_eval@tower_verify.main.1.0": 20, "logup_spec_q_input_layer_eval@tower_verify.main.1.0": 21, "num_fanin@tower_verify.main.1.0": 22, "out_rt@tower_verify.main.1.0": 23, "p_i@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0": 24, "prod@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0": 25, "prod_spec_input_layer_eval@tower_verify.main.1.0": 26, "res@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0": 27, "round@tower_verify.main.1.0": 28, "rt_len@tower_verify.main.1.0": 29, "self^challenges@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0": 30, "self^max_degree@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0": 31, "self^num_vars@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0": 32, "self^polynomials_received@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0": 33, "t^hash@tower_verify.main.1.0": 34, "tower_proofs^layer_per_spec@tower_verify.main.1.0": 35, "tower_proofs^logup_spec_size@tower_verify.main.1.0": 36, "tower_proofs^logup_specs_eval@tower_verify.main.1.0": 37, "tower_proofs^prod_spec_size@tower_verify.main.1.0": 38, "tower_proofs^prod_specs_eval@tower_verify.main.1.0": 39, "tower_proofs^proofs@tower_verify.main.1.0": 40}
i = 13: {"%AS": 4, "%BN": 1, "%BP": 6, "%RET": 2, "%SP": 5, "%TS": 3, "_": 0, "alpha_pows@tower_verify.main.1.0": 7, "eval_len@tower_verify.main.1.0": 8, "expected_max_round@tower_verify.main.1.0": 9, "expected_vec@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0": 10, "i@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0": 11, "initial_prod_evals_len@tower_verify.main.1.0": 12, "log2_num_fanin@tower_verify.main.1.0": 13, "logup_spec_p_input_layer_eval@tower_verify.main.1.0": 14, "logup_spec_q_input_layer_eval@tower_verify.main.1.0": 15, "num_fanin@tower_verify.main.1.0": 16, "out_rt@tower_verify.main.1.0": 17, "prod_spec_input_layer_eval@tower_verify.main.1.0": 18, "round@tower_verify.main.1.0": 19, "rt_len@tower_verify.main.1.0": 20, "self^challenges@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0": 21, "self^max_degree@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0": 22, "self^num_vars@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0": 23, "self^polynomials_received@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0": 24, "t^hash@tower_verify.main.1.0": 25, "tower_proofs^layer_per_spec@tower_verify.main.1.0": 26, "tower_proofs^logup_spec_size@tower_verify.main.1.0": 27, "tower_proofs^logup_specs_eval@tower_verify.main.1.0": 28, "tower_proofs^prod_spec_size@tower_verify.main.1.0": 29, "tower_proofs^prod_specs_eval@tower_verify.main.1.0": 30, "tower_proofs^proofs@tower_verify.main.1.0": 31}
i = 14: {"%AS": 4, "%BN": 1, "%BP": 6, "%RET": 2, "%SP": 5, "%TS": 3, "_": 0, "alpha_pows@tower_verify.main.1.0": 7, "aux_info^max_degree@verify_sumcheck@tower_verify.main.5.0": 8, "aux_info^num_variables@verify_sumcheck@tower_verify.main.5.0": 9, "claimed_sum@verify_sumcheck@tower_verify.main.5.0": 10, "eval_len@tower_verify.main.1.0": 11, "expected_max_round@tower_verify.main.1.0": 12, "initial_prod_evals_len@tower_verify.main.1.0": 13, "log2_num_fanin@tower_verify.main.1.0": 14, "logup_spec_p_input_layer_eval@tower_verify.main.1.0": 15, "logup_spec_q_input_layer_eval@tower_verify.main.1.0": 16, "num_fanin@tower_verify.main.1.0": 17, "out_rt@tower_verify.main.1.0": 18, "prod_spec_input_layer_eval@tower_verify.main.1.0": 19, "proof^proofs@verify_sumcheck@tower_verify.main.5.0": 20, "round@tower_verify.main.1.0": 21, "rp@.append_message_u32": 22, "rt_len@tower_verify.main.1.0": 23, "t^hash.append_message_u32.0.0": 24, "t^hash@tower_verify.main.1.0": 25, "tower_proofs^layer_per_spec@tower_verify.main.1.0": 26, "tower_proofs^logup_spec_size@tower_verify.main.1.0": 27, "tower_proofs^logup_specs_eval@tower_verify.main.1.0": 28, "tower_proofs^prod_spec_size@tower_verify.main.1.0": 29, "tower_proofs^prod_specs_eval@tower_verify.main.1.0": 30, "tower_proofs^proofs@tower_verify.main.1.0": 31}
i = 15: {"%AS": 4, "%BN": 1, "%BP": 6, "%RET": 2, "%SP": 5, "%TS": 3, "_": 0, "alpha_pows@tower_verify.main.1.0": 7, "aux_info^max_degree@verify_sumcheck@tower_verify.main.5.0": 8, "aux_info^num_variables@verify_sumcheck@tower_verify.main.5.0": 9, "claimed_sum@verify_sumcheck@tower_verify.main.5.0": 10, "eval_len@tower_verify.main.1.0": 11, "expected_max_round@tower_verify.main.1.0": 12, "i@verify_sumcheck@tower_verify.main.5.0": 13, "initial_prod_evals_len@tower_verify.main.1.0": 14, "log2_num_fanin@tower_verify.main.1.0": 15, "logup_spec_p_input_layer_eval@tower_verify.main.1.0": 16, "logup_spec_q_input_layer_eval@tower_verify.main.1.0": 17, "num_fanin@tower_verify.main.1.0": 18, "out_rt@tower_verify.main.1.0": 19, "prod_spec_input_layer_eval@tower_verify.main.1.0": 20, "proof^proofs@verify_sumcheck@tower_verify.main.5.0": 21, "round@tower_verify.main.1.0": 22, "rt_len@tower_verify.main.1.0": 23, "t^hash@tower_verify.main.1.0": 24, "t^hash@verify_sumcheck@tower_verify.main.5.0": 25, "tower_proofs^layer_per_spec@tower_verify.main.1.0": 26, "tower_proofs^logup_spec_size@tower_verify.main.1.0": 27, "tower_proofs^logup_specs_eval@tower_verify.main.1.0": 28, "tower_proofs^prod_spec_size@tower_verify.main.1.0": 29, "tower_proofs^prod_specs_eval@tower_verify.main.1.0": 30, "tower_proofs^proofs@tower_verify.main.1.0": 31, "vs^challenges@verify_sumcheck@tower_verify.main.5.0": 32, "vs^finished@verify_sumcheck@tower_verify.main.5.0": 33, "vs^max_degree@verify_sumcheck@tower_verify.main.5.0": 34, "vs^num_vars@verify_sumcheck@tower_verify.main.5.0": 35, "vs^polynomials_received@verify_sumcheck@tower_verify.main.5.0": 36, "vs^round@verify_sumcheck@tower_verify.main.5.0": 37}
i = 16: {"%AS": 4, "%BN": 1, "%BP": 6, "%RET": 2, "%SP": 5, "%TS": 3, "_": 0, "alpha_pows@tower_verify.main.1.0": 7, "aux_info^max_degree@verify_sumcheck@tower_verify.main.5.0": 8, "aux_info^num_variables@verify_sumcheck@tower_verify.main.5.0": 9, "claimed_sum@verify_sumcheck@tower_verify.main.5.0": 10, "eval_len@tower_verify.main.1.0": 11, "expected_max_round@tower_verify.main.1.0": 12, "i@verify_sumcheck@tower_verify.main.5.0": 13, "initial_prod_evals_len@tower_verify.main.1.0": 14, "j@verify_sumcheck@tower_verify.main.5.0": 15, "log2_num_fanin@tower_verify.main.1.0": 16, "logup_spec_p_input_layer_eval@tower_verify.main.1.0": 17, "logup_spec_q_input_layer_eval@tower_verify.main.1.0": 18, "num_fanin@tower_verify.main.1.0": 19, "out_rt@tower_verify.main.1.0": 20, "prod_spec_input_layer_eval@tower_verify.main.1.0": 21, "proof^proofs@verify_sumcheck@tower_verify.main.5.0": 22, "prover_msg^evaluations@verify_sumcheck@tower_verify.main.5.0": 23, "round@tower_verify.main.1.0": 24, "rt_len@tower_verify.main.1.0": 25, "t^hash@tower_verify.main.1.0": 26, "t^hash@verify_sumcheck@tower_verify.main.5.0": 27, "tower_proofs^layer_per_spec@tower_verify.main.1.0": 28, "tower_proofs^logup_spec_size@tower_verify.main.1.0": 29, "tower_proofs^logup_specs_eval@tower_verify.main.1.0": 30, "tower_proofs^prod_spec_size@tower_verify.main.1.0": 31, "tower_proofs^prod_specs_eval@tower_verify.main.1.0": 32, "tower_proofs^proofs@tower_verify.main.1.0": 33, "vs^challenges@verify_sumcheck@tower_verify.main.5.0": 34, "vs^finished@verify_sumcheck@tower_verify.main.5.0": 35, "vs^max_degree@verify_sumcheck@tower_verify.main.5.0": 36, "vs^num_vars@verify_sumcheck@tower_verify.main.5.0": 37, "vs^polynomials_received@verify_sumcheck@tower_verify.main.5.0": 38, "vs^round@verify_sumcheck@tower_verify.main.5.0": 39}
i = 17: {"%AS": 4, "%BN": 1, "%BP": 6, "%RET": 2, "%SP": 5, "%TS": 3, "_": 0, "alpha@tower_verify.main.1.0": 7, "alpha_pows@tower_verify.main.1.0": 8, "expected_max_round@tower_verify.main.1.0": 9, "i@tower_verify.main.1.0": 10, "initial_logup_evals@tower_verify.main.1.0": 11, "initial_logup_evals_len@tower_verify.main.1.0": 12, "initial_prod_evals@tower_verify.main.1.0": 13, "initial_prod_evals_len@tower_verify.main.1.0": 14, "log2_num_fanin@tower_verify.main.1.0": 15, "num_fanin@tower_verify.main.1.0": 16, "state@tower_verify.main.1.0": 17, "t^hash@tower_verify.main.1.0": 18, "tower_proofs^layer_per_spec@tower_verify.main.1.0": 19, "tower_proofs^logup_spec_size@tower_verify.main.1.0": 20, "tower_proofs^logup_specs_eval@tower_verify.main.1.0": 21, "tower_proofs^prod_spec_size@tower_verify.main.1.0": 22, "tower_proofs^prod_specs_eval@tower_verify.main.1.0": 23, "tower_proofs^proofs@tower_verify.main.1.0": 24}
i = 18: {"%AS": 4, "%BN": 1, "%BP": 6, "%RET": 2, "%SP": 5, "%TS": 3, "_": 0, "alpha_pows@tower_verify.main.1.0": 7, "expected_max_round@tower_verify.main.1.0": 8, "i@tower_verify.main.1.1": 9, "initial_logup_evals@tower_verify.main.1.0": 10, "initial_logup_evals_len@tower_verify.main.1.0": 11, "initial_prod_evals@tower_verify.main.1.0": 12, "initial_prod_evals_len@tower_verify.main.1.0": 13, "initial_rt@tower_verify.main.1.0": 14, "log2_num_fanin@tower_verify.main.1.0": 15, "num_fanin@tower_verify.main.1.0": 16, "t^hash@tower_verify.main.1.0": 17, "tower_proofs^layer_per_spec@tower_verify.main.1.0": 18, "tower_proofs^logup_spec_size@tower_verify.main.1.0": 19, "tower_proofs^logup_specs_eval@tower_verify.main.1.0": 20, "tower_proofs^prod_spec_size@tower_verify.main.1.0": 21, "tower_proofs^prod_specs_eval@tower_verify.main.1.0": 22, "tower_proofs^proofs@tower_verify.main.1.0": 23}
i = 19: {"%AS": 4, "%BN": 1, "%BP": 6, "%RET": 2, "%SP": 5, "%TS": 3, "_": 0, "alpha_pows@tower_verify.main.1.0": 7, "expected_max_round@tower_verify.main.1.0": 8, "i@tower_verify.main.1.2": 9, "initial_claim@tower_verify.main.1.0": 10, "initial_logup_evals@tower_verify.main.1.0": 11, "initial_logup_evals_len@tower_verify.main.1.0": 12, "initial_prod_evals@tower_verify.main.1.0": 13, "initial_prod_evals_len@tower_verify.main.1.0": 14, "initial_rt@tower_verify.main.1.0": 15, "log2_num_fanin@tower_verify.main.1.0": 16, "num_fanin@tower_verify.main.1.0": 17, "t^hash@tower_verify.main.1.0": 18, "tower_proofs^layer_per_spec@tower_verify.main.1.0": 19, "tower_proofs^logup_spec_size@tower_verify.main.1.0": 20, "tower_proofs^logup_specs_eval@tower_verify.main.1.0": 21, "tower_proofs^prod_spec_size@tower_verify.main.1.0": 22, "tower_proofs^prod_specs_eval@tower_verify.main.1.0": 23, "tower_proofs^proofs@tower_verify.main.1.0": 24}
i = 20: {"%AS": 4, "%BN": 1, "%BP": 6, "%RET": 2, "%SP": 5, "%TS": 3, "_": 0, "alpha@tower_verify.main.2.0": 7, "alpha_denominator@tower_verify.main.1.0": 31, "alpha_numerator@tower_verify.main.1.0": 32, "alpha_pows@tower_verify.main.1.0": 8, "expected_max_round@tower_verify.main.1.0": 9, "i@tower_verify.main.1.2": 10, "i@tower_verify.main.1.3": 33, "initial_claim@tower_verify.main.1.0": 11, "initial_logup_evals@tower_verify.main.1.0": 12, "initial_logup_evals_len@tower_verify.main.1.0": 13, "initial_prod_evals@tower_verify.main.1.0": 14, "initial_prod_evals_len@tower_verify.main.1.0": 15, "initial_rt@tower_verify.main.1.0": 16, "log2_num_fanin@tower_verify.main.1.0": 17, "mle_denominator@tower_verify.main.1.0": 34, "mle_len.mle_eval.0.0": 18, "num_fanin@tower_verify.main.1.0": 19, "point.mle_eval.0.0": 20, "point_len.mle_eval.0.0": 21, "rp@.mle_eval": 22, "self.mle_eval.0.0": 23, "t^hash@tower_verify.main.1.0": 24, "tower_proofs^layer_per_spec@tower_verify.main.1.0": 25, "tower_proofs^logup_spec_size@tower_verify.main.1.0": 26, "tower_proofs^logup_specs_eval@tower_verify.main.1.0": 27, "tower_proofs^prod_spec_size@tower_verify.main.1.0": 28, "tower_proofs^prod_specs_eval@tower_verify.main.1.0": 29, "tower_proofs^proofs@tower_verify.main.1.0": 30}
i = 21: {"%AS": 4, "%BN": 1, "%BP": 6, "%RET": 2, "%SP": 5, "%TS": 3, "_": 0, "alpha_pows@tower_verify.main.1.0": 7, "expected_max_round@tower_verify.main.1.0": 8, "i@tower_verify.main.1.3": 9, "initial_claim@tower_verify.main.1.0": 10, "initial_logup_evals@tower_verify.main.1.0": 11, "initial_logup_evals_len@tower_verify.main.1.0": 12, "initial_prod_evals_len@tower_verify.main.1.0": 13, "initial_rt@tower_verify.main.1.0": 14, "log2_num_fanin@tower_verify.main.1.0": 15, "num_fanin@tower_verify.main.1.0": 16, "t^hash@tower_verify.main.1.0": 17, "tower_proofs^layer_per_spec@tower_verify.main.1.0": 18, "tower_proofs^logup_spec_size@tower_verify.main.1.0": 19, "tower_proofs^logup_specs_eval@tower_verify.main.1.0": 20, "tower_proofs^prod_spec_size@tower_verify.main.1.0": 21, "tower_proofs^prod_specs_eval@tower_verify.main.1.0": 22, "tower_proofs^proofs@tower_verify.main.1.0": 23}
i = 22: {"%AS": 4, "%BN": 1, "%BP": 6, "%RET": 2, "%SP": 5, "%TS": 3, "_": 0, "alpha_pows@tower_verify.main.1.0": 7, "eval_len@tower_verify.main.1.0": 8, "expected_max_round@tower_verify.main.1.0": 9, "initial_prod_evals_len@tower_verify.main.1.0": 10, "log2_num_fanin@tower_verify.main.1.0": 11, "logup_spec_p_input_layer_eval@tower_verify.main.1.0": 12, "logup_spec_q_input_layer_eval@tower_verify.main.1.0": 13, "next_rt^eval@tower_verify.main.1.0": 14, "next_rt^point@tower_verify.main.1.0": 15, "num_fanin@tower_verify.main.1.0": 16, "prod_spec_input_layer_eval@tower_verify.main.1.0": 17, "round@tower_verify.main.1.0": 18, "t^hash@tower_verify.main.1.0": 19, "tower_proofs^layer_per_spec@tower_verify.main.1.0": 20, "tower_proofs^logup_spec_size@tower_verify.main.1.0": 21, "tower_proofs^logup_specs_eval@tower_verify.main.1.0": 22, "tower_proofs^prod_spec_size@tower_verify.main.1.0": 23, "tower_proofs^prod_specs_eval@tower_verify.main.1.0": 24, "tower_proofs^proofs@tower_verify.main.1.0": 25}
i = 23: {"%AS": 4, "%BN": 1, "%BP": 6, "%RET": 2, "%SP": 5, "%TS": 3, "_": 0, "alpha_pows@tower_verify.main.1.0": 7, "aux_info^max_degree@verify_sumcheck@tower_verify.main.5.0": 8, "aux_info^num_variables@verify_sumcheck@tower_verify.main.5.0": 9, "claimed_sum@verify_sumcheck@tower_verify.main.5.0": 10, "eval_len@tower_verify.main.1.0": 11, "expected_max_round@tower_verify.main.1.0": 12, "initial_prod_evals_len@tower_verify.main.1.0": 13, "log2_num_fanin@tower_verify.main.1.0": 14, "logup_spec_p_input_layer_eval@tower_verify.main.1.0": 15, "logup_spec_q_input_layer_eval@tower_verify.main.1.0": 16, "num_fanin@tower_verify.main.1.0": 17, "out_rt@tower_verify.main.1.0": 18, "prod_spec_input_layer_eval@tower_verify.main.1.0": 19, "proof^proofs@verify_sumcheck@tower_verify.main.5.0": 20, "round@tower_verify.main.1.0": 21, "rt_len@tower_verify.main.1.0": 22, "t^hash@tower_verify.main.1.0": 23, "t^hash@verify_sumcheck@tower_verify.main.5.0": 24, "tower_proofs^layer_per_spec@tower_verify.main.1.0": 25, "tower_proofs^logup_spec_size@tower_verify.main.1.0": 26, "tower_proofs^logup_specs_eval@tower_verify.main.1.0": 27, "tower_proofs^prod_spec_size@tower_verify.main.1.0": 28, "tower_proofs^prod_specs_eval@tower_verify.main.1.0": 29, "tower_proofs^proofs@tower_verify.main.1.0": 30}
i = 24: {"%AS": 4, "%BN": 1, "%BP": 6, "%RET": 2, "%SP": 5, "%TS": 3, "_": 0, "alpha_pows@tower_verify.main.1.0": 7, "eval_len@tower_verify.main.1.0": 8, "expected_evaluation@tower_verify.main.1.0": 9, "expected_max_round@tower_verify.main.1.0": 10, "initial_prod_evals_len@tower_verify.main.1.0": 11, "log2_num_fanin@tower_verify.main.1.0": 12, "logup_spec_p_input_layer_eval@tower_verify.main.1.0": 13, "logup_spec_q_input_layer_eval@tower_verify.main.1.0": 14, "num_fanin@tower_verify.main.1.0": 15, "out_rt@tower_verify.main.1.0": 16, "prod_spec_input_layer_eval@tower_verify.main.1.0": 17, "round@tower_verify.main.1.0": 18, "rt@tower_verify.main.1.0": 19, "rt_len@tower_verify.main.1.0": 20, "spec_index@tower_verify.main.1.0": 21, "sumcheck_claim^expected_evaluation@tower_verify.main.1.0": 22, "t^hash@tower_verify.main.1.0": 23, "tower_proofs^layer_per_spec@tower_verify.main.1.0": 24, "tower_proofs^logup_spec_size@tower_verify.main.1.0": 25, "tower_proofs^logup_specs_eval@tower_verify.main.1.0": 26, "tower_proofs^prod_spec_size@tower_verify.main.1.0": 27, "tower_proofs^prod_specs_eval@tower_verify.main.1.0": 28, "tower_proofs^proofs@tower_verify.main.1.0": 29}
i = 25: {"%AS": 4, "%BN": 1, "%BP": 6, "%RET": 2, "%SP": 5, "%TS": 3, "_": 0, "alpha_pows@tower_verify.main.1.0": 7, "eval_len@tower_verify.main.1.0": 8, "expected_evaluation@tower_verify.main.1.0": 9, "expected_max_round@tower_verify.main.1.0": 10, "initial_prod_evals_len@tower_verify.main.1.0": 11, "log2_num_fanin@tower_verify.main.1.0": 12, "logup_spec_p_input_layer_eval@tower_verify.main.1.0": 13, "logup_spec_q_input_layer_eval@tower_verify.main.1.0": 14, "num_fanin@tower_verify.main.1.0": 15, "out_rt@tower_verify.main.1.0": 16, "prod_spec_input_layer_eval@tower_verify.main.1.0": 17, "round@tower_verify.main.1.0": 18, "rt@tower_verify.main.1.0": 19, "rt_len@tower_verify.main.1.0": 20, "spec_index@tower_verify.main.1.0": 21, "sumcheck_claim^expected_evaluation@tower_verify.main.1.0": 22, "t^hash@tower_verify.main.1.0": 23, "tower_proofs^layer_per_spec@tower_verify.main.1.0": 24, "tower_proofs^logup_spec_size@tower_verify.main.1.0": 25, "tower_proofs^logup_specs_eval@tower_verify.main.1.0": 26, "tower_proofs^prod_spec_size@tower_verify.main.1.0": 27, "tower_proofs^prod_specs_eval@tower_verify.main.1.0": 28, "tower_proofs^proofs@tower_verify.main.1.0": 29}
i = 26: {"%AS": 4, "%BN": 1, "%BP": 6, "%RET": 2, "%SP": 5, "%TS": 3, "_": 0, "alpha@tower_verify.main.2.1": 7, "alpha_pows@tower_verify.main.1.0": 8, "eval_len@tower_verify.main.1.0": 9, "expected_evaluation@tower_verify.main.1.0": 10, "expected_max_round@tower_verify.main.1.0": 11, "i@tower_verify.main.1.4": 12, "initial_prod_evals_len@tower_verify.main.1.0": 13, "log2_num_fanin@tower_verify.main.1.0": 14, "logup_spec_p_input_layer_eval@tower_verify.main.1.0": 15, "logup_spec_q_input_layer_eval@tower_verify.main.1.0": 16, "num_fanin@tower_verify.main.1.0": 17, "out_rt@tower_verify.main.1.0": 18, "prod@tower_verify.main.1.0": 19, "prod_spec_input_layer_eval@tower_verify.main.1.0": 20, "round@tower_verify.main.1.0": 21, "rt@tower_verify.main.1.0": 22, "rt_len@tower_verify.main.1.0": 23, "spec_index@tower_verify.main.1.0": 24, "sumcheck_claim^expected_evaluation@tower_verify.main.1.0": 25, "t^hash@tower_verify.main.1.0": 26, "tower_proofs^layer_per_spec@tower_verify.main.1.0": 27, "tower_proofs^logup_spec_size@tower_verify.main.1.0": 28, "tower_proofs^logup_specs_eval@tower_verify.main.1.0": 29, "tower_proofs^prod_spec_size@tower_verify.main.1.0": 30, "tower_proofs^prod_specs_eval@tower_verify.main.1.0": 31, "tower_proofs^proofs@tower_verify.main.1.0": 32}
i = 27: {"%AS": 4, "%BN": 1, "%BP": 6, "%RET": 2, "%SP": 5, "%TS": 3, "_": 0, "eval_len@tower_verify.main.1.0": 7, "expected_evaluation@tower_verify.main.1.0": 8, "expected_max_round@tower_verify.main.1.0": 9, "initial_prod_evals_len@tower_verify.main.1.0": 10, "len.eq_eval.0.0": 11, "log2_num_fanin@tower_verify.main.1.0": 12, "logup_spec_p_input_layer_eval@tower_verify.main.1.0": 13, "logup_spec_q_input_layer_eval@tower_verify.main.1.0": 14, "num_fanin@tower_verify.main.1.0": 15, "out_rt@tower_verify.main.1.0": 16, "p1@tower_verify.main.1.0": 34, "p2@tower_verify.main.1.0": 35, "prod@tower_verify.main.1.0": 17, "prod_spec_input_layer_eval@tower_verify.main.1.0": 18, "q1@tower_verify.main.1.0": 36, "q2@tower_verify.main.1.0": 37, "round@tower_verify.main.1.0": 19, "rp@.eq_eval": 20, "rt@tower_verify.main.1.0": 21, "rt_len@tower_verify.main.1.0": 22, "spec_index@tower_verify.main.1.0": 23, "spec_index@tower_verify.main.1.1": 38, "sumcheck_claim^expected_evaluation@tower_verify.main.1.0": 24, "t^hash@tower_verify.main.1.0": 25, "tower_proofs^layer_per_spec@tower_verify.main.1.0": 26, "tower_proofs^logup_spec_size@tower_verify.main.1.0": 27, "tower_proofs^logup_specs_eval@tower_verify.main.1.0": 28, "tower_proofs^prod_spec_size@tower_verify.main.1.0": 29, "tower_proofs^prod_specs_eval@tower_verify.main.1.0": 30, "tower_proofs^proofs@tower_verify.main.1.0": 31, "x.eq_eval.0.0": 32, "y.eq_eval.0.0": 33}
i = 28: {"%AS": 4, "%BN": 1, "%BP": 6, "%RET": 2, "%SP": 5, "%TS": 3, "_": 0, "alpha_pows@tower_verify.main.1.0": 7, "eval_len@tower_verify.main.1.0": 8, "expected_evaluation@tower_verify.main.1.0": 9, "expected_max_round@tower_verify.main.1.0": 10, "initial_prod_evals_len@tower_verify.main.1.0": 11, "log2_num_fanin@tower_verify.main.1.0": 12, "logup_spec_p_input_layer_eval@tower_verify.main.1.0": 13, "logup_spec_q_input_layer_eval@tower_verify.main.1.0": 14, "num_fanin@tower_verify.main.1.0": 15, "out_rt@tower_verify.main.1.0": 16, "prod_spec_input_layer_eval@tower_verify.main.1.0": 17, "round@tower_verify.main.1.0": 18, "rt@tower_verify.main.1.0": 19, "rt_len@tower_verify.main.1.0": 20, "spec_index@tower_verify.main.1.1": 21, "sumcheck_claim^expected_evaluation@tower_verify.main.1.0": 22, "t^hash@tower_verify.main.1.0": 23, "tower_proofs^layer_per_spec@tower_verify.main.1.0": 24, "tower_proofs^logup_spec_size@tower_verify.main.1.0": 25, "tower_proofs^logup_specs_eval@tower_verify.main.1.0": 26, "tower_proofs^prod_spec_size@tower_verify.main.1.0": 27, "tower_proofs^prod_specs_eval@tower_verify.main.1.0": 28, "tower_proofs^proofs@tower_verify.main.1.0": 29}
i = 29: {"%AS": 4, "%BN": 1, "%BP": 6, "%RET": 2, "%SP": 5, "%TS": 3, "_": 0, "alpha_pows@tower_verify.main.1.0": 7, "eval_len@tower_verify.main.1.0": 8, "expected_evaluation@tower_verify.main.1.0": 9, "expected_max_round@tower_verify.main.1.0": 10, "initial_prod_evals_len@tower_verify.main.1.0": 11, "log2_num_fanin@tower_verify.main.1.0": 12, "logup_spec_p_input_layer_eval@tower_verify.main.1.0": 13, "logup_spec_q_input_layer_eval@tower_verify.main.1.0": 14, "num_fanin@tower_verify.main.1.0": 15, "out_rt@tower_verify.main.1.0": 16, "prod_spec_input_layer_eval@tower_verify.main.1.0": 17, "round@tower_verify.main.1.0": 18, "rt@tower_verify.main.1.0": 19, "rt_len@tower_verify.main.1.0": 20, "spec_index@tower_verify.main.1.1": 21, "sumcheck_claim^expected_evaluation@tower_verify.main.1.0": 22, "t^hash@tower_verify.main.1.0": 23, "tower_proofs^layer_per_spec@tower_verify.main.1.0": 24, "tower_proofs^logup_spec_size@tower_verify.main.1.0": 25, "tower_proofs^logup_specs_eval@tower_verify.main.1.0": 26, "tower_proofs^prod_spec_size@tower_verify.main.1.0": 27, "tower_proofs^prod_specs_eval@tower_verify.main.1.0": 28, "tower_proofs^proofs@tower_verify.main.1.0": 29}
i = 30: {"%AS": 4, "%BN": 1, "%BP": 6, "%RET": 2, "%SP": 5, "%TS": 3, "_": 0, "alpha_pows@tower_verify.main.1.0": 7, "eval_len@tower_verify.main.1.0": 8, "expected_max_round@tower_verify.main.1.0": 9, "i@tower_verify.main.1.5": 10, "initial_prod_evals_len@tower_verify.main.1.0": 11, "log2_num_fanin@tower_verify.main.1.0": 12, "logup_spec_p_input_layer_eval@tower_verify.main.1.0": 13, "logup_spec_q_input_layer_eval@tower_verify.main.1.0": 14, "num_fanin@tower_verify.main.1.0": 15, "prod_spec_input_layer_eval@tower_verify.main.1.0": 16, "r_merge@tower_verify.main.1.0": 17, "round@tower_verify.main.1.0": 18, "rt@tower_verify.main.1.0": 19, "rt_len@tower_verify.main.1.0": 20, "rt_prime@tower_verify.main.1.0": 21, "t^hash@tower_verify.main.1.0": 22, "tower_proofs^layer_per_spec@tower_verify.main.1.0": 23, "tower_proofs^logup_spec_size@tower_verify.main.1.0": 24, "tower_proofs^logup_specs_eval@tower_verify.main.1.0": 25, "tower_proofs^prod_spec_size@tower_verify.main.1.0": 26, "tower_proofs^prod_specs_eval@tower_verify.main.1.0": 27, "tower_proofs^proofs@tower_verify.main.1.0": 28}
i = 31: {"%AS": 4, "%BN": 1, "%BP": 6, "%RET": 2, "%SP": 5, "%TS": 3, "_": 0, "alpha_pows@tower_verify.main.1.0": 7, "eval_len@tower_verify.main.1.0": 8, "expected_max_round@tower_verify.main.1.0": 9, "i@tower_verify.main.1.6": 10, "initial_prod_evals_len@tower_verify.main.1.0": 11, "log2_num_fanin@tower_verify.main.1.0": 12, "logup_spec_p_input_layer_eval@tower_verify.main.1.0": 13, "logup_spec_q_input_layer_eval@tower_verify.main.1.0": 14, "num_fanin@tower_verify.main.1.0": 15, "prod_spec_input_layer_eval@tower_verify.main.1.0": 16, "r_merge@tower_verify.main.1.0": 17, "round@tower_verify.main.1.0": 18, "rt_len@tower_verify.main.1.0": 19, "rt_prime@tower_verify.main.1.0": 20, "t^hash@tower_verify.main.1.0": 21, "tower_proofs^layer_per_spec@tower_verify.main.1.0": 22, "tower_proofs^logup_spec_size@tower_verify.main.1.0": 23, "tower_proofs^logup_specs_eval@tower_verify.main.1.0": 24, "tower_proofs^prod_spec_size@tower_verify.main.1.0": 25, "tower_proofs^prod_specs_eval@tower_verify.main.1.0": 26, "tower_proofs^proofs@tower_verify.main.1.0": 27}
i = 32: {"%AS": 4, "%BN": 1, "%BP": 6, "%RET": 2, "%SP": 5, "%TS": 3, "_": 0, "alpha_pows@tower_verify.main.1.0": 7, "coeffs@tower_verify.main.1.0": 8, "eval_len@tower_verify.main.1.0": 9, "expected_max_round@tower_verify.main.1.0": 10, "initial_prod_evals_len@tower_verify.main.1.0": 11, "log2_num_fanin@tower_verify.main.1.0": 12, "logup_spec_p_input_layer_eval@tower_verify.main.1.0": 13, "logup_spec_q_input_layer_eval@tower_verify.main.1.0": 14, "num_fanin@tower_verify.main.1.0": 15, "prod_spec_evals@tower_verify.main.1.0": 16, "prod_spec_input_layer_eval@tower_verify.main.1.0": 17, "round@tower_verify.main.1.0": 18, "rt_prime@tower_verify.main.1.0": 19, "spec_index@tower_verify.main.1.2": 20, "t^hash@tower_verify.main.1.0": 21, "tower_proofs^layer_per_spec@tower_verify.main.1.0": 22, "tower_proofs^logup_spec_size@tower_verify.main.1.0": 23, "tower_proofs^logup_specs_eval@tower_verify.main.1.0": 24, "tower_proofs^prod_spec_size@tower_verify.main.1.0": 25, "tower_proofs^prod_specs_eval@tower_verify.main.1.0": 26, "tower_proofs^proofs@tower_verify.main.1.0": 27}
i = 33: {"%AS": 4, "%BN": 1, "%BP": 6, "%RET": 2, "%SP": 5, "%TS": 3, "_": 0, "alpha@tower_verify.main.2.2": 7, "alpha_pows@tower_verify.main.1.0": 8, "coeffs@tower_verify.main.1.0": 9, "eval_len@tower_verify.main.1.0": 10, "evals@tower_verify.main.1.1": 11, "expected_max_round@tower_verify.main.1.0": 12, "i@tower_verify.main.1.7": 13, "initial_prod_evals_len@tower_verify.main.1.0": 14, "log2_num_fanin@tower_verify.main.1.0": 15, "logup_spec_p_input_layer_eval@tower_verify.main.1.0": 16, "logup_spec_q_input_layer_eval@tower_verify.main.1.0": 17, "num_fanin@tower_verify.main.1.0": 18, "prod_spec_evals@tower_verify.main.1.0": 19, "prod_spec_input_layer_eval@tower_verify.main.1.0": 20, "round@tower_verify.main.1.0": 21, "rt_prime@tower_verify.main.1.0": 22, "spec_index@tower_verify.main.1.2": 23, "t^hash@tower_verify.main.1.0": 24, "tower_proofs^layer_per_spec@tower_verify.main.1.0": 25, "tower_proofs^logup_spec_size@tower_verify.main.1.0": 26, "tower_proofs^logup_specs_eval@tower_verify.main.1.0": 27, "tower_proofs^prod_spec_size@tower_verify.main.1.0": 28, "tower_proofs^prod_specs_eval@tower_verify.main.1.0": 29, "tower_proofs^proofs@tower_verify.main.1.0": 30}
i = 34: {"%AS": 4, "%BN": 1, "%BP": 6, "%RET": 2, "%SP": 5, "%TS": 3, "_": 0, "alpha_pows@tower_verify.main.1.0": 7, "coeffs@tower_verify.main.1.0": 8, "eval_len@tower_verify.main.1.0": 9, "expected_max_round@tower_verify.main.1.0": 10, "initial_prod_evals_len@tower_verify.main.1.0": 11, "log2_num_fanin@tower_verify.main.1.0": 12, "logup_spec_p_input_layer_eval@tower_verify.main.1.0": 13, "logup_spec_q_input_layer_eval@tower_verify.main.1.0": 14, "num_fanin@tower_verify.main.1.0": 15, "prod_spec_evals@tower_verify.main.1.0": 16, "prod_spec_input_layer_eval@tower_verify.main.1.0": 17, "round@tower_verify.main.1.0": 18, "rt_prime@tower_verify.main.1.0": 19, "spec_index@tower_verify.main.1.2": 20, "t^hash@tower_verify.main.1.0": 21, "tower_proofs^layer_per_spec@tower_verify.main.1.0": 22, "tower_proofs^logup_spec_size@tower_verify.main.1.0": 23, "tower_proofs^logup_specs_eval@tower_verify.main.1.0": 24, "tower_proofs^prod_spec_size@tower_verify.main.1.0": 25, "tower_proofs^prod_specs_eval@tower_verify.main.1.0": 26, "tower_proofs^proofs@tower_verify.main.1.0": 27}
i = 35: {"%AS": 4, "%BN": 1, "%BP": 6, "%RET": 2, "%SP": 5, "%TS": 3, "_": 0, "alpha_pows@tower_verify.main.1.0": 7, "coeffs@tower_verify.main.1.0": 8, "eval_len@tower_verify.main.1.0": 9, "expected_max_round@tower_verify.main.1.0": 10, "initial_prod_evals_len@tower_verify.main.1.0": 11, "log2_num_fanin@tower_verify.main.1.0": 12, "logup_spec_evals@tower_verify.main.1.0": 13, "logup_spec_p_input_layer_eval@tower_verify.main.1.0": 14, "logup_spec_q_input_layer_eval@tower_verify.main.1.0": 15, "num_fanin@tower_verify.main.1.0": 16, "prod_spec_evals@tower_verify.main.1.0": 17, "prod_spec_input_layer_eval@tower_verify.main.1.0": 18, "round@tower_verify.main.1.0": 19, "rt_prime@tower_verify.main.1.0": 20, "spec_index@tower_verify.main.1.3": 21, "t^hash@tower_verify.main.1.0": 22, "tower_proofs^layer_per_spec@tower_verify.main.1.0": 23, "tower_proofs^logup_spec_size@tower_verify.main.1.0": 24, "tower_proofs^logup_specs_eval@tower_verify.main.1.0": 25, "tower_proofs^prod_spec_size@tower_verify.main.1.0": 26, "tower_proofs^prod_specs_eval@tower_verify.main.1.0": 27, "tower_proofs^proofs@tower_verify.main.1.0": 28}
i = 36: {"%AS": 4, "%BN": 1, "%BP": 6, "%RET": 2, "%RET.main": 7, "%SP": 5, "%TS": 3, "_": 0}
i = 37: {"%AS": 4, "%BN": 1, "%BP": 6, "%RET": 2, "%RET^hash.append_message_field": 7, "%SP": 5, "%TS": 3, "_": 0, "i@verify_sumcheck@tower_verify.main.5.0": 8, "initial_logup_evals@tower_verify.main.1.0": 9, "initial_logup_evals_len@tower_verify.main.1.0": 10, "initial_prod_evals@tower_verify.main.1.0": 11, "initial_prod_evals_len@tower_verify.main.1.0": 12, "initial_rt@tower_verify.main.1.0": 13, "j@verify_sumcheck@tower_verify.main.5.0": 14, "log2_num_fanin@tower_verify.main.1.0": 15, "logup_spec_p_input_layer_eval@tower_verify.main.1.0": 16, "logup_spec_q_input_layer_eval@tower_verify.main.1.0": 17, "num_fanin@tower_verify.main.1.0": 18, "out_rt@tower_verify.main.1.0": 19, "prod_spec_input_layer_eval@tower_verify.main.1.0": 20, "proof^proofs@verify_sumcheck@tower_verify.main.5.0": 21, "prover_msg^evaluations@verify_sumcheck@tower_verify.main.5.0": 22, "r_merge@tower_verify.main.1.0": 23, "round@tower_verify.main.1.0": 24, "rt_len@tower_verify.main.1.0": 25, "rt_prime@tower_verify.main.1.0": 26, "t^hash@tower_verify.main.1.0": 27, "tower_proofs^layer_per_spec@tower_verify.main.1.0": 28, "tower_proofs^logup_spec_size@tower_verify.main.1.0": 29, "tower_proofs^logup_specs_eval@tower_verify.main.1.0": 30, "tower_proofs^prod_spec_size@tower_verify.main.1.0": 31, "tower_proofs^prod_specs_eval@tower_verify.main.1.0": 32, "tower_proofs^proofs@tower_verify.main.1.0": 33, "vs^challenges@verify_sumcheck@tower_verify.main.5.0": 34, "vs^finished@verify_sumcheck@tower_verify.main.5.0": 35, "vs^max_degree@verify_sumcheck@tower_verify.main.5.0": 36, "vs^num_vars@verify_sumcheck@tower_verify.main.5.0": 37, "vs^polynomials_received@verify_sumcheck@tower_verify.main.5.0": 38, "vs^round@verify_sumcheck@tower_verify.main.5.0": 39}
i = 38: {"%AS": 4, "%BN": 1, "%BP": 6, "%RET": 2, "%RET^hash.append_message_u32": 7, "%SP": 5, "%TS": 3, "_": 0, "alpha_pows@tower_verify.main.1.0": 8, "aux_info^max_degree@verify_sumcheck@tower_verify.main.5.0": 9, "aux_info^num_variables@verify_sumcheck@tower_verify.main.5.0": 10, "claimed_sum@verify_sumcheck@tower_verify.main.5.0": 11, "eval_len@tower_verify.main.1.0": 12, "expected_max_round@tower_verify.main.1.0": 13, "initial_prod_evals_len@tower_verify.main.1.0": 14, "log2_num_fanin@tower_verify.main.1.0": 15, "logup_spec_p_input_layer_eval@tower_verify.main.1.0": 16, "logup_spec_q_input_layer_eval@tower_verify.main.1.0": 17, "num_fanin@tower_verify.main.1.0": 18, "out_rt@tower_verify.main.1.0": 19, "prod_spec_input_layer_eval@tower_verify.main.1.0": 20, "proof^proofs@verify_sumcheck@tower_verify.main.5.0": 21, "round@tower_verify.main.1.0": 22, "rt_len@tower_verify.main.1.0": 23, "t^hash@tower_verify.main.1.0": 24, "tower_proofs^layer_per_spec@tower_verify.main.1.0": 25, "tower_proofs^logup_spec_size@tower_verify.main.1.0": 26, "tower_proofs^logup_specs_eval@tower_verify.main.1.0": 27, "tower_proofs^prod_spec_size@tower_verify.main.1.0": 28, "tower_proofs^prod_specs_eval@tower_verify.main.1.0": 29, "tower_proofs^proofs@tower_verify.main.1.0": 30}
Var -> Witness map: {"%AS": 2, "%BP": 4, "%RET.eq_eval": 111, "%RET.main": 84, "%RET.mle_eval": 132, "%RET^challenges.main": 211, "%RET^expected_evaluation.main": 155, "%RET^finished.main": 212, "%RET^hash.append_message_field": 200, "%RET^hash.append_message_u32": 180, "%RET^hash.main": 49, "%RET^max_degree.main": 213, "%RET^num_vars.main": 214, "%RET^point.main": 156, "%RET^polynomials_received.main": 215, "%RET^round.main": 216, "%SP": 3, "%TS": 1, "_": 0, "alpha@tower_verify.main.1.0": 226, "alpha@tower_verify.main.2.0": 112, "alpha@tower_verify.main.2.1": 260, "alpha@tower_verify.main.2.2": 282, "alpha_denominator@tower_verify.main.1.0": 113, "alpha_denominator@tower_verify.main.1.1": 269, "alpha_denominator@tower_verify.main.1.2": 294, "alpha_numerator@tower_verify.main.1.0": 114, "alpha_numerator@tower_verify.main.1.1": 268, "alpha_numerator@tower_verify.main.1.2": 293, "alpha_pows@tower_verify.main.1.0": 68, "array^0.main.0.0": 5, "array^0.main.0.1": 11, "array^0.main.0.2": 17, "array^0@tower_verify.main.1.0": 236, "array^0@tower_verify.main.1.1": 250, "array^0@verify_sumcheck@tower_verify.main.5.0": 171, "array^1.main.0.0": 6, "array^1.main.0.1": 12, "array^1.main.0.2": 18, "array^2.main.0.0": 19, "array^3.main.0.0": 23, "array^4.main.0.0": 25, "array^5.main.0.0": 26, "array^6.main.0.0": 27, "array^7.main.0.0": 29, "array^8.main.0.0": 30, "array^9.main.0.0": 31, "asserted_sum@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0": 224, "aux_info^max_degree@verify_sumcheck@tower_verify.main.5.0": 174, "aux_info^num_variables@verify_sumcheck@tower_verify.main.5.0": 175, "challenge@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0": 142, "challenge@verify_round_and_update_state@verify_sumcheck@tower_verify.main.9.0": 210, "challenges@verify_sumcheck@tower_verify.main.5.0": 182, "claimed_sum@verify_sumcheck@tower_verify.main.5.0": 170, "coeffs@tower_verify.main.1.0": 86, "denom_down@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0": 162, "denom_up@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0": 150, "e@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0": 151, "eval_at@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0": 145, "eval_len@tower_verify.main.1.0": 69, "evals@build_eq_x_r_vec_sequential@tower_verify.main.5.0": 70, "evals@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0": 147, "evals@tower_verify.main.1.0": 232, "evals@tower_verify.main.1.1": 283, "evaluations@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0": 140, "expected@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0": 168, "expected_evaluation@tower_verify.main.1.0": 89, "expected_max_round.main.0.0": 45, "expected_max_round@tower_verify.main.1.0": 60, "expected_vec@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0": 133, "i.eq_eval.0.0": 106, "i.mle_eval.0.0": 125, "i@build_eq_x_r_vec_sequential@tower_verify.main.5.0": 71, "i@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0": 134, "i@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0": 164, "i@tower_verify.main.1.0": 228, "i@tower_verify.main.1.1": 229, "i@tower_verify.main.1.2": 115, "i@tower_verify.main.1.3": 116, "i@tower_verify.main.1.4": 261, "i@tower_verify.main.1.5": 275, "i@tower_verify.main.1.6": 277, "i@tower_verify.main.1.7": 284, "i@verify_sumcheck@tower_verify.main.5.0": 196, "index@.main.0.0": 9, "init^0.main.0.1": 7, "init^0.main.0.10": 28, "init^0.main.0.13": 32, "init^0.main.0.3": 13, "init^0.main.0.6": 20, "init^0.main.0.7": 24, "init^0@tower_verify.main.1.0": 239, "init^0^evaluations.main.0.0": 22, "init^1.main.0.0": 8, "init^1@tower_verify.main.1.0": 242, "init^2.main.0.0": 14, "init^3.main.0.0": 15, "initial_claim@tower_verify.main.1.0": 117, "initial_logup_evals.main.0.0": 16, "initial_logup_evals@tower_verify.main.1.0": 53, "initial_logup_evals_len@tower_verify.main.1.0": 65, "initial_prod_evals.main.0.0": 10, "initial_prod_evals@tower_verify.main.1.0": 52, "initial_prod_evals_len@tower_verify.main.1.0": 64, "initial_rt@tower_verify.main.1.0": 118, "it@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0": 163, "j.mle_eval.0.0": 126, "j@build_eq_x_r_vec_sequential@tower_verify.main.5.0": 82, "j@verify_sumcheck@tower_verify.main.5.0": 199, "len.eq_eval.0.0": 90, "len@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0": 146, "load^0.eq_eval.0.0": 107, "load^0.mle_eval.0.0": 127, "load^0.mle_eval.0.1": 131, "load^0@build_eq_x_r_vec_sequential@tower_verify.main.5.0": 80, "load^0@build_eq_x_r_vec_sequential@tower_verify.main.6.0": 83, "load^0@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0": 139, "load^0@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.1": 141, "load^0@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.2": 152, "load^0@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0": 165, "load^0@tower_verify.main.1.0": 231, "load^0@tower_verify.main.1.1": 233, "load^0@tower_verify.main.1.2": 235, "load^0@tower_verify.main.1.3": 237, "load^0@tower_verify.main.1.4": 251, "load^0@tower_verify.main.2.0": 258, "load^0@tower_verify.main.2.1": 266, "load^0@tower_verify.main.2.2": 276, "load^0@tower_verify.main.2.3": 280, "load^0@tower_verify.main.2.4": 291, "load^0@tower_verify.main.3.0": 259, "load^0@tower_verify.main.3.1": 267, "load^0@tower_verify.main.3.2": 270, "load^0@tower_verify.main.3.3": 281, "load^0@tower_verify.main.3.4": 292, "load^0@tower_verify.main.3.5": 295, "load^0@tower_verify.main.4.0": 262, "load^0@tower_verify.main.4.1": 285, "load^0^evaluations@verify_sumcheck@tower_verify.main.5.0": 197, "load^1.mle_eval.0.0": 128, "load^1@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0": 169, "load^1@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0": 166, "load^1@tower_verify.main.1.0": 238, "load^1@tower_verify.main.1.1": 263, "load^1@tower_verify.main.1.2": 271, "load^1@tower_verify.main.1.3": 286, "load^1@tower_verify.main.1.4": 296, "load^2.mle_eval.0.0": 129, "load^2@tower_verify.main.1.0": 240, "load^2@tower_verify.main.1.1": 264, "load^2@tower_verify.main.1.2": 272, "load^2@tower_verify.main.1.3": 287, "load^2@tower_verify.main.1.4": 297, "load^3.mle_eval.0.0": 130, "load^3@tower_verify.main.1.0": 241, "load^3@tower_verify.main.1.1": 288, "load^3@tower_verify.main.1.2": 298, "load^4@tower_verify.main.1.0": 299, "load^5@tower_verify.main.1.0": 300, "load^6@tower_verify.main.1.0": 301, "load^7@tower_verify.main.1.0": 302, "log2_num_fanin.main.0.0": 47, "log2_num_fanin@tower_verify.main.1.0": 62, "logup_spec_evals@tower_verify.main.1.0": 289, "logup_spec_p_input_layer_eval@tower_verify.main.1.0": 72, "logup_spec_q_input_layer_eval@tower_verify.main.1.0": 73, "mle_denominator@tower_verify.main.1.0": 119, "mle_len.mle_eval.0.0": 120, "mle_numerator@tower_verify.main.1.0": 243, "next_eval@tower_verify.main.1.0": 305, "next_rt^eval@tower_verify.main.1.0": 247, "next_rt^point@tower_verify.main.1.0": 248, "next_size@build_eq_x_r_vec_sequential@tower_verify.main.5.0": 74, "num_fanin.main.0.0": 46, "num_fanin@tower_verify.main.1.0": 61, "out_claim@tower_verify.main.1.0": 249, "out_rt@tower_verify.main.1.0": 91, "p1@tower_verify.main.1.0": 92, "p2@tower_verify.main.1.0": 93, "p_evals@tower_verify.main.1.0": 303, "p_i@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0": 144, "p_i_len@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0": 143, "point.mle_eval.0.0": 121, "point_len.mle_eval.0.0": 122, "polynomials_received@verify_sumcheck@tower_verify.main.5.0": 183, "prod@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0": 148, "prod@tower_verify.main.1.0": 94, "prod_spec_evals@tower_verify.main.1.0": 87, "prod_spec_input_layer_eval@tower_verify.main.1.0": 75, "proof^proofs@verify_sumcheck@tower_verify.main.5.0": 176, "prover_msg^evaluations@verify_round_and_update_state@verify_sumcheck@tower_verify.main.9.0": 208, "prover_msg^evaluations@verify_sumcheck@tower_verify.main.5.0": 198, "q1@tower_verify.main.1.0": 95, "q2@tower_verify.main.1.0": 96, "q_evals@tower_verify.main.1.0": 304, "r@build_eq_x_r_vec_sequential@tower_verify.main.5.0": 76, "r_i@build_eq_x_r_vec_sequential@tower_verify.main.5.0": 81, "r_len@build_eq_x_r_vec_sequential@tower_verify.main.5.0": 77, "r_len_pow2@build_eq_x_r_vec_sequential@tower_verify.main.5.0": 279, "r_merge@tower_verify.main.1.0": 274, "res.eq_eval.0.0": 105, "res@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0": 149, "ret^0@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0": 167, "ret^0@tower_verify.main.2.1": 234, "ret^0@tower_verify.main.2.2": 244, "ret^0@tower_verify.main.2.4": 85, "ret^0@tower_verify.main.3.0": 265, "ret^0@tower_verify.main.3.1": 273, "ret^0^challenges@verify_sumcheck@tower_verify.main.5.0": 217, "ret^0^expected_evaluation@tower_verify.main.1.0": 255, "ret^0^expected_evaluation@verify_sumcheck@tower_verify.main.5.0": 157, "ret^0^finished@verify_sumcheck@tower_verify.main.5.0": 218, "ret^0^hash.main.0.0": 50, "ret^0^hash@tower_verify.main.1.0": 225, "ret^0^hash@tower_verify.main.2.0": 230, "ret^0^hash@tower_verify.main.2.1": 278, "ret^0^hash@verify_sumcheck@tower_verify.main.5.0": 181, "ret^0^hash@verify_sumcheck@tower_verify.main.6.0": 201, "ret^0^max_degree@verify_sumcheck@tower_verify.main.5.0": 219, "ret^0^num_vars@verify_sumcheck@tower_verify.main.5.0": 220, "ret^0^point@tower_verify.main.1.0": 256, "ret^0^point@verify_sumcheck@tower_verify.main.5.0": 158, "ret^0^polynomials_received@verify_sumcheck@tower_verify.main.5.0": 221, "ret^0^round@verify_sumcheck@tower_verify.main.5.0": 222, "round@tower_verify.main.1.0": 78, "rp@.append_message_field": 67, "rp@.append_message_u32": 179, "rp@.eq_eval": 97, "rp@.mle_eval": 123, "rt@tower_verify.main.1.0": 98, "rt_len@tower_verify.main.1.0": 99, "rt_prime@tower_verify.main.1.0": 79, "sc^expected_evaluation@verify_sumcheck@tower_verify.main.5.0": 159, "sc^point@verify_sumcheck@tower_verify.main.5.0": 160, "self.mle_eval.0.0": 124, "self^challenges@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0": 135, "self^challenges@verify_round_and_update_state@verify_sumcheck@tower_verify.main.9.0": 202, "self^finished@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0": 223, "self^finished@verify_round_and_update_state@verify_sumcheck@tower_verify.main.9.0": 203, "self^max_degree@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0": 136, "self^max_degree@verify_round_and_update_state@verify_sumcheck@tower_verify.main.9.0": 204, "self^num_vars@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0": 137, "self^num_vars@verify_round_and_update_state@verify_sumcheck@tower_verify.main.9.0": 205, "self^polynomials_received@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0": 138, "self^polynomials_received@verify_round_and_update_state@verify_sumcheck@tower_verify.main.9.0": 206, "self^round@verify_round_and_update_state@verify_sumcheck@tower_verify.main.9.0": 207, "spec_index@tower_verify.main.1.0": 100, "spec_index@tower_verify.main.1.1": 101, "spec_index@tower_verify.main.1.2": 88, "spec_index@tower_verify.main.1.3": 290, "state@tower_verify.main.1.0": 227, "struct^0^challenges@verify_sumcheck@tower_verify.main.5.0": 189, "struct^0^eval@tower_verify.main.1.0": 246, "struct^0^eval@tower_verify.main.2.0": 307, "struct^0^evaluations.main.0.0": 21, "struct^0^expected_evaluation@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0": 154, "struct^0^expected_evaluation@verify_sumcheck@tower_verify.main.5.0": 173, "struct^0^finished@verify_sumcheck@tower_verify.main.5.0": 187, "struct^0^hash@new_transcript.main.1.0": 48, "struct^0^max_degree@verify_sumcheck@tower_verify.main.5.0": 186, "struct^0^num_vars@verify_sumcheck@tower_verify.main.5.0": 185, "struct^0^point@check_and_generate_subclaim@verify_sumcheck@tower_verify.main.6.0": 153, "struct^0^point@tower_verify.main.1.0": 245, "struct^0^point@tower_verify.main.2.0": 306, "struct^0^point@verify_sumcheck@tower_verify.main.5.0": 172, "struct^0^polynomials_received@verify_sumcheck@tower_verify.main.5.0": 188, "struct^0^proofs@tower_verify.main.1.0": 252, "struct^0^round@verify_sumcheck@tower_verify.main.5.0": 184, "struct^1^layer_per_spec.main.0.0": 36, "struct^1^logup_spec_size.main.0.0": 34, "struct^1^logup_specs_eval.main.0.0": 38, "struct^1^max_degree@tower_verify.main.1.0": 253, "struct^1^num_variables@tower_verify.main.1.0": 254, "struct^1^prod_spec_size.main.0.0": 33, "struct^1^prod_specs_eval.main.0.0": 37, "struct^1^proofs.main.0.0": 35, "sumcheck_claim^expected_evaluation@tower_verify.main.1.0": 102, "sumcheck_claim^point@tower_verify.main.1.0": 257, "t^hash.append_message_field.0.0": 66, "t^hash.append_message_u32.0.0": 178, "t^hash.main.0.0": 51, "t^hash@tower_verify.main.1.0": 63, "t^hash@verify_sumcheck@tower_verify.main.5.0": 177, "tmp@interpolate_uni_poly@verify_sumcheck@tower_verify.main.10.0": 161, "tower_proofs^layer_per_spec.main.0.0": 39, "tower_proofs^layer_per_spec@tower_verify.main.1.0": 54, "tower_proofs^logup_spec_size.main.0.0": 40, "tower_proofs^logup_spec_size@tower_verify.main.1.0": 55, "tower_proofs^logup_specs_eval.main.0.0": 41, "tower_proofs^logup_specs_eval@tower_verify.main.1.0": 56, "tower_proofs^prod_spec_size.main.0.0": 42, "tower_proofs^prod_spec_size@tower_verify.main.1.0": 57, "tower_proofs^prod_specs_eval.main.0.0": 43, "tower_proofs^prod_specs_eval@tower_verify.main.1.0": 58, "tower_proofs^proofs.main.0.0": 44, "tower_proofs^proofs@tower_verify.main.1.0": 59, "transcript^hash@verify_round_and_update_state@verify_sumcheck@tower_verify.main.9.0": 209, "vs^challenges@verify_sumcheck@tower_verify.main.5.0": 190, "vs^finished@verify_sumcheck@tower_verify.main.5.0": 191, "vs^max_degree@verify_sumcheck@tower_verify.main.5.0": 192, "vs^num_vars@verify_sumcheck@tower_verify.main.5.0": 193, "vs^polynomials_received@verify_sumcheck@tower_verify.main.5.0": 194, "vs^round@verify_sumcheck@tower_verify.main.5.0": 195, "x.eq_eval.0.0": 103, "xi.eq_eval.0.0": 108, "xi_yi.eq_eval.0.0": 110, "y.eq_eval.0.0": 104, "yi.eq_eval.0.0": 109}
Live variables:
  BLOCK 0: ([1], [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])
  BLOCK 1: ([1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29], [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31])
  BLOCK 2: ([1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31])
  BLOCK 3: ([1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])
  BLOCK 4: ([1, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29], [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])
  BLOCK 5: ([1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38], [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40])
  BLOCK 6: ([1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40], [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40])
  BLOCK 7: ([1, 3, 4, 5, 6, 7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38], [1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35])
  BLOCK 8: ([1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34], [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35])
  BLOCK 9: ([1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36])
  BLOCK 10: ([1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36], [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36])
  BLOCK 11: ([1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36], [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35])
  BLOCK 12: ([1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 27, 28, 29, 30, 31, 32, 33, 34, 35], [1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])
  BLOCK 13: ([1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40])
  BLOCK 14: ([1, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 25, 26, 27, 28, 29, 30, 31], [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])
  BLOCK 15: ([1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40], [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40])
  BLOCK 16: ([1, 3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40], [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40])
  BLOCK 17: ([1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40], [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40])
  BLOCK 18: ([1, 3, 4, 5, 6, 7, 10, 12, 13, 14, 15, 16, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40], [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31])
  BLOCK 19: ([1, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 28, 29, 30], [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])
  BLOCK 20: ([1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31])
  BLOCK 21: ([1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31])
  BLOCK 22: ([1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37])
  BLOCK 23: ([1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37], [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39])
  BLOCK 24: ([1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39], [1, 3, 4, 5, 6, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 34, 35, 36, 37, 38, 39, 40])
  BLOCK 25: ([1, 3, 4, 5, 6, 7, 8, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39], [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39])
  BLOCK 26: ([1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39], [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37])
  BLOCK 27: ([1, 3, 4, 5, 6, 7, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36], [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31])
  BLOCK 28: ([1, 3, 4, 5, 6, 7, 9, 10, 11, 12, 15, 18, 28, 29, 30, 31, 32, 33], [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])
  BLOCK 29: ([1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])
  BLOCK 30: ([1, 3, 4, 5, 6, 8, 9, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24], [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])
  BLOCK 31: ([1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22])
  BLOCK 32: ([1, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 15, 18, 28, 29, 30, 31, 32, 33], [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])
  BLOCK 33: ([1, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])
  BLOCK 34: ([1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])
  BLOCK 35: ([1, 2, 3, 4, 5, 6, 8, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30], [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])
  BLOCK 36: ([1, 3, 4, 5, 6, 7, 8, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])
  BLOCK 37: ([1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], [1, 3, 4, 5, 6, 8, 9, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34])
  BLOCK 38: ([1, 2, 3, 4, 5, 6, 9, 10, 11, 12, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], [1, 3, 4, 5, 6, 8, 9, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33])
  BLOCK 39: ([1, 2, 3, 4, 5, 6, 9, 11, 12, 14, 15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30], [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])
  BLOCK 40: ([1, 3, 4, 5, 6, 7, 8, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])
  BLOCK 41: ([1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])
  BLOCK 42: ([1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27], [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])
  BLOCK 43: ([1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29], [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])
  BLOCK 44: ([1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29], [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32])
  BLOCK 45: ([1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32])
  BLOCK 46: ([1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33])
  BLOCK 47: ([1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 19, 20, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35], [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])
  BLOCK 48: ([1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29], [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])
  BLOCK 49: ([1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29], [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])
  BLOCK 50: ([1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29], [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])
  BLOCK 51: ([1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29], [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38])
  BLOCK 52: ([1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35], [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])
  BLOCK 53: ([1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29], [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])
  BLOCK 54: ([1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29], [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])
  BLOCK 55: ([1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28], [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])
  BLOCK 56: ([1, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28], [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])
  BLOCK 57: ([1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27], [1, 3, 4, 5, 6, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 24, 25, 27, 30, 31, 32, 33])
  BLOCK 58: ([1, 3, 4, 5, 6, 7, 12, 15, 16, 17, 18, 20, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33], [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])
  BLOCK 59: ([1, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27], [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])
  BLOCK 60: ([1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27], [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])
  BLOCK 61: ([1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27], [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])
  BLOCK 62: ([1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])
  BLOCK 63: ([1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])
  BLOCK 64: ([1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27], [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])
  BLOCK 65: ([1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27], [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])
  BLOCK 66: ([1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27], [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])
  BLOCK 67: ([1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28], [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])
  BLOCK 68: ([1, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28], [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])
  BLOCK 69: ([1], [1, 2])
  BLOCK 70: ([1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40], [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39])
  BLOCK 71: ([1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])


--
Tydef -> Assignee:
Entry block: 0

Block 0:
Func: main, Scope: 0
Exec Bound: 1, While Loop: false, Num VM Ops: 25
Inputs:
    %i1(BN): field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: u32
    %o9: field
    %o10: u32
    %o11: u32
    %o12: u32
    %o13: field
    %o14: field
    %o15: field
    %o16: u32
    %o17: field
    %o18: u32
    %o19: field
    %o20: field
Instructions:
    assert %i1(BN) == 0 <Field>
    field %w3(RP) = 0 <Field>
    field %w4(SP) = 0 <Field>
    field %w1(TS) = 0 <Field>
    field %w2(AS) = 0 <Field>
    field[2][1 <U32>] %w5
    field[2 <U32>] %w6
    field %w7 = 1 <Field>
    field %w8 = 0 <Field>
    %w6[0 <Field>] = %w7 <field>, init
    %w6[1 <Field>] = %w8 <field>, init
    %w7 = %w6
    u32 %w9 = 0 <U32>
    if %w9 != 1 <U32>:
        %w5[%w9] = %w7 <field>, init
    else:
        Dummy Load
    field %w10 = %w5(BP)
    field[4][1 <U32>] %w11
    field[4 <U32>] %w12
    field %w13 = 1 <Field>
    %w8 = 2 <Field>
    field %w14 = 1 <Field>
    field %w15 = 2 <Field>
    %w12[0 <Field>] = %w13 <field>, init
    %w12[1 <Field>] = %w8 <field>, init
    %w12[2 <Field>] = %w14 <field>, init
    %w12[3 <Field>] = %w15 <field>, init
    %w13 = %w12
    %w9 = 0 <U32>
    if %w9 != 1 <U32>:
        %w11[%w9] = %w13 <field>, init
    else:
        Dummy Load
    field %w16 = %w11
    IOPProverMessage { evaluations: field[3] }[3][1 <U32>] %w17
    IOPProverMessage { evaluations: field[3] }[3 <U32>] %w18
    field[3 <U32>] %w19
    field %w20 = 1 <Field>
    %w8 = 2 <Field>
    %w14 = 3 <Field>
    %w19[0 <Field>] = %w20 <field>, init
    %w19[1 <Field>] = %w8 <field>, init
    %w19[2 <Field>] = %w14 <field>, init
    field %w21 = %w19
    field %w22 = %w21
    %w9 = 0 <U32>
    if %w9 != 3 <U32>:
        %w18[%w9] = %w22 <field>, init
        %w9 = %w9 + 1 <U32>
    else:
        Dummy Load
    if %w9 != 3 <U32>:
        %w18[%w9] = %w22 <field>, init
        %w9 = %w9 + 1 <U32>
    else:
        Dummy Load
    if %w9 != 3 <U32>:
        %w18[%w9] = %w22 <field>, init
    else:
        Dummy Load
    %w20 = %w18
    %w9 = 0 <U32>
    if %w9 != 1 <U32>:
        %w17[%w9] = %w20 <field>, init
    else:
        Dummy Load
    u32[1 <U32>] %w23
    u32 %w24 = 1 <U32>
    %w9 = 0 <U32>
    if %w9 != 1 <U32>:
        %w23[%w9] = %w24 <u32>, init
    else:
        Dummy Load
    field[1][1][1 <U32>] %w25
    field[1][1 <U32>] %w26
    field[1 <U32>] %w27
    field %w28 = 0 <Field>
    %w9 = 0 <U32>
    if %w9 != 1 <U32>:
        %w27[%w9] = %w28 <field>, init
    else:
        Dummy Load
    %w28 = %w27
    %w9 = 0 <U32>
    if %w9 != 1 <U32>:
        %w26[%w9] = %w28 <field>, init
    else:
        Dummy Load
    %w28 = %w26
    %w9 = 0 <U32>
    if %w9 != 1 <U32>:
        %w25[%w9] = %w28 <field>, init
    else:
        Dummy Load
    field[1][4][1 <U32>] %w29
    field[4][1 <U32>] %w30
    field[4 <U32>] %w31
    field %w32 = 0 <Field>
    %w8 = 0 <Field>
    %w14 = 0 <Field>
    %w15 = 0 <Field>
    %w31[0 <Field>] = %w32 <field>, init
    %w31[1 <Field>] = %w8 <field>, init
    %w31[2 <Field>] = %w14 <field>, init
    %w31[3 <Field>] = %w15 <field>, init
    %w32 = %w31
    %w9 = 0 <U32>
    if %w9 != 1 <U32>:
        %w30[%w9] = %w32 <field>, init
    else:
        Dummy Load
    %w32 = %w30
    %w9 = 0 <U32>
    if %w9 != 1 <U32>:
        %w29[%w9] = %w32 <field>, init
    else:
        Dummy Load
    u32 %w33 = 1 <U32>
    u32 %w34 = 1 <U32>
    field %w35 = %w17
    field %w36 = %w23
    field %w37 = %w25
    field %w38 = %w29
    field %w39 = %w36
    u32 %w40 = %w34
    field %w41 = %w38
    u32 %w42 = %w33
    field %w43 = %w37
    field %w44 = %w35
    u32 %w45 = 2 <U32>
    u32 %w46 = 2 <U32>
    u32 %w47 = 1 <U32>
    field %w48 = 2 <Field>
    field %w49 = %w48
    field %w50 = %w49
    field %w51 = %w50
    field %w52 = %w10
    field %w53 = %w16
    field %w54 = %w39
    u32 %w55 = %w40
    field %w56 = %w41
    u32 %w57 = %w42
    field %w58 = %w43
    field %w59 = %w44
    u32 %w60 = %w45
    u32 %w61 = %w46
    u32 %w62 = %w47
    field %w63 = %w51
    assert %w61 == 2 <U32>
    assert %w62 == 1 <U32>
    u32 %w64 = %w57
    u32 %w65 = %w55
    field %w66 = %w63
    %PHY[%SP + 0] = %w4(SP) <field>
    %w4(SP) = %w3(RP)
    %PHY[%SP + 1] = %w60 <u32>
    field %w67 = 28 <Field>
    %w3(RP) = %w3(RP) + 2 <Field>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w53
    assert %o8 == %w65
    assert %o9 == %w52
    assert %o10 == %w64
    assert %o11 == %w62
    assert %o12 == %w61
    assert %o13 == %w67
    assert %o14 == %w66
    assert %o15 == %w54
    assert %o16 == %w55
    assert %o17 == %w56
    assert %o18 == %w57
    assert %o19 == %w58
    assert %o20 == %w59
    assert %o1(BN) == 70 <Field>
Transition: -> 70

Block 1:
Func: main, Scope: 7
Exec Bound: 1, While Loop: true, Num VM Ops: 1
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: u32
    %i9: field
    %i10: u32
    %i11: u32
    %i12: u32
    %i13: u32
    %i14: field
    %i15: field
    %i16: u32
    %i17: u32
    %i18: field
    %i19: field
    %i20: u32
    %i21: u32
    %i22: field
    %i23: field
    %i24: field
    %i25: u32
    %i26: field
    %i27: u32
    %i28: field
    %i29: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: u32
    %o9: field
    %o10: u32
    %o11: u32
    %o12: u32
    %o13: u32
    %o14: u32
    %o15: field
    %o16: field
    %o17: u32
    %o18: u32
    %o19: field
    %o20: field
    %o21: field
    %o22: u32
    %o23: u32
    %o24: field
    %o25: field
    %o26: field
    %o27: u32
    %o28: field
    %o29: u32
    %o30: field
    %o31: field
Instructions:
    assert %i1(BN) == 1 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    u32 %w69 = %i8
    field %w70 = %i9
    u32 %w60 = %i10
    u32 %w71 = %i11
    u32 %w64 = %i12
    u32 %w62 = %i13
    field %w72 = %i14
    field %w73 = %i15
    u32 %w74 = %i16
    u32 %w61 = %i17
    field %w75 = %i18
    field %w76 = %i19
    u32 %w77 = %i20
    u32 %w78 = %i21
    field %w79 = %i22
    field %w63 = %i23
    field %w54 = %i24
    u32 %w55 = %i25
    field %w56 = %i26
    u32 %w57 = %i27
    field %w58 = %i28
    field %w59 = %i29
    field %w80 = %w76[%w77 - 1 <U32> - %w71]
    field %w81 = %w80
    u32 %w82 = %w74
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w68
    assert %o8 == %w69
    assert %o9 == %w70
    assert %o10 == %w60
    assert %o11 == %w71
    assert %o12 == %w64
    assert %o13 == %w82
    assert %o14 == %w62
    assert %o15 == %w72
    assert %o16 == %w73
    assert %o17 == %w74
    assert %o18 == %w61
    assert %o19 == %w75
    assert %o20 == %w76
    assert %o21 == %w81
    assert %o22 == %w77
    assert %o23 == %w78
    assert %o24 == %w79
    assert %o25 == %w63
    assert %o26 == %w54
    assert %o27 == %w55
    assert %o28 == %w56
    assert %o29 == %w57
    assert %o30 == %w58
    assert %o31 == %w59
    assert %o1(BN) == %w82 != 0 <U32> ? 2 <Field> : 3 <Field>
Transition:
    %w82 != 0 <U32> ? -> 2 : -> 3

Block 2:
Func: main, Scope: 9
Exec Bound: 1, While Loop: true, Num VM Ops: 4
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: u32
    %i9: field
    %i10: u32
    %i11: u32
    %i12: u32
    %i13: u32
    %i14: u32
    %i15: field
    %i16: field
    %i17: u32
    %i18: u32
    %i19: field
    %i20: field
    %i21: field
    %i22: u32
    %i23: u32
    %i24: field
    %i25: field
    %i26: field
    %i27: u32
    %i28: field
    %i29: u32
    %i30: field
    %i31: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: u32
    %o9: field
    %o10: u32
    %o11: u32
    %o12: u32
    %o13: u32
    %o14: u32
    %o15: field
    %o16: field
    %o17: u32
    %o18: u32
    %o19: field
    %o20: field
    %o21: field
    %o22: u32
    %o23: u32
    %o24: field
    %o25: field
    %o26: field
    %o27: u32
    %o28: field
    %o29: u32
    %o30: field
    %o31: field
Instructions:
    assert %i1(BN) == 2 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    u32 %w69 = %i8
    field %w70 = %i9
    u32 %w60 = %i10
    u32 %w71 = %i11
    u32 %w64 = %i12
    u32 %w82 = %i13
    u32 %w62 = %i14
    field %w72 = %i15
    field %w73 = %i16
    u32 %w74 = %i17
    u32 %w61 = %i18
    field %w75 = %i19
    field %w76 = %i20
    field %w81 = %i21
    u32 %w77 = %i22
    u32 %w78 = %i23
    field %w79 = %i24
    field %w63 = %i25
    field %w54 = %i26
    u32 %w55 = %i27
    field %w56 = %i28
    u32 %w57 = %i29
    field %w58 = %i30
    field %w59 = %i31
    %w82 = %w82 - 1 <U32>
    field %w83 = %w70[%w82]
    %w70[2 <U32> * %w82 + 1 <U32>] = %w81 * %w83 <field>
    field %w83 = %w70[%w82]
    %w70[2 <U32> * %w82] = 1 <Field> - %w81 * %w83 <field>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w68
    assert %o8 == %w69
    assert %o9 == %w70
    assert %o10 == %w60
    assert %o11 == %w71
    assert %o12 == %w64
    assert %o13 == %w82
    assert %o14 == %w62
    assert %o15 == %w72
    assert %o16 == %w73
    assert %o17 == %w74
    assert %o18 == %w61
    assert %o19 == %w75
    assert %o20 == %w76
    assert %o21 == %w81
    assert %o22 == %w77
    assert %o23 == %w78
    assert %o24 == %w79
    assert %o25 == %w63
    assert %o26 == %w54
    assert %o27 == %w55
    assert %o28 == %w56
    assert %o29 == %w57
    assert %o30 == %w58
    assert %o31 == %w59
    assert %o1(BN) == %w82 != 0 <U32> ? 2 <Field> : 3 <Field>
Transition:
    %w82 != 0 <U32> ? -> 2 : -> 3

Block 3:
Func: main, Scope: 8
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: u32
    %i9: field
    %i10: u32
    %i11: u32
    %i12: u32
    %i14: u32
    %i15: field
    %i16: field
    %i17: u32
    %i18: u32
    %i19: field
    %i20: field
    %i22: u32
    %i23: u32
    %i24: field
    %i25: field
    %i26: field
    %i27: u32
    %i28: field
    %i29: u32
    %i30: field
    %i31: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: u32
    %o9: field
    %o10: u32
    %o11: u32
    %o12: u32
    %o13: u32
    %o14: field
    %o15: field
    %o16: u32
    %o17: u32
    %o18: field
    %o19: field
    %o20: u32
    %o21: u32
    %o22: field
    %o23: field
    %o24: field
    %o25: u32
    %o26: field
    %o27: u32
    %o28: field
    %o29: field
Instructions:
    assert %i1(BN) == 3 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    u32 %w69 = %i8
    field %w70 = %i9
    u32 %w60 = %i10
    u32 %w71 = %i11
    u32 %w64 = %i12
    u32 %w62 = %i14
    field %w72 = %i15
    field %w73 = %i16
    u32 %w74 = %i17
    u32 %w61 = %i18
    field %w75 = %i19
    field %w76 = %i20
    u32 %w77 = %i22
    u32 %w78 = %i23
    field %w79 = %i24
    field %w63 = %i25
    field %w54 = %i26
    u32 %w55 = %i27
    field %w56 = %i28
    u32 %w57 = %i29
    field %w58 = %i30
    field %w59 = %i31
    %w74 = %w74 * 2 <U32>
    %w71 = %w71 + 1 <U32>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w68
    assert %o8 == %w69
    assert %o9 == %w70
    assert %o10 == %w60
    assert %o11 == %w71
    assert %o12 == %w64
    assert %o13 == %w62
    assert %o14 == %w72
    assert %o15 == %w73
    assert %o16 == %w74
    assert %o17 == %w61
    assert %o18 == %w75
    assert %o19 == %w76
    assert %o20 == %w77
    assert %o21 == %w78
    assert %o22 == %w79
    assert %o23 == %w63
    assert %o24 == %w54
    assert %o25 == %w55
    assert %o26 == %w56
    assert %o27 == %w57
    assert %o28 == %w58
    assert %o29 == %w59
    assert %o1(BN) == %w71 != %w77 ? 1 <Field> : 4 <Field>
Transition:
    %w71 != %w77 ? -> 1 : -> 4

Block 4:
Func: main, Scope: 6
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: u32
    %i9: field
    %i10: u32
    %i12: u32
    %i13: u32
    %i14: field
    %i15: field
    %i17: u32
    %i18: field
    %i21: u32
    %i22: field
    %i23: field
    %i24: field
    %i25: u32
    %i26: field
    %i27: u32
    %i28: field
    %i29: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: field
    %o9: u32
    %o10: u32
    %o11: u32
    %o12: u32
    %o13: field
    %o14: field
    %o15: u32
    %o16: field
    %o17: field
    %o18: u32
    %o19: field
    %o20: u32
    %o21: field
    %o22: field
    %o23: u32
    %o24: field
    %o25: u32
    %o26: field
    %o27: field
Instructions:
    assert %i1(BN) == 4 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    u32 %w69 = %i8
    field %w70 = %i9
    u32 %w60 = %i10
    u32 %w64 = %i12
    u32 %w62 = %i13
    field %w72 = %i14
    field %w73 = %i15
    u32 %w61 = %i17
    field %w75 = %i18
    u32 %w78 = %i21
    field %w79 = %i22
    field %w63 = %i23
    field %w54 = %i24
    u32 %w55 = %i25
    field %w56 = %i26
    u32 %w57 = %i27
    field %w58 = %i28
    field %w59 = %i29
    field %w84 = %w70
    field %w85 = %w84
    field %w86 = %w85
    field %w87 = 0 <Field>
    u32 %w88 = 0 <U32>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w68
    assert %o8 == %w86
    assert %o9 == %w69
    assert %o10 == %w60
    assert %o11 == %w64
    assert %o12 == %w62
    assert %o13 == %w72
    assert %o14 == %w73
    assert %o15 == %w61
    assert %o16 == %w87
    assert %o17 == %w75
    assert %o18 == %w78
    assert %o19 == %w79
    assert %o20 == %w88
    assert %o21 == %w63
    assert %o22 == %w54
    assert %o23 == %w55
    assert %o24 == %w56
    assert %o25 == %w57
    assert %o26 == %w58
    assert %o27 == %w59
    assert %o1(BN) == %w88 != %w57 ? 60 <Field> : 66 <Field>
Transition:
    %w88 != %w57 ? -> 60 : -> 66

Block 5:
Func: eq_eval, Scope: 0
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): u32
    %i8: field
    %i9: u32
    %i10: u32
    %i11: u32
    %i12: u32
    %i13: field
    %i14: field
    %i15: u32
    %i16: field
    %i34: field
    %i35: field
    %i17: field
    %i18: field
    %i36: field
    %i37: field
    %i19: u32
    %i20: field
    %i21: field
    %i22: u32
    %i23: u32
    %i38: u32
    %i24: field
    %i25: field
    %i26: field
    %i27: u32
    %i28: field
    %i29: u32
    %i30: field
    %i31: field
    %i32: field
    %i33: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): u32
    %o8: field
    %o9: u32
    %o10: u32
    %o11: u32
    %o12: u32
    %o13: u32
    %o14: field
    %o15: field
    %o16: u32
    %o17: field
    %o18: field
    %o19: field
    %o20: field
    %o21: field
    %o22: field
    %o23: field
    %o24: field
    %o25: u32
    %o26: field
    %o27: field
    %o28: u32
    %o29: u32
    %o30: u32
    %o31: field
    %o32: field
    %o33: field
    %o34: u32
    %o35: field
    %o36: u32
    %o37: field
    %o38: field
    %o39: field
    %o40: field
Instructions:
    assert %i1(BN) == 5 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    u32 %w69 = %i7(BP)
    field %w89 = %i8
    u32 %w60 = %i9
    u32 %w64 = %i10
    u32 %w90 = %i11
    u32 %w62 = %i12
    field %w72 = %i13
    field %w73 = %i14
    u32 %w61 = %i15
    field %w91 = %i16
    field %w92 = %i34
    field %w93 = %i35
    field %w94 = %i17
    field %w75 = %i18
    field %w95 = %i36
    field %w96 = %i37
    u32 %w78 = %i19
    field %w97 = %i20
    field %w98 = %i21
    u32 %w99 = %i22
    u32 %w100 = %i23
    u32 %w101 = %i38
    field %w102 = %i24
    field %w63 = %i25
    field %w54 = %i26
    u32 %w55 = %i27
    field %w56 = %i28
    u32 %w57 = %i29
    field %w58 = %i30
    field %w59 = %i31
    field %w103 = %i32
    field %w104 = %i33
    field %w105 = 1 <Field>
    u32 %w106 = 0 <U32>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w69
    assert %o8 == %w89
    assert %o9 == %w60
    assert %o10 == %w106
    assert %o11 == %w64
    assert %o12 == %w90
    assert %o13 == %w62
    assert %o14 == %w72
    assert %o15 == %w73
    assert %o16 == %w61
    assert %o17 == %w91
    assert %o18 == %w92
    assert %o19 == %w93
    assert %o20 == %w94
    assert %o21 == %w75
    assert %o22 == %w95
    assert %o23 == %w96
    assert %o24 == %w105
    assert %o25 == %w78
    assert %o26 == %w97
    assert %o27 == %w98
    assert %o28 == %w99
    assert %o29 == %w100
    assert %o30 == %w101
    assert %o31 == %w102
    assert %o32 == %w63
    assert %o33 == %w54
    assert %o34 == %w55
    assert %o35 == %w56
    assert %o36 == %w57
    assert %o37 == %w58
    assert %o38 == %w59
    assert %o39 == %w103
    assert %o40 == %w104
    assert %o1(BN) == %w106 != %w90 ? 6 <Field> : 7 <Field>
Transition:
    %w106 != %w90 ? -> 6 : -> 7

Block 6:
Func: eq_eval, Scope: 2
Exec Bound: 1, While Loop: true, Num VM Ops: 2
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): u32
    %i8: field
    %i9: u32
    %i10: u32
    %i11: u32
    %i12: u32
    %i13: u32
    %i14: field
    %i15: field
    %i16: u32
    %i17: field
    %i18: field
    %i19: field
    %i20: field
    %i21: field
    %i22: field
    %i23: field
    %i24: field
    %i25: u32
    %i26: field
    %i27: field
    %i28: u32
    %i29: u32
    %i30: u32
    %i31: field
    %i32: field
    %i33: field
    %i34: u32
    %i35: field
    %i36: u32
    %i37: field
    %i38: field
    %i39: field
    %i40: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): u32
    %o8: field
    %o9: u32
    %o10: u32
    %o11: u32
    %o12: u32
    %o13: u32
    %o14: field
    %o15: field
    %o16: u32
    %o17: field
    %o18: field
    %o19: field
    %o20: field
    %o21: field
    %o22: field
    %o23: field
    %o24: field
    %o25: u32
    %o26: field
    %o27: field
    %o28: u32
    %o29: u32
    %o30: u32
    %o31: field
    %o32: field
    %o33: field
    %o34: u32
    %o35: field
    %o36: u32
    %o37: field
    %o38: field
    %o39: field
    %o40: field
Instructions:
    assert %i1(BN) == 6 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    u32 %w69 = %i7(BP)
    field %w89 = %i8
    u32 %w60 = %i9
    u32 %w106 = %i10
    u32 %w64 = %i11
    u32 %w90 = %i12
    u32 %w62 = %i13
    field %w72 = %i14
    field %w73 = %i15
    u32 %w61 = %i16
    field %w91 = %i17
    field %w92 = %i18
    field %w93 = %i19
    field %w94 = %i20
    field %w75 = %i21
    field %w95 = %i22
    field %w96 = %i23
    field %w105 = %i24
    u32 %w78 = %i25
    field %w97 = %i26
    field %w98 = %i27
    u32 %w99 = %i28
    u32 %w100 = %i29
    u32 %w101 = %i30
    field %w102 = %i31
    field %w63 = %i32
    field %w54 = %i33
    u32 %w55 = %i34
    field %w56 = %i35
    u32 %w57 = %i36
    field %w58 = %i37
    field %w59 = %i38
    field %w103 = %i39
    field %w104 = %i40
    field %w107 = %w103[%w106]
    field %w108 = %w107
    field %w107 = %w104[%w106]
    field %w109 = %w107
    field %w110 = %w108 * %w109
    %w105 = %w105 * %w110 + %w110 - %w108 - %w109 + 1 <Field>
    %w106 = %w106 + 1 <U32>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w69
    assert %o8 == %w89
    assert %o9 == %w60
    assert %o10 == %w106
    assert %o11 == %w64
    assert %o12 == %w90
    assert %o13 == %w62
    assert %o14 == %w72
    assert %o15 == %w73
    assert %o16 == %w61
    assert %o17 == %w91
    assert %o18 == %w92
    assert %o19 == %w93
    assert %o20 == %w94
    assert %o21 == %w75
    assert %o22 == %w95
    assert %o23 == %w96
    assert %o24 == %w105
    assert %o25 == %w78
    assert %o26 == %w97
    assert %o27 == %w98
    assert %o28 == %w99
    assert %o29 == %w100
    assert %o30 == %w101
    assert %o31 == %w102
    assert %o32 == %w63
    assert %o33 == %w54
    assert %o34 == %w55
    assert %o35 == %w56
    assert %o36 == %w57
    assert %o37 == %w58
    assert %o38 == %w59
    assert %o39 == %w103
    assert %o40 == %w104
    assert %o1(BN) == %w106 != %w90 ? 6 <Field> : 7 <Field>
Transition:
    %w106 != %w90 ? -> 6 : -> 7

Block 7:
Func: eq_eval, Scope: 1
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): u32
    %i8: field
    %i9: u32
    %i11: u32
    %i13: u32
    %i14: field
    %i15: field
    %i16: u32
    %i17: field
    %i18: field
    %i19: field
    %i20: field
    %i21: field
    %i22: field
    %i23: field
    %i24: field
    %i25: u32
    %i26: field
    %i27: field
    %i28: u32
    %i29: u32
    %i30: u32
    %i31: field
    %i32: field
    %i33: field
    %i34: u32
    %i35: field
    %i36: u32
    %i37: field
    %i38: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o2(RET): field
    %o5(RP): field
    %o3(TS): field
    %o8: u32
    %o9: field
    %o10: u32
    %o11: u32
    %o12: u32
    %o13: field
    %o14: field
    %o15: u32
    %o16: field
    %o17: field
    %o18: field
    %o19: field
    %o20: field
    %o21: field
    %o22: field
    %o23: u32
    %o24: field
    %o25: u32
    %o26: u32
    %o27: u32
    %o28: field
    %o29: field
    %o30: field
    %o31: u32
    %o32: field
    %o33: u32
    %o34: field
    %o35: field
Instructions:
    assert %i1(BN) == 7 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    u32 %w69 = %i7(BP)
    field %w89 = %i8
    u32 %w60 = %i9
    u32 %w64 = %i11
    u32 %w62 = %i13
    field %w72 = %i14
    field %w73 = %i15
    u32 %w61 = %i16
    field %w91 = %i17
    field %w92 = %i18
    field %w93 = %i19
    field %w94 = %i20
    field %w75 = %i21
    field %w95 = %i22
    field %w96 = %i23
    field %w105 = %i24
    u32 %w78 = %i25
    field %w97 = %i26
    field %w98 = %i27
    u32 %w99 = %i28
    u32 %w100 = %i29
    u32 %w101 = %i30
    field %w102 = %i31
    field %w63 = %i32
    field %w54 = %i33
    u32 %w55 = %i34
    field %w56 = %i35
    u32 %w57 = %i36
    field %w58 = %i37
    field %w59 = %i38
    field %w111 = %w105
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o2(RET) == %w111
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o8 == %w69
    assert %o9 == %w89
    assert %o10 == %w60
    assert %o11 == %w64
    assert %o12 == %w62
    assert %o13 == %w72
    assert %o14 == %w73
    assert %o15 == %w61
    assert %o16 == %w91
    assert %o17 == %w92
    assert %o18 == %w93
    assert %o19 == %w94
    assert %o20 == %w75
    assert %o21 == %w95
    assert %o22 == %w96
    assert %o23 == %w78
    assert %o24 == %w98
    assert %o25 == %w99
    assert %o26 == %w100
    assert %o27 == %w101
    assert %o28 == %w102
    assert %o29 == %w63
    assert %o30 == %w54
    assert %o31 == %w55
    assert %o32 == %w56
    assert %o33 == %w57
    assert %o34 == %w58
    assert %o35 == %w59
    assert %o1(BN) == %w97
Transition: -> %w97

Block 8:
Func: mle_eval, Scope: 0
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i31: field
    %i32: field
    %i8: field
    %i9: u32
    %i10: u32
    %i33: u32
    %i11: field
    %i12: field
    %i13: u32
    %i14: field
    %i15: u32
    %i16: field
    %i17: u32
    %i34: field
    %i18: u32
    %i19: u32
    %i20: field
    %i21: u32
    %i22: field
    %i23: field
    %i24: field
    %i25: field
    %i26: u32
    %i27: field
    %i28: u32
    %i29: field
    %i30: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: field
    %o9: field
    %o10: field
    %o11: u32
    %o12: u32
    %o13: u32
    %o14: u32
    %o15: field
    %o16: field
    %o17: u32
    %o18: field
    %o19: u32
    %o20: field
    %o21: u32
    %o22: field
    %o23: u32
    %o24: u32
    %o25: field
    %o26: u32
    %o27: field
    %o28: field
    %o29: field
    %o30: field
    %o31: u32
    %o32: field
    %o33: u32
    %o34: field
    %o35: field
Instructions:
    assert %i1(BN) == 8 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w112 = %i7(BP)
    field %w113 = %i31
    field %w114 = %i32
    field %w68 = %i8
    u32 %w60 = %i9
    u32 %w115 = %i10
    u32 %w116 = %i33
    field %w117 = %i11
    field %w53 = %i12
    u32 %w65 = %i13
    field %w52 = %i14
    u32 %w64 = %i15
    field %w118 = %i16
    u32 %w62 = %i17
    field %w119 = %i34
    u32 %w120 = %i18
    u32 %w61 = %i19
    field %w121 = %i20
    u32 %w122 = %i21
    field %w123 = %i22
    field %w124 = %i23
    field %w63 = %i24
    field %w54 = %i25
    u32 %w55 = %i26
    field %w56 = %i27
    u32 %w57 = %i28
    field %w58 = %i29
    field %w59 = %i30
    u32 %w125 = 0 <U32>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w112
    assert %o8 == %w113
    assert %o9 == %w114
    assert %o10 == %w68
    assert %o11 == %w60
    assert %o12 == %w125
    assert %o13 == %w115
    assert %o14 == %w116
    assert %o15 == %w117
    assert %o16 == %w53
    assert %o17 == %w65
    assert %o18 == %w52
    assert %o19 == %w64
    assert %o20 == %w118
    assert %o21 == %w62
    assert %o22 == %w119
    assert %o23 == %w120
    assert %o24 == %w61
    assert %o25 == %w121
    assert %o26 == %w122
    assert %o27 == %w123
    assert %o28 == %w124
    assert %o29 == %w63
    assert %o30 == %w54
    assert %o31 == %w55
    assert %o32 == %w56
    assert %o33 == %w57
    assert %o34 == %w58
    assert %o35 == %w59
    assert %o1(BN) == %w125 != %w122 ? 9 <Field> : 12 <Field>
Transition:
    %w125 != %w122 ? -> 9 : -> 12

Block 9:
Func: mle_eval, Scope: 2
Exec Bound: 1, While Loop: true, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: field
    %i9: field
    %i10: field
    %i11: u32
    %i12: u32
    %i13: u32
    %i14: u32
    %i15: field
    %i16: field
    %i17: u32
    %i18: field
    %i19: u32
    %i20: field
    %i21: u32
    %i22: field
    %i23: u32
    %i24: u32
    %i25: field
    %i26: u32
    %i27: field
    %i28: field
    %i29: field
    %i30: field
    %i31: u32
    %i32: field
    %i33: u32
    %i34: field
    %i35: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: field
    %o9: field
    %o10: field
    %o11: u32
    %o12: u32
    %o13: u32
    %o14: u32
    %o15: field
    %o16: field
    %o17: u32
    %o18: field
    %o19: u32
    %o20: field
    %o21: u32
    %o22: u32
    %o23: field
    %o24: u32
    %o25: u32
    %o26: field
    %o27: u32
    %o28: field
    %o29: field
    %o30: field
    %o31: field
    %o32: u32
    %o33: field
    %o34: u32
    %o35: field
    %o36: field
Instructions:
    assert %i1(BN) == 9 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w112 = %i7(BP)
    field %w113 = %i8
    field %w114 = %i9
    field %w68 = %i10
    u32 %w60 = %i11
    u32 %w125 = %i12
    u32 %w115 = %i13
    u32 %w116 = %i14
    field %w117 = %i15
    field %w53 = %i16
    u32 %w65 = %i17
    field %w52 = %i18
    u32 %w64 = %i19
    field %w118 = %i20
    u32 %w62 = %i21
    field %w119 = %i22
    u32 %w120 = %i23
    u32 %w61 = %i24
    field %w121 = %i25
    u32 %w122 = %i26
    field %w123 = %i27
    field %w124 = %i28
    field %w63 = %i29
    field %w54 = %i30
    u32 %w55 = %i31
    field %w56 = %i32
    u32 %w57 = %i33
    field %w58 = %i34
    field %w59 = %i35
    %w120 = %w120 / 2 <U32>
    u32 %w126 = 0 <U32>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w112
    assert %o8 == %w113
    assert %o9 == %w114
    assert %o10 == %w68
    assert %o11 == %w60
    assert %o12 == %w125
    assert %o13 == %w115
    assert %o14 == %w116
    assert %o15 == %w117
    assert %o16 == %w53
    assert %o17 == %w65
    assert %o18 == %w52
    assert %o19 == %w64
    assert %o20 == %w118
    assert %o21 == %w126
    assert %o22 == %w62
    assert %o23 == %w119
    assert %o24 == %w120
    assert %o25 == %w61
    assert %o26 == %w121
    assert %o27 == %w122
    assert %o28 == %w123
    assert %o29 == %w124
    assert %o30 == %w63
    assert %o31 == %w54
    assert %o32 == %w55
    assert %o33 == %w56
    assert %o34 == %w57
    assert %o35 == %w58
    assert %o36 == %w59
    assert %o1(BN) == %w126 != %w120 ? 10 <Field> : 11 <Field>
Transition:
    %w126 != %w120 ? -> 10 : -> 11

Block 10:
Func: mle_eval, Scope: 5
Exec Bound: 1, While Loop: true, Num VM Ops: 5
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: field
    %i9: field
    %i10: field
    %i11: u32
    %i12: u32
    %i13: u32
    %i14: u32
    %i15: field
    %i16: field
    %i17: u32
    %i18: field
    %i19: u32
    %i20: field
    %i21: u32
    %i22: u32
    %i23: field
    %i24: u32
    %i25: u32
    %i26: field
    %i27: u32
    %i28: field
    %i29: field
    %i30: field
    %i31: field
    %i32: u32
    %i33: field
    %i34: u32
    %i35: field
    %i36: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: field
    %o9: field
    %o10: field
    %o11: u32
    %o12: u32
    %o13: u32
    %o14: u32
    %o15: field
    %o16: field
    %o17: u32
    %o18: field
    %o19: u32
    %o20: field
    %o21: u32
    %o22: u32
    %o23: field
    %o24: u32
    %o25: u32
    %o26: field
    %o27: u32
    %o28: field
    %o29: field
    %o30: field
    %o31: field
    %o32: u32
    %o33: field
    %o34: u32
    %o35: field
    %o36: field
Instructions:
    assert %i1(BN) == 10 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w112 = %i7(BP)
    field %w113 = %i8
    field %w114 = %i9
    field %w68 = %i10
    u32 %w60 = %i11
    u32 %w125 = %i12
    u32 %w115 = %i13
    u32 %w116 = %i14
    field %w117 = %i15
    field %w53 = %i16
    u32 %w65 = %i17
    field %w52 = %i18
    u32 %w64 = %i19
    field %w118 = %i20
    u32 %w126 = %i21
    u32 %w62 = %i22
    field %w119 = %i23
    u32 %w120 = %i24
    u32 %w61 = %i25
    field %w121 = %i26
    u32 %w122 = %i27
    field %w123 = %i28
    field %w124 = %i29
    field %w63 = %i30
    field %w54 = %i31
    u32 %w55 = %i32
    field %w56 = %i33
    u32 %w57 = %i34
    field %w58 = %i35
    field %w59 = %i36
    field %w127 = %w121[%w125]
    field %w128 = %w124[%w126]
    field %w129 = %w121[%w125]
    field %w130 = %w124[%w120 + %w126]
    %w124[%w126] = 1 <Field> - %w127 * %w128 + %w129 * %w130 <field>
    %w126 = %w126 + 1 <U32>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w112
    assert %o8 == %w113
    assert %o9 == %w114
    assert %o10 == %w68
    assert %o11 == %w60
    assert %o12 == %w125
    assert %o13 == %w115
    assert %o14 == %w116
    assert %o15 == %w117
    assert %o16 == %w53
    assert %o17 == %w65
    assert %o18 == %w52
    assert %o19 == %w64
    assert %o20 == %w118
    assert %o21 == %w126
    assert %o22 == %w62
    assert %o23 == %w119
    assert %o24 == %w120
    assert %o25 == %w61
    assert %o26 == %w121
    assert %o27 == %w122
    assert %o28 == %w123
    assert %o29 == %w124
    assert %o30 == %w63
    assert %o31 == %w54
    assert %o32 == %w55
    assert %o33 == %w56
    assert %o34 == %w57
    assert %o35 == %w58
    assert %o36 == %w59
    assert %o1(BN) == %w126 != %w120 ? 10 <Field> : 11 <Field>
Transition:
    %w126 != %w120 ? -> 10 : -> 11

Block 11:
Func: mle_eval, Scope: 4
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: field
    %i9: field
    %i10: field
    %i11: u32
    %i12: u32
    %i13: u32
    %i14: u32
    %i15: field
    %i16: field
    %i17: u32
    %i18: field
    %i19: u32
    %i20: field
    %i22: u32
    %i23: field
    %i24: u32
    %i25: u32
    %i26: field
    %i27: u32
    %i28: field
    %i29: field
    %i30: field
    %i31: field
    %i32: u32
    %i33: field
    %i34: u32
    %i35: field
    %i36: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: field
    %o9: field
    %o10: field
    %o11: u32
    %o12: u32
    %o13: u32
    %o14: u32
    %o15: field
    %o16: field
    %o17: u32
    %o18: field
    %o19: u32
    %o20: field
    %o21: u32
    %o22: field
    %o23: u32
    %o24: u32
    %o25: field
    %o26: u32
    %o27: field
    %o28: field
    %o29: field
    %o30: field
    %o31: u32
    %o32: field
    %o33: u32
    %o34: field
    %o35: field
Instructions:
    assert %i1(BN) == 11 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w112 = %i7(BP)
    field %w113 = %i8
    field %w114 = %i9
    field %w68 = %i10
    u32 %w60 = %i11
    u32 %w125 = %i12
    u32 %w115 = %i13
    u32 %w116 = %i14
    field %w117 = %i15
    field %w53 = %i16
    u32 %w65 = %i17
    field %w52 = %i18
    u32 %w64 = %i19
    field %w118 = %i20
    u32 %w62 = %i22
    field %w119 = %i23
    u32 %w120 = %i24
    u32 %w61 = %i25
    field %w121 = %i26
    u32 %w122 = %i27
    field %w123 = %i28
    field %w124 = %i29
    field %w63 = %i30
    field %w54 = %i31
    u32 %w55 = %i32
    field %w56 = %i33
    u32 %w57 = %i34
    field %w58 = %i35
    field %w59 = %i36
    %w125 = %w125 + 1 <U32>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w112
    assert %o8 == %w113
    assert %o9 == %w114
    assert %o10 == %w68
    assert %o11 == %w60
    assert %o12 == %w125
    assert %o13 == %w115
    assert %o14 == %w116
    assert %o15 == %w117
    assert %o16 == %w53
    assert %o17 == %w65
    assert %o18 == %w52
    assert %o19 == %w64
    assert %o20 == %w118
    assert %o21 == %w62
    assert %o22 == %w119
    assert %o23 == %w120
    assert %o24 == %w61
    assert %o25 == %w121
    assert %o26 == %w122
    assert %o27 == %w123
    assert %o28 == %w124
    assert %o29 == %w63
    assert %o30 == %w54
    assert %o31 == %w55
    assert %o32 == %w56
    assert %o33 == %w57
    assert %o34 == %w58
    assert %o35 == %w59
    assert %o1(BN) == %w125 != %w122 ? 9 <Field> : 12 <Field>
Transition:
    %w125 != %w122 ? -> 9 : -> 12

Block 12:
Func: mle_eval, Scope: 1
Exec Bound: 1, While Loop: false, Num VM Ops: 1
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: field
    %i9: field
    %i10: field
    %i11: u32
    %i13: u32
    %i14: u32
    %i15: field
    %i16: field
    %i17: u32
    %i18: field
    %i19: u32
    %i20: field
    %i21: u32
    %i22: field
    %i24: u32
    %i27: field
    %i28: field
    %i29: field
    %i30: field
    %i31: u32
    %i32: field
    %i33: u32
    %i34: field
    %i35: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o2(RET): field
    %o5(RP): field
    %o3(TS): field
    %o8: field
    %o9: field
    %o10: field
    %o11: field
    %o12: u32
    %o13: u32
    %o14: u32
    %o15: field
    %o16: field
    %o17: u32
    %o18: field
    %o19: u32
    %o20: field
    %o21: u32
    %o22: field
    %o23: u32
    %o24: field
    %o25: field
    %o26: u32
    %o27: field
    %o28: u32
    %o29: field
    %o30: field
Instructions:
    assert %i1(BN) == 12 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w112 = %i7(BP)
    field %w113 = %i8
    field %w114 = %i9
    field %w68 = %i10
    u32 %w60 = %i11
    u32 %w115 = %i13
    u32 %w116 = %i14
    field %w117 = %i15
    field %w53 = %i16
    u32 %w65 = %i17
    field %w52 = %i18
    u32 %w64 = %i19
    field %w118 = %i20
    u32 %w62 = %i21
    field %w119 = %i22
    u32 %w61 = %i24
    field %w123 = %i27
    field %w124 = %i28
    field %w63 = %i29
    field %w54 = %i30
    u32 %w55 = %i31
    field %w56 = %i32
    u32 %w57 = %i33
    field %w58 = %i34
    field %w59 = %i35
    field %w131 = %w124[0 <Field>]
    field %w132 = %w131
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o2(RET) == %w132
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o8 == %w112
    assert %o9 == %w113
    assert %o10 == %w114
    assert %o11 == %w68
    assert %o12 == %w60
    assert %o13 == %w115
    assert %o14 == %w116
    assert %o15 == %w117
    assert %o16 == %w53
    assert %o17 == %w65
    assert %o18 == %w52
    assert %o19 == %w64
    assert %o20 == %w118
    assert %o21 == %w62
    assert %o22 == %w119
    assert %o23 == %w61
    assert %o24 == %w63
    assert %o25 == %w54
    assert %o26 == %w55
    assert %o27 == %w56
    assert %o28 == %w57
    assert %o29 == %w58
    assert %o30 == %w59
    assert %o1(BN) == %w123
Transition: -> %w123

Block 13:
Func: main, Scope: 8
Exec Bound: 1, While Loop: true, Num VM Ops: 3
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: u32
    %i9: u32
    %i10: field
    %i11: u32
    %i12: u32
    %i13: u32
    %i14: field
    %i15: field
    %i16: u32
    %i17: field
    %i18: field
    %i19: u32
    %i20: u32
    %i21: field
    %i22: u32
    %i23: u32
    %i24: field
    %i25: field
    %i26: field
    %i27: u32
    %i28: field
    %i29: u32
    %i30: field
    %i31: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: field
    %o9: u32
    %o10: field
    %o11: u32
    %o12: field
    %o13: field
    %o14: u32
    %o15: field
    %o16: u32
    %o17: u32
    %o18: u32
    %o19: u32
    %o20: field
    %o21: field
    %o22: u32
    %o23: field
    %o24: field
    %o25: field
    %o26: field
    %o27: field
    %o28: u32
    %o29: u32
    %o30: field
    %o31: u32
    %o32: u32
    %o33: field
    %o34: field
    %o35: field
    %o36: u32
    %o37: field
    %o38: u32
    %o39: field
    %o40: field
Instructions:
    assert %i1(BN) == 13 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    u32 %w69 = %i8
    u32 %w60 = %i9
    field %w133 = %i10
    u32 %w134 = %i11
    u32 %w64 = %i12
    u32 %w62 = %i13
    field %w72 = %i14
    field %w73 = %i15
    u32 %w61 = %i16
    field %w91 = %i17
    field %w75 = %i18
    u32 %w78 = %i19
    u32 %w99 = %i20
    field %w135 = %i21
    u32 %w136 = %i22
    u32 %w137 = %i23
    field %w138 = %i24
    field %w63 = %i25
    field %w54 = %i26
    u32 %w55 = %i27
    field %w56 = %i28
    u32 %w57 = %i29
    field %w58 = %i30
    field %w59 = %i31
    field %w139 = %w138[%w134]
    field %w140 = %w139
    field %w141 = %w135[%w134]
    field %w142 = %w141
    u32 %w143 = %w136 + 1 <U32>
    field %w144 = %w140
    field %w145 = %w142
    u32 %w146 = %w143
    field[%w146] %w147
    field %w148 = %w145
    %w147[0 <Field>] = %w145 <field>
    field %w149 = 0 <Field>
    field %w150 = 1 <Field>
    u32 %w151 = 1 <U32>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w68
    assert %o8 == %w150
    assert %o9 == %w151
    assert %o10 == %w145
    assert %o11 == %w69
    assert %o12 == %w147
    assert %o13 == %w140
    assert %o14 == %w60
    assert %o15 == %w133
    assert %o16 == %w134
    assert %o17 == %w64
    assert %o18 == %w146
    assert %o19 == %w62
    assert %o20 == %w72
    assert %o21 == %w73
    assert %o22 == %w61
    assert %o23 == %w91
    assert %o24 == %w144
    assert %o25 == %w148
    assert %o26 == %w75
    assert %o27 == %w149
    assert %o28 == %w78
    assert %o29 == %w99
    assert %o30 == %w135
    assert %o31 == %w136
    assert %o32 == %w137
    assert %o33 == %w138
    assert %o34 == %w63
    assert %o35 == %w54
    assert %o36 == %w55
    assert %o37 == %w56
    assert %o38 == %w57
    assert %o39 == %w58
    assert %o40 == %w59
    assert %o1(BN) == %w151 != %w146 ? 15 <Field> : 16 <Field>
Transition:
    %w151 != %w146 ? -> 15 : -> 16

Block 14:
Func: main, Scope: 7
Exec Bound: 1, While Loop: false, Num VM Ops: 1
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: u32
    %i9: u32
    %i10: field
    %i12: u32
    %i13: u32
    %i14: field
    %i15: field
    %i16: u32
    %i17: field
    %i18: field
    %i19: u32
    %i20: u32
    %i21: field
    %i23: u32
    %i25: field
    %i26: field
    %i27: u32
    %i28: field
    %i29: u32
    %i30: field
    %i31: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o7(BP): field
    %o8: field
    %o5(RP): field
    %o3(TS): field
    %o9: field
    %o10: u32
    %o11: u32
    %o12: u32
    %o13: u32
    %o14: field
    %o15: field
    %o16: u32
    %o17: field
    %o18: field
    %o19: u32
    %o20: u32
    %o21: field
    %o22: field
    %o23: u32
    %o24: field
    %o25: u32
    %o26: field
    %o27: field
Instructions:
    assert %i1(BN) == 14 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    u32 %w69 = %i8
    u32 %w60 = %i9
    field %w133 = %i10
    u32 %w64 = %i12
    u32 %w62 = %i13
    field %w72 = %i14
    field %w73 = %i15
    u32 %w61 = %i16
    field %w91 = %i17
    field %w75 = %i18
    u32 %w78 = %i19
    u32 %w99 = %i20
    field %w135 = %i21
    u32 %w137 = %i23
    field %w63 = %i25
    field %w54 = %i26
    u32 %w55 = %i27
    field %w56 = %i28
    u32 %w57 = %i29
    field %w58 = %i30
    field %w59 = %i31
    field %w152 = %w133[%w137]
    field %w153 = %w135
    field %w154 = %w152
    field %w155 = %w154
    field %w156 = %w153
    field %w157 = %w155
    field %w158 = %w156
    field %w159 = %w157
    field %w160 = %w158
    %w155 = %w159
    %w156 = %w160
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o7(BP) == %w155
    assert %o8 == %w156
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o9 == %w68
    assert %o10 == %w69
    assert %o11 == %w60
    assert %o12 == %w64
    assert %o13 == %w62
    assert %o14 == %w72
    assert %o15 == %w73
    assert %o16 == %w61
    assert %o17 == %w91
    assert %o18 == %w75
    assert %o19 == %w78
    assert %o20 == %w99
    assert %o21 == %w63
    assert %o22 == %w54
    assert %o23 == %w55
    assert %o24 == %w56
    assert %o25 == %w57
    assert %o26 == %w58
    assert %o27 == %w59
    assert %o1(BN) == 42 <Field>
Transition: -> 42

Block 15:
Func: main, Scope: 12
Exec Bound: 1, While Loop: true, Num VM Ops: 1
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: field
    %i9: u32
    %i10: field
    %i11: u32
    %i12: field
    %i13: field
    %i14: u32
    %i15: field
    %i16: u32
    %i17: u32
    %i18: u32
    %i19: u32
    %i20: field
    %i21: field
    %i22: u32
    %i23: field
    %i24: field
    %i25: field
    %i26: field
    %i27: field
    %i28: u32
    %i29: u32
    %i30: field
    %i31: u32
    %i32: u32
    %i33: field
    %i34: field
    %i35: field
    %i36: u32
    %i37: field
    %i38: u32
    %i39: field
    %i40: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: field
    %o9: u32
    %o10: field
    %o11: u32
    %o12: field
    %o13: field
    %o14: u32
    %o15: field
    %o16: u32
    %o17: u32
    %o18: u32
    %o19: u32
    %o20: field
    %o21: field
    %o22: u32
    %o23: field
    %o24: field
    %o25: field
    %o26: field
    %o27: field
    %o28: u32
    %o29: u32
    %o30: field
    %o31: u32
    %o32: u32
    %o33: field
    %o34: field
    %o35: field
    %o36: u32
    %o37: field
    %o38: u32
    %o39: field
    %o40: field
Instructions:
    assert %i1(BN) == 15 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    field %w150 = %i8
    u32 %w151 = %i9
    field %w145 = %i10
    u32 %w69 = %i11
    field %w147 = %i12
    field %w140 = %i13
    u32 %w60 = %i14
    field %w133 = %i15
    u32 %w134 = %i16
    u32 %w64 = %i17
    u32 %w146 = %i18
    u32 %w62 = %i19
    field %w72 = %i20
    field %w73 = %i21
    u32 %w61 = %i22
    field %w91 = %i23
    field %w144 = %i24
    field %w148 = %i25
    field %w75 = %i26
    field %w149 = %i27
    u32 %w78 = %i28
    u32 %w99 = %i29
    field %w135 = %i30
    u32 %w136 = %i31
    u32 %w137 = %i32
    field %w138 = %i33
    field %w63 = %i34
    field %w54 = %i35
    u32 %w55 = %i36
    field %w56 = %i37
    u32 %w57 = %i38
    field %w58 = %i39
    field %w59 = %i40
    field %w161 = %w145 - (F)%w151
    %w147[%w151] = %w161 <field>
    %w148 = %w148 * %w161
    %w150 = %w150 * (F)%w151
    %w151 = %w151 + 1 <U32>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w68
    assert %o8 == %w150
    assert %o9 == %w151
    assert %o10 == %w145
    assert %o11 == %w69
    assert %o12 == %w147
    assert %o13 == %w140
    assert %o14 == %w60
    assert %o15 == %w133
    assert %o16 == %w134
    assert %o17 == %w64
    assert %o18 == %w146
    assert %o19 == %w62
    assert %o20 == %w72
    assert %o21 == %w73
    assert %o22 == %w61
    assert %o23 == %w91
    assert %o24 == %w144
    assert %o25 == %w148
    assert %o26 == %w75
    assert %o27 == %w149
    assert %o28 == %w78
    assert %o29 == %w99
    assert %o30 == %w135
    assert %o31 == %w136
    assert %o32 == %w137
    assert %o33 == %w138
    assert %o34 == %w63
    assert %o35 == %w54
    assert %o36 == %w55
    assert %o37 == %w56
    assert %o38 == %w57
    assert %o39 == %w58
    assert %o40 == %w59
    assert %o1(BN) == %w151 != %w146 ? 15 <Field> : 16 <Field>
Transition:
    %w151 != %w146 ? -> 15 : -> 16

Block 16:
Func: main, Scope: 11
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: field
    %i11: u32
    %i12: field
    %i13: field
    %i14: u32
    %i15: field
    %i16: u32
    %i17: u32
    %i18: u32
    %i19: u32
    %i20: field
    %i21: field
    %i22: u32
    %i23: field
    %i24: field
    %i25: field
    %i26: field
    %i27: field
    %i28: u32
    %i29: u32
    %i30: field
    %i31: u32
    %i32: u32
    %i33: field
    %i34: field
    %i35: field
    %i36: u32
    %i37: field
    %i38: u32
    %i39: field
    %i40: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: field
    %o9: field
    %o10: u32
    %o11: field
    %o12: field
    %o13: u32
    %o14: field
    %o15: u32
    %o16: u32
    %o17: u32
    %o18: u32
    %o19: u32
    %o20: field
    %o21: field
    %o22: u32
    %o23: field
    %o24: field
    %o25: field
    %o26: field
    %o27: field
    %o28: u32
    %o29: u32
    %o30: field
    %o31: u32
    %o32: u32
    %o33: field
    %o34: field
    %o35: field
    %o36: u32
    %o37: field
    %o38: u32
    %o39: field
    %o40: field
Instructions:
    assert %i1(BN) == 16 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    field %w150 = %i8
    u32 %w69 = %i11
    field %w147 = %i12
    field %w140 = %i13
    u32 %w60 = %i14
    field %w133 = %i15
    u32 %w134 = %i16
    u32 %w64 = %i17
    u32 %w146 = %i18
    u32 %w62 = %i19
    field %w72 = %i20
    field %w73 = %i21
    u32 %w61 = %i22
    field %w91 = %i23
    field %w144 = %i24
    field %w148 = %i25
    field %w75 = %i26
    field %w149 = %i27
    u32 %w78 = %i28
    u32 %w99 = %i29
    field %w135 = %i30
    u32 %w136 = %i31
    u32 %w137 = %i32
    field %w138 = %i33
    field %w63 = %i34
    field %w54 = %i35
    u32 %w55 = %i36
    field %w56 = %i37
    u32 %w57 = %i38
    field %w58 = %i39
    field %w59 = %i40
    field %w162 = 1 <Field>
    u32 %w163 = %w146
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w68
    assert %o8 == %w162
    assert %o9 == %w150
    assert %o10 == %w69
    assert %o11 == %w147
    assert %o12 == %w140
    assert %o13 == %w60
    assert %o14 == %w133
    assert %o15 == %w134
    assert %o16 == %w64
    assert %o17 == %w163
    assert %o18 == %w146
    assert %o19 == %w62
    assert %o20 == %w72
    assert %o21 == %w73
    assert %o22 == %w61
    assert %o23 == %w91
    assert %o24 == %w144
    assert %o25 == %w148
    assert %o26 == %w75
    assert %o27 == %w149
    assert %o28 == %w78
    assert %o29 == %w99
    assert %o30 == %w135
    assert %o31 == %w136
    assert %o32 == %w137
    assert %o33 == %w138
    assert %o34 == %w63
    assert %o35 == %w54
    assert %o36 == %w55
    assert %o37 == %w56
    assert %o38 == %w57
    assert %o39 == %w58
    assert %o40 == %w59
    assert %o1(BN) == %w163 > 0 <U32> ? 17 <Field> : 18 <Field>
Transition:
    %w163 > 0 <U32> ? -> 17 : -> 18

Block 17:
Func: main, Scope: 11
Exec Bound: 1, While Loop: true, Num VM Ops: 2
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: field
    %i9: field
    %i10: u32
    %i11: field
    %i12: field
    %i13: u32
    %i14: field
    %i15: u32
    %i16: u32
    %i17: u32
    %i18: u32
    %i19: u32
    %i20: field
    %i21: field
    %i22: u32
    %i23: field
    %i24: field
    %i25: field
    %i26: field
    %i27: field
    %i28: u32
    %i29: u32
    %i30: field
    %i31: u32
    %i32: u32
    %i33: field
    %i34: field
    %i35: field
    %i36: u32
    %i37: field
    %i38: u32
    %i39: field
    %i40: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: field
    %o9: field
    %o10: u32
    %o11: field
    %o12: field
    %o13: u32
    %o14: field
    %o15: u32
    %o16: u32
    %o17: u32
    %o18: u32
    %o19: u32
    %o20: field
    %o21: field
    %o22: u32
    %o23: field
    %o24: field
    %o25: field
    %o26: field
    %o27: field
    %o28: u32
    %o29: u32
    %o30: field
    %o31: u32
    %o32: u32
    %o33: field
    %o34: field
    %o35: field
    %o36: u32
    %o37: field
    %o38: u32
    %o39: field
    %o40: field
Instructions:
    assert %i1(BN) == 17 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    field %w162 = %i8
    field %w150 = %i9
    u32 %w69 = %i10
    field %w147 = %i11
    field %w140 = %i12
    u32 %w60 = %i13
    field %w133 = %i14
    u32 %w134 = %i15
    u32 %w64 = %i16
    u32 %w163 = %i17
    u32 %w146 = %i18
    u32 %w62 = %i19
    field %w72 = %i20
    field %w73 = %i21
    u32 %w61 = %i22
    field %w91 = %i23
    field %w144 = %i24
    field %w148 = %i25
    field %w75 = %i26
    field %w149 = %i27
    u32 %w78 = %i28
    u32 %w99 = %i29
    field %w135 = %i30
    u32 %w136 = %i31
    u32 %w137 = %i32
    field %w138 = %i33
    field %w63 = %i34
    field %w54 = %i35
    u32 %w55 = %i36
    field %w56 = %i37
    u32 %w57 = %i38
    field %w58 = %i39
    field %w59 = %i40
    u32 %w164 = %w163 - 1 <U32>
    field %w165 = %w144[%w164]
    field %w166 = %w147[%w164]
    %w149 = %w149 + %w165 * %w148 * %w162 / %w150 * %w166
    if %w164 != 0 <U32>:
        %w150 = -1 <Field> * %w150 * (F)%w146 - %w164
        %w162 = %w162 * (F)%w164
    %w163 = %w163 - 1 <U32>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w68
    assert %o8 == %w162
    assert %o9 == %w150
    assert %o10 == %w69
    assert %o11 == %w147
    assert %o12 == %w140
    assert %o13 == %w60
    assert %o14 == %w133
    assert %o15 == %w134
    assert %o16 == %w64
    assert %o17 == %w163
    assert %o18 == %w146
    assert %o19 == %w62
    assert %o20 == %w72
    assert %o21 == %w73
    assert %o22 == %w61
    assert %o23 == %w91
    assert %o24 == %w144
    assert %o25 == %w148
    assert %o26 == %w75
    assert %o27 == %w149
    assert %o28 == %w78
    assert %o29 == %w99
    assert %o30 == %w135
    assert %o31 == %w136
    assert %o32 == %w137
    assert %o33 == %w138
    assert %o34 == %w63
    assert %o35 == %w54
    assert %o36 == %w55
    assert %o37 == %w56
    assert %o38 == %w57
    assert %o39 == %w58
    assert %o40 == %w59
    assert %o1(BN) == %w163 > 0 <U32> ? 17 <Field> : 18 <Field>
Transition:
    %w163 > 0 <U32> ? -> 17 : -> 18

Block 18:
Func: main, Scope: 10
Exec Bound: 1, While Loop: false, Num VM Ops: 4
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i10: u32
    %i12: field
    %i13: u32
    %i14: field
    %i15: u32
    %i16: u32
    %i19: u32
    %i20: field
    %i21: field
    %i22: u32
    %i23: field
    %i26: field
    %i27: field
    %i28: u32
    %i29: u32
    %i30: field
    %i31: u32
    %i32: u32
    %i33: field
    %i34: field
    %i35: field
    %i36: u32
    %i37: field
    %i38: u32
    %i39: field
    %i40: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: u32
    %o9: u32
    %o10: field
    %o11: u32
    %o12: u32
    %o13: u32
    %o14: field
    %o15: field
    %o16: u32
    %o17: field
    %o18: field
    %o19: u32
    %o20: u32
    %o21: field
    %o22: u32
    %o23: u32
    %o24: field
    %o25: field
    %o26: field
    %o27: u32
    %o28: field
    %o29: u32
    %o30: field
    %o31: field
Instructions:
    assert %i1(BN) == 18 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    u32 %w69 = %i10
    field %w140 = %i12
    u32 %w60 = %i13
    field %w133 = %i14
    u32 %w134 = %i15
    u32 %w64 = %i16
    u32 %w62 = %i19
    field %w72 = %i20
    field %w73 = %i21
    u32 %w61 = %i22
    field %w91 = %i23
    field %w75 = %i26
    field %w149 = %i27
    u32 %w78 = %i28
    u32 %w99 = %i29
    field %w135 = %i30
    u32 %w136 = %i31
    u32 %w137 = %i32
    field %w138 = %i33
    field %w63 = %i34
    field %w54 = %i35
    u32 %w55 = %i36
    field %w56 = %i37
    u32 %w57 = %i38
    field %w58 = %i39
    field %w59 = %i40
    field %w84 = %w149
    field %w167 = %w84
    %w133[%w134 + 1 <U32>] = %w167 <field>
    field %w141 = %w133[%w134]
    field %w168 = %w141
    field %w141 = %w140[0 <Field>]
    field %w169 = %w140[1 <Field>]
    assert %w141 + %w169 == %w168
    %w134 = %w134 + 1 <U32>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w68
    assert %o8 == %w69
    assert %o9 == %w60
    assert %o10 == %w133
    assert %o11 == %w134
    assert %o12 == %w64
    assert %o13 == %w62
    assert %o14 == %w72
    assert %o15 == %w73
    assert %o16 == %w61
    assert %o17 == %w91
    assert %o18 == %w75
    assert %o19 == %w78
    assert %o20 == %w99
    assert %o21 == %w135
    assert %o22 == %w136
    assert %o23 == %w137
    assert %o24 == %w138
    assert %o25 == %w63
    assert %o26 == %w54
    assert %o27 == %w55
    assert %o28 == %w56
    assert %o29 == %w57
    assert %o30 == %w58
    assert %o31 == %w59
    assert %o1(BN) == %w134 != %w137 ? 13 <Field> : 14 <Field>
Transition:
    %w134 != %w137 ? -> 13 : -> 14

Block 19:
Func: main, Scope: 6
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i10: field
    %i11: u32
    %i12: u32
    %i13: u32
    %i14: u32
    %i15: field
    %i16: field
    %i17: u32
    %i18: field
    %i19: field
    %i21: u32
    %i22: u32
    %i23: field
    %i25: field
    %i26: u32
    %i27: field
    %i28: u32
    %i29: field
    %i30: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o7(BP): field
    %o8: field
    %o5(RP): field
    %o3(TS): field
    %o9: field
    %o10: u32
    %o11: u32
    %o12: u32
    %o13: u32
    %o14: field
    %o15: field
    %o16: u32
    %o17: field
    %o18: field
    %o19: u32
    %o20: u32
    %o21: field
    %o22: field
    %o23: u32
    %o24: field
    %o25: u32
    %o26: field
    %o27: field
Instructions:
    assert %i1(BN) == 19 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    field %w170 = %i10
    u32 %w69 = %i11
    u32 %w60 = %i12
    u32 %w64 = %i13
    u32 %w62 = %i14
    field %w72 = %i15
    field %w73 = %i16
    u32 %w61 = %i17
    field %w91 = %i18
    field %w75 = %i19
    u32 %w78 = %i21
    u32 %w99 = %i22
    field %w63 = %i23
    field %w54 = %i25
    u32 %w55 = %i26
    field %w56 = %i27
    u32 %w57 = %i28
    field %w58 = %i29
    field %w59 = %i30
    field[0 <U32>] %w171
    field %w172 = %w171
    field %w173 = %w170
    field %w155 = %w173
    field %w156 = %w172
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o7(BP) == %w155
    assert %o8 == %w156
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o9 == %w68
    assert %o10 == %w69
    assert %o11 == %w60
    assert %o12 == %w64
    assert %o13 == %w62
    assert %o14 == %w72
    assert %o15 == %w73
    assert %o16 == %w61
    assert %o17 == %w91
    assert %o18 == %w75
    assert %o19 == %w78
    assert %o20 == %w99
    assert %o21 == %w63
    assert %o22 == %w54
    assert %o23 == %w55
    assert %o24 == %w56
    assert %o25 == %w57
    assert %o26 == %w58
    assert %o27 == %w59
    assert %o1(BN) == 42 <Field>
Transition: -> 42

Block 20:
Func: main, Scope: 6
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: u32
    %i9: u32
    %i10: field
    %i11: u32
    %i12: u32
    %i13: u32
    %i14: u32
    %i15: field
    %i16: field
    %i17: u32
    %i18: field
    %i19: field
    %i20: field
    %i21: u32
    %i22: u32
    %i23: field
    %i24: field
    %i25: field
    %i26: u32
    %i27: field
    %i28: u32
    %i29: field
    %i30: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: u32
    %o9: u32
    %o10: field
    %o11: u32
    %o12: u32
    %o13: u32
    %o14: u32
    %o15: field
    %o16: field
    %o17: u32
    %o18: field
    %o19: field
    %o20: field
    %o21: u32
    %o22: field
    %o23: u32
    %o24: field
    %o25: field
    %o26: field
    %o27: u32
    %o28: field
    %o29: u32
    %o30: field
    %o31: field
Instructions:
    assert %i1(BN) == 20 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    u32 %w174 = %i8
    u32 %w175 = %i9
    field %w170 = %i10
    u32 %w69 = %i11
    u32 %w60 = %i12
    u32 %w64 = %i13
    u32 %w62 = %i14
    field %w72 = %i15
    field %w73 = %i16
    u32 %w61 = %i17
    field %w91 = %i18
    field %w75 = %i19
    field %w176 = %i20
    u32 %w78 = %i21
    u32 %w99 = %i22
    field %w63 = %i23
    field %w177 = %i24
    field %w54 = %i25
    u32 %w55 = %i26
    field %w56 = %i27
    u32 %w57 = %i28
    field %w58 = %i29
    field %w59 = %i30
    field %w178 = %w177
    field %w179 = 21 <Field>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w68
    assert %o8 == %w174
    assert %o9 == %w175
    assert %o10 == %w170
    assert %o11 == %w69
    assert %o12 == %w60
    assert %o13 == %w64
    assert %o14 == %w62
    assert %o15 == %w72
    assert %o16 == %w73
    assert %o17 == %w61
    assert %o18 == %w91
    assert %o19 == %w75
    assert %o20 == %w176
    assert %o21 == %w78
    assert %o22 == %w179
    assert %o23 == %w99
    assert %o24 == %w178
    assert %o25 == %w63
    assert %o26 == %w54
    assert %o27 == %w55
    assert %o28 == %w56
    assert %o29 == %w57
    assert %o30 == %w58
    assert %o31 == %w59
    assert %o1(BN) == 71 <Field>
Transition: -> 71

Block 21:
Func: main, Scope: 5
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i7(BP): field
    %i5(RP): field
    %i3(TS): field
    %i8: field
    %i9: u32
    %i10: u32
    %i11: field
    %i12: u32
    %i13: u32
    %i14: u32
    %i15: u32
    %i16: field
    %i17: field
    %i18: u32
    %i19: field
    %i20: field
    %i21: field
    %i22: u32
    %i23: u32
    %i24: field
    %i25: field
    %i26: u32
    %i27: field
    %i28: u32
    %i29: field
    %i30: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: u32
    %o9: u32
    %o10: field
    %o11: u32
    %o12: u32
    %o13: u32
    %o14: u32
    %o15: field
    %o16: field
    %o17: u32
    %o18: field
    %o19: field
    %o20: field
    %o21: u32
    %o22: field
    %o23: u32
    %o24: field
    %o25: field
    %o26: field
    %o27: u32
    %o28: field
    %o29: u32
    %o30: field
    %o31: field
Instructions:
    assert %i1(BN) == 21 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w180 = %i7(BP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i8
    u32 %w174 = %i9
    u32 %w175 = %i10
    field %w170 = %i11
    u32 %w69 = %i12
    u32 %w60 = %i13
    u32 %w64 = %i14
    u32 %w62 = %i15
    field %w72 = %i16
    field %w73 = %i17
    u32 %w61 = %i18
    field %w91 = %i19
    field %w75 = %i20
    field %w176 = %i21
    u32 %w78 = %i22
    u32 %w99 = %i23
    field %w63 = %i24
    field %w54 = %i25
    u32 %w55 = %i26
    field %w56 = %i27
    u32 %w57 = %i28
    field %w58 = %i29
    field %w59 = %i30
    field %w181 = %w180
    field %w177 = %w181
    field %w178 = %w177
    field %w179 = 22 <Field>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w68
    assert %o8 == %w174
    assert %o9 == %w175
    assert %o10 == %w170
    assert %o11 == %w69
    assert %o12 == %w60
    assert %o13 == %w64
    assert %o14 == %w62
    assert %o15 == %w72
    assert %o16 == %w73
    assert %o17 == %w61
    assert %o18 == %w91
    assert %o19 == %w75
    assert %o20 == %w176
    assert %o21 == %w78
    assert %o22 == %w179
    assert %o23 == %w99
    assert %o24 == %w178
    assert %o25 == %w63
    assert %o26 == %w54
    assert %o27 == %w55
    assert %o28 == %w56
    assert %o29 == %w57
    assert %o30 == %w58
    assert %o31 == %w59
    assert %o1(BN) == 71 <Field>
Transition: -> 71

Block 22:
Func: main, Scope: 5
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i7(BP): field
    %i5(RP): field
    %i3(TS): field
    %i8: field
    %i9: u32
    %i10: u32
    %i11: field
    %i12: u32
    %i13: u32
    %i14: u32
    %i15: u32
    %i16: field
    %i17: field
    %i18: u32
    %i19: field
    %i20: field
    %i21: field
    %i22: u32
    %i23: u32
    %i24: field
    %i25: field
    %i26: u32
    %i27: field
    %i28: u32
    %i29: field
    %i30: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: u32
    %o9: u32
    %o10: field
    %o11: u32
    %o12: u32
    %o13: u32
    %o14: u32
    %o15: u32
    %o16: field
    %o17: field
    %o18: u32
    %o19: field
    %o20: field
    %o21: field
    %o22: u32
    %o23: u32
    %o24: field
    %o25: field
    %o26: field
    %o27: u32
    %o28: field
    %o29: u32
    %o30: field
    %o31: field
    %o32: field
    %o33: bool
    %o34: u32
    %o35: u32
    %o36: field
    %o37: u32
Instructions:
    assert %i1(BN) == 22 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w180 = %i7(BP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i8
    u32 %w174 = %i9
    u32 %w175 = %i10
    field %w170 = %i11
    u32 %w69 = %i12
    u32 %w60 = %i13
    u32 %w64 = %i14
    u32 %w62 = %i15
    field %w72 = %i16
    field %w73 = %i17
    u32 %w61 = %i18
    field %w91 = %i19
    field %w75 = %i20
    field %w176 = %i21
    u32 %w78 = %i22
    u32 %w99 = %i23
    field %w63 = %i24
    field %w54 = %i25
    u32 %w55 = %i26
    field %w56 = %i27
    u32 %w57 = %i28
    field %w58 = %i29
    field %w59 = %i30
    field %w181 = %w180
    field %w177 = %w181
    field[%w175] %w182
    field[0][%w175] %w183
    u32 %w184 = 1 <U32>
    u32 %w185 = %w175
    u32 %w186 = %w174
    bool %w187 = false
    field %w188 = %w183
    field %w189 = %w182
    field %w190 = %w189
    bool %w191 = %w187
    u32 %w192 = %w186
    u32 %w193 = %w185
    field %w194 = %w188
    u32 %w195 = %w184
    u32 %w196 = 0 <U32>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w68
    assert %o8 == %w174
    assert %o9 == %w175
    assert %o10 == %w170
    assert %o11 == %w69
    assert %o12 == %w60
    assert %o13 == %w196
    assert %o14 == %w64
    assert %o15 == %w62
    assert %o16 == %w72
    assert %o17 == %w73
    assert %o18 == %w61
    assert %o19 == %w91
    assert %o20 == %w75
    assert %o21 == %w176
    assert %o22 == %w78
    assert %o23 == %w99
    assert %o24 == %w63
    assert %o25 == %w177
    assert %o26 == %w54
    assert %o27 == %w55
    assert %o28 == %w56
    assert %o29 == %w57
    assert %o30 == %w58
    assert %o31 == %w59
    assert %o32 == %w190
    assert %o33 == %w191
    assert %o34 == %w192
    assert %o35 == %w193
    assert %o36 == %w194
    assert %o37 == %w195
    assert %o1(BN) == %w196 != %w175 ? 23 <Field> : 27 <Field>
Transition:
    %w196 != %w175 ? -> 23 : -> 27

Block 23:
Func: main, Scope: 7
Exec Bound: 1, While Loop: true, Num VM Ops: 1
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: u32
    %i9: u32
    %i10: field
    %i11: u32
    %i12: u32
    %i13: u32
    %i14: u32
    %i15: u32
    %i16: field
    %i17: field
    %i18: u32
    %i19: field
    %i20: field
    %i21: field
    %i22: u32
    %i23: u32
    %i24: field
    %i25: field
    %i26: field
    %i27: u32
    %i28: field
    %i29: u32
    %i30: field
    %i31: field
    %i32: field
    %i33: bool
    %i34: u32
    %i35: u32
    %i36: field
    %i37: u32
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: u32
    %o9: u32
    %o10: field
    %o11: u32
    %o12: u32
    %o13: u32
    %o14: u32
    %o15: u32
    %o16: u32
    %o17: field
    %o18: field
    %o19: u32
    %o20: field
    %o21: field
    %o22: field
    %o23: field
    %o24: u32
    %o25: u32
    %o26: field
    %o27: field
    %o28: field
    %o29: u32
    %o30: field
    %o31: u32
    %o32: field
    %o33: field
    %o34: field
    %o35: bool
    %o36: u32
    %o37: u32
    %o38: field
    %o39: u32
Instructions:
    assert %i1(BN) == 23 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    u32 %w174 = %i8
    u32 %w175 = %i9
    field %w170 = %i10
    u32 %w69 = %i11
    u32 %w60 = %i12
    u32 %w196 = %i13
    u32 %w64 = %i14
    u32 %w62 = %i15
    field %w72 = %i16
    field %w73 = %i17
    u32 %w61 = %i18
    field %w91 = %i19
    field %w75 = %i20
    field %w176 = %i21
    u32 %w78 = %i22
    u32 %w99 = %i23
    field %w63 = %i24
    field %w177 = %i25
    field %w54 = %i26
    u32 %w55 = %i27
    field %w56 = %i28
    u32 %w57 = %i29
    field %w58 = %i30
    field %w59 = %i31
    field %w190 = %i32
    bool %w191 = %i33
    u32 %w192 = %i34
    u32 %w193 = %i35
    field %w194 = %i36
    u32 %w195 = %i37
    field %w197 = %w176[%w196]
    field %w198 = %w197
    u32 %w199 = 0 <U32>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w68
    assert %o8 == %w174
    assert %o9 == %w175
    assert %o10 == %w170
    assert %o11 == %w69
    assert %o12 == %w60
    assert %o13 == %w196
    assert %o14 == %w64
    assert %o15 == %w199
    assert %o16 == %w62
    assert %o17 == %w72
    assert %o18 == %w73
    assert %o19 == %w61
    assert %o20 == %w91
    assert %o21 == %w75
    assert %o22 == %w176
    assert %o23 == %w198
    assert %o24 == %w78
    assert %o25 == %w99
    assert %o26 == %w63
    assert %o27 == %w177
    assert %o28 == %w54
    assert %o29 == %w55
    assert %o30 == %w56
    assert %o31 == %w57
    assert %o32 == %w58
    assert %o33 == %w59
    assert %o34 == %w190
    assert %o35 == %w191
    assert %o36 == %w192
    assert %o37 == %w193
    assert %o38 == %w194
    assert %o39 == %w195
    assert %o1(BN) == %w199 != %w174 + 1 <U32> ? 24 <Field> : 26 <Field>
Transition:
    %w199 != %w174 + 1 <U32> ? -> 24 : -> 26

Block 24:
Func: main, Scope: 10
Exec Bound: 1, While Loop: true, Num VM Ops: 1
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: u32
    %i9: u32
    %i10: field
    %i11: u32
    %i12: u32
    %i13: u32
    %i14: u32
    %i15: u32
    %i16: u32
    %i17: field
    %i18: field
    %i19: u32
    %i20: field
    %i21: field
    %i22: field
    %i23: field
    %i24: u32
    %i25: u32
    %i26: field
    %i27: field
    %i28: field
    %i29: u32
    %i30: field
    %i31: u32
    %i32: field
    %i33: field
    %i34: field
    %i35: bool
    %i36: u32
    %i37: u32
    %i38: field
    %i39: u32
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o21: u32
    %o10: u32
    %o23: u32
    %o11: u32
    %o24: field
    %o25: field
    %o12: u32
    %o26: field
    %o27: field
    %o28: field
    %o29: field
    %o31: u32
    %o13: field
    %o32: u32
    %o14: field
    %o34: field
    %o15: field
    %o16: u32
    %o17: field
    %o18: u32
    %o19: field
    %o20: field
    %o35: field
    %o36: bool
    %o37: u32
    %o38: u32
    %o39: field
    %o40: u32
Instructions:
    assert %i1(BN) == 24 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    u32 %w174 = %i8
    u32 %w175 = %i9
    field %w170 = %i10
    u32 %w69 = %i11
    u32 %w60 = %i12
    u32 %w196 = %i13
    u32 %w64 = %i14
    u32 %w199 = %i15
    u32 %w62 = %i16
    field %w72 = %i17
    field %w73 = %i18
    u32 %w61 = %i19
    field %w91 = %i20
    field %w75 = %i21
    field %w176 = %i22
    field %w198 = %i23
    u32 %w78 = %i24
    u32 %w99 = %i25
    field %w63 = %i26
    field %w177 = %i27
    field %w54 = %i28
    u32 %w55 = %i29
    field %w56 = %i30
    u32 %w57 = %i31
    field %w58 = %i32
    field %w59 = %i33
    field %w190 = %i34
    bool %w191 = %i35
    u32 %w192 = %i36
    u32 %w193 = %i37
    field %w194 = %i38
    u32 %w195 = %i39
    field %w66 = %w177
    %PHY[%SP + 0] = %w4(SP) <field>
    %w4(SP) = %w3(RP)
    %PHY[%SP + 1] = %w68 <field>
    %PHY[%SP + 2] = %w174 <u32>
    %PHY[%SP + 3] = %w175 <u32>
    %PHY[%SP + 4] = %w170 <field>
    %PHY[%SP + 5] = %w69 <u32>
    %PHY[%SP + 6] = %w60 <u32>
    field %w67 = 25 <Field>
    %w3(RP) = %w3(RP) + 7 <Field>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o21 == %w196
    assert %o10 == %w64
    assert %o23 == %w199
    assert %o11 == %w62
    assert %o24 == %w72
    assert %o25 == %w73
    assert %o12 == %w61
    assert %o26 == %w91
    assert %o27 == %w75
    assert %o28 == %w176
    assert %o29 == %w198
    assert %o31 == %w78
    assert %o13 == %w67
    assert %o32 == %w99
    assert %o14 == %w66
    assert %o34 == %w63
    assert %o15 == %w54
    assert %o16 == %w55
    assert %o17 == %w56
    assert %o18 == %w57
    assert %o19 == %w58
    assert %o20 == %w59
    assert %o35 == %w190
    assert %o36 == %w191
    assert %o37 == %w192
    assert %o38 == %w193
    assert %o39 == %w194
    assert %o40 == %w195
    assert %o1(BN) == 70 <Field>
Transition: -> 70

Block 25:
Func: main, Scope: 11
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i7(BP): field
    %i5(RP): field
    %i3(TS): field
    %i8: u32
    %i12: u32
    %i14: u32
    %i15: u32
    %i16: field
    %i17: field
    %i18: u32
    %i19: field
    %i20: field
    %i21: field
    %i22: field
    %i24: u32
    %i25: u32
    %i27: field
    %i28: field
    %i29: u32
    %i30: field
    %i31: u32
    %i32: field
    %i33: field
    %i34: field
    %i35: bool
    %i36: u32
    %i37: u32
    %i38: field
    %i39: u32
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: u32
    %o9: u32
    %o10: field
    %o11: u32
    %o12: u32
    %o13: u32
    %o14: u32
    %o15: u32
    %o16: u32
    %o17: field
    %o18: field
    %o19: u32
    %o20: field
    %o21: field
    %o22: field
    %o23: field
    %o24: u32
    %o25: u32
    %o26: field
    %o27: field
    %o28: field
    %o29: u32
    %o30: field
    %o31: u32
    %o32: field
    %o33: field
    %o34: field
    %o35: bool
    %o36: u32
    %o37: u32
    %o38: field
    %o39: u32
Instructions:
    assert %i1(BN) == 25 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w200 = %i7(BP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    u32 %w196 = %i8
    u32 %w64 = %i12
    u32 %w199 = %i14
    u32 %w62 = %i15
    field %w72 = %i16
    field %w73 = %i17
    u32 %w61 = %i18
    field %w91 = %i19
    field %w75 = %i20
    field %w176 = %i21
    field %w198 = %i22
    u32 %w78 = %i24
    u32 %w99 = %i25
    field %w63 = %i27
    field %w54 = %i28
    u32 %w55 = %i29
    field %w56 = %i30
    u32 %w57 = %i31
    field %w58 = %i32
    field %w59 = %i33
    field %w190 = %i34
    bool %w191 = %i35
    u32 %w192 = %i36
    u32 %w193 = %i37
    field %w194 = %i38
    u32 %w195 = %i39
    u32 %w60 = %PHY[%BP + 6]
    u32 %w69 = %PHY[%BP + 5]
    field %w170 = %PHY[%BP + 4]
    u32 %w175 = %PHY[%BP + 3]
    u32 %w174 = %PHY[%BP + 2]
    field %w68 = %PHY[%BP + 1]
    field %w4(SP) = %PHY[%BP + 0]
    field %w201 = %w200
    field %w177 = %w201
    %w199 = %w199 + 1 <U32>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w68
    assert %o8 == %w174
    assert %o9 == %w175
    assert %o10 == %w170
    assert %o11 == %w69
    assert %o12 == %w60
    assert %o13 == %w196
    assert %o14 == %w64
    assert %o15 == %w199
    assert %o16 == %w62
    assert %o17 == %w72
    assert %o18 == %w73
    assert %o19 == %w61
    assert %o20 == %w91
    assert %o21 == %w75
    assert %o22 == %w176
    assert %o23 == %w198
    assert %o24 == %w78
    assert %o25 == %w99
    assert %o26 == %w63
    assert %o27 == %w177
    assert %o28 == %w54
    assert %o29 == %w55
    assert %o30 == %w56
    assert %o31 == %w57
    assert %o32 == %w58
    assert %o33 == %w59
    assert %o34 == %w190
    assert %o35 == %w191
    assert %o36 == %w192
    assert %o37 == %w193
    assert %o38 == %w194
    assert %o39 == %w195
    assert %o1(BN) == %w199 != %w174 + 1 <U32> ? 24 <Field> : 26 <Field>
Transition:
    %w199 != %w174 + 1 <U32> ? -> 24 : -> 26

Block 26:
Func: main, Scope: 9
Exec Bound: 1, While Loop: false, Num VM Ops: 2
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: u32
    %i9: u32
    %i10: field
    %i11: u32
    %i12: u32
    %i13: u32
    %i14: u32
    %i16: u32
    %i17: field
    %i18: field
    %i19: u32
    %i20: field
    %i21: field
    %i22: field
    %i23: field
    %i24: u32
    %i25: u32
    %i26: field
    %i27: field
    %i28: field
    %i29: u32
    %i30: field
    %i31: u32
    %i32: field
    %i33: field
    %i34: field
    %i35: bool
    %i36: u32
    %i37: u32
    %i38: field
    %i39: u32
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: u32
    %o9: u32
    %o10: field
    %o11: u32
    %o12: u32
    %o13: u32
    %o14: u32
    %o15: u32
    %o16: field
    %o17: field
    %o18: u32
    %o19: field
    %o20: field
    %o21: field
    %o22: u32
    %o23: u32
    %o24: field
    %o25: field
    %o26: field
    %o27: u32
    %o28: field
    %o29: u32
    %o30: field
    %o31: field
    %o32: field
    %o33: bool
    %o34: u32
    %o35: u32
    %o36: field
    %o37: u32
Instructions:
    assert %i1(BN) == 26 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    u32 %w174 = %i8
    u32 %w175 = %i9
    field %w170 = %i10
    u32 %w69 = %i11
    u32 %w60 = %i12
    u32 %w196 = %i13
    u32 %w64 = %i14
    u32 %w62 = %i16
    field %w72 = %i17
    field %w73 = %i18
    u32 %w61 = %i19
    field %w91 = %i20
    field %w75 = %i21
    field %w176 = %i22
    field %w198 = %i23
    u32 %w78 = %i24
    u32 %w99 = %i25
    field %w63 = %i26
    field %w177 = %i27
    field %w54 = %i28
    u32 %w55 = %i29
    field %w56 = %i30
    u32 %w57 = %i31
    field %w58 = %i32
    field %w59 = %i33
    field %w190 = %i34
    bool %w191 = %i35
    u32 %w192 = %i36
    u32 %w193 = %i37
    field %w194 = %i38
    u32 %w195 = %i39
    field %w202 = %w190
    bool %w203 = %w191
    u32 %w204 = %w192
    u32 %w205 = %w193
    field %w206 = %w194
    u32 %w207 = %w195
    field %w208 = %w198
    field %w209 = %w177
    assert !%w203
    field %w210 = %w209
    %w202[%w207 - 1 <U32>] = %w210 <field>
    %w206[%w207 - 1 <U32>] = %w208 <field>
    if %w207 == %w205:
        %w203 = true
    else:
        %w207 = %w207 + 1 <U32>
    field %w211 = %w202
    bool %w212 = %w203
    u32 %w213 = %w204
    u32 %w214 = %w205
    field %w215 = %w206
    u32 %w216 = %w207
    field %w217 = %w211
    bool %w218 = %w212
    u32 %w219 = %w213
    u32 %w220 = %w214
    field %w221 = %w215
    u32 %w222 = %w216
    %w190 = %w217
    %w191 = %w218
    %w192 = %w219
    %w193 = %w220
    %w194 = %w221
    %w195 = %w222
    %w196 = %w196 + 1 <U32>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w68
    assert %o8 == %w174
    assert %o9 == %w175
    assert %o10 == %w170
    assert %o11 == %w69
    assert %o12 == %w60
    assert %o13 == %w196
    assert %o14 == %w64
    assert %o15 == %w62
    assert %o16 == %w72
    assert %o17 == %w73
    assert %o18 == %w61
    assert %o19 == %w91
    assert %o20 == %w75
    assert %o21 == %w176
    assert %o22 == %w78
    assert %o23 == %w99
    assert %o24 == %w63
    assert %o25 == %w177
    assert %o26 == %w54
    assert %o27 == %w55
    assert %o28 == %w56
    assert %o29 == %w57
    assert %o30 == %w58
    assert %o31 == %w59
    assert %o32 == %w190
    assert %o33 == %w191
    assert %o34 == %w192
    assert %o35 == %w193
    assert %o36 == %w194
    assert %o37 == %w195
    assert %o1(BN) == %w196 != %w175 ? 23 <Field> : 27 <Field>
Transition:
    %w196 != %w175 ? -> 23 : -> 27

Block 27:
Func: main, Scope: 6
Exec Bound: 1, While Loop: false, Num VM Ops: 1
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i10: field
    %i11: u32
    %i12: u32
    %i14: u32
    %i15: u32
    %i16: field
    %i17: field
    %i18: u32
    %i19: field
    %i20: field
    %i22: u32
    %i23: u32
    %i24: field
    %i26: field
    %i27: u32
    %i28: field
    %i29: u32
    %i30: field
    %i31: field
    %i32: field
    %i33: bool
    %i34: u32
    %i35: u32
    %i36: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: u32
    %o9: u32
    %o10: field
    %o11: u32
    %o12: u32
    %o13: u32
    %o14: field
    %o15: field
    %o16: u32
    %o17: field
    %o18: field
    %o19: u32
    %o20: u32
    %o21: field
    %o22: u32
    %o23: u32
    %o24: field
    %o25: field
    %o26: field
    %o27: u32
    %o28: field
    %o29: u32
    %o30: field
    %o31: field
Instructions:
    assert %i1(BN) == 27 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    field %w170 = %i10
    u32 %w69 = %i11
    u32 %w60 = %i12
    u32 %w64 = %i14
    u32 %w62 = %i15
    field %w72 = %i16
    field %w73 = %i17
    u32 %w61 = %i18
    field %w91 = %i19
    field %w75 = %i20
    u32 %w78 = %i22
    u32 %w99 = %i23
    field %w63 = %i24
    field %w54 = %i26
    u32 %w55 = %i27
    field %w56 = %i28
    u32 %w57 = %i29
    field %w58 = %i30
    field %w59 = %i31
    field %w190 = %i32
    bool %w191 = %i33
    u32 %w192 = %i34
    u32 %w193 = %i35
    field %w194 = %i36
    field %w135 = %w190
    bool %w223 = %w191
    u32 %w136 = %w192
    u32 %w137 = %w193
    field %w138 = %w194
    field %w224 = %w170
    assert %w223
    field[%w137 + 1 <U32>] %w133
    %w133[0 <Field>] = %w224 <field>
    u32 %w134 = 0 <U32>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w68
    assert %o8 == %w69
    assert %o9 == %w60
    assert %o10 == %w133
    assert %o11 == %w134
    assert %o12 == %w64
    assert %o13 == %w62
    assert %o14 == %w72
    assert %o15 == %w73
    assert %o16 == %w61
    assert %o17 == %w91
    assert %o18 == %w75
    assert %o19 == %w78
    assert %o20 == %w99
    assert %o21 == %w135
    assert %o22 == %w136
    assert %o23 == %w137
    assert %o24 == %w138
    assert %o25 == %w63
    assert %o26 == %w54
    assert %o27 == %w55
    assert %o28 == %w56
    assert %o29 == %w57
    assert %o30 == %w58
    assert %o31 == %w59
    assert %o1(BN) == %w134 != %w137 ? 13 <Field> : 14 <Field>
Transition:
    %w134 != %w137 ? -> 13 : -> 14

Block 28:
Func: main, Scope: 1
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i7(BP): field
    %i5(RP): field
    %i3(TS): field
    %i9: field
    %i10: u32
    %i11: field
    %i12: u32
    %i15: u32
    %i18: u32
    %i28: field
    %i29: u32
    %i30: field
    %i31: u32
    %i32: field
    %i33: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: field
    %o9: u32
    %o10: u32
    %o11: field
    %o12: u32
    %o13: field
    %o14: u32
    %o15: u32
    %o16: u32
    %o17: field
    %o18: field
    %o19: field
    %o20: u32
    %o21: field
    %o22: u32
    %o23: field
    %o24: field
Instructions:
    assert %i1(BN) == 28 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w200 = %i7(BP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w53 = %i9
    u32 %w65 = %i10
    field %w52 = %i11
    u32 %w64 = %i12
    u32 %w62 = %i15
    u32 %w61 = %i18
    field %w54 = %i28
    u32 %w55 = %i29
    field %w56 = %i30
    u32 %w57 = %i31
    field %w58 = %i32
    field %w59 = %i33
    u32 %w60 = %PHY[%BP + 1]
    field %w4(SP) = %PHY[%BP + 0]
    field %w225 = %w200
    field %w63 = %w225
    field %w226 = %w63
    field[%w64 + %w65 * 2 <U32>] %w68
    field %w227 = 1 <Field>
    u32 %w228 = 0 <U32>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w226
    assert %o8 == %w68
    assert %o9 == %w60
    assert %o10 == %w228
    assert %o11 == %w53
    assert %o12 == %w65
    assert %o13 == %w52
    assert %o14 == %w64
    assert %o15 == %w62
    assert %o16 == %w61
    assert %o17 == %w227
    assert %o18 == %w63
    assert %o19 == %w54
    assert %o20 == %w55
    assert %o21 == %w56
    assert %o22 == %w57
    assert %o23 == %w58
    assert %o24 == %w59
    assert %o1(BN) == %w228 != %w64 + %w65 * 2 <U32> ? 29 <Field> : 30 <Field>
Transition:
    %w228 != %w64 + %w65 * 2 <U32> ? -> 29 : -> 30

Block 29:
Func: main, Scope: 3
Exec Bound: 1, While Loop: true, Num VM Ops: 1
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: field
    %i9: u32
    %i10: u32
    %i11: field
    %i12: u32
    %i13: field
    %i14: u32
    %i15: u32
    %i16: u32
    %i17: field
    %i18: field
    %i19: field
    %i20: u32
    %i21: field
    %i22: u32
    %i23: field
    %i24: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: field
    %o9: u32
    %o10: u32
    %o11: field
    %o12: u32
    %o13: field
    %o14: u32
    %o15: u32
    %o16: u32
    %o17: field
    %o18: field
    %o19: field
    %o20: u32
    %o21: field
    %o22: u32
    %o23: field
    %o24: field
Instructions:
    assert %i1(BN) == 29 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w226 = %i7(BP)
    field %w68 = %i8
    u32 %w60 = %i9
    u32 %w228 = %i10
    field %w53 = %i11
    u32 %w65 = %i12
    field %w52 = %i13
    u32 %w64 = %i14
    u32 %w62 = %i15
    u32 %w61 = %i16
    field %w227 = %i17
    field %w63 = %i18
    field %w54 = %i19
    u32 %w55 = %i20
    field %w56 = %i21
    u32 %w57 = %i22
    field %w58 = %i23
    field %w59 = %i24
    %w68[%w228] = %w227 <field>
    %w227 = %w227 * %w226
    %w228 = %w228 + 1 <U32>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w226
    assert %o8 == %w68
    assert %o9 == %w60
    assert %o10 == %w228
    assert %o11 == %w53
    assert %o12 == %w65
    assert %o13 == %w52
    assert %o14 == %w64
    assert %o15 == %w62
    assert %o16 == %w61
    assert %o17 == %w227
    assert %o18 == %w63
    assert %o19 == %w54
    assert %o20 == %w55
    assert %o21 == %w56
    assert %o22 == %w57
    assert %o23 == %w58
    assert %o24 == %w59
    assert %o1(BN) == %w228 != %w64 + %w65 * 2 <U32> ? 29 <Field> : 30 <Field>
Transition:
    %w228 != %w64 + %w65 * 2 <U32> ? -> 29 : -> 30

Block 30:
Func: main, Scope: 2
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i8: field
    %i9: u32
    %i11: field
    %i12: u32
    %i13: field
    %i14: u32
    %i15: u32
    %i16: u32
    %i18: field
    %i19: field
    %i20: u32
    %i21: field
    %i22: u32
    %i23: field
    %i24: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: u32
    %o9: u32
    %o10: field
    %o11: u32
    %o12: field
    %o13: u32
    %o14: field
    %o15: u32
    %o16: u32
    %o17: field
    %o18: field
    %o19: u32
    %o20: field
    %o21: u32
    %o22: field
    %o23: field
Instructions:
    assert %i1(BN) == 30 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i8
    u32 %w60 = %i9
    field %w53 = %i11
    u32 %w65 = %i12
    field %w52 = %i13
    u32 %w64 = %i14
    u32 %w62 = %i15
    u32 %w61 = %i16
    field %w63 = %i18
    field %w54 = %i19
    u32 %w55 = %i20
    field %w56 = %i21
    u32 %w57 = %i22
    field %w58 = %i23
    field %w59 = %i24
    field[%w62] %w118
    u32 %w229 = 0 <U32>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w68
    assert %o8 == %w60
    assert %o9 == %w229
    assert %o10 == %w53
    assert %o11 == %w65
    assert %o12 == %w52
    assert %o13 == %w64
    assert %o14 == %w118
    assert %o15 == %w62
    assert %o16 == %w61
    assert %o17 == %w63
    assert %o18 == %w54
    assert %o19 == %w55
    assert %o20 == %w56
    assert %o21 == %w57
    assert %o22 == %w58
    assert %o23 == %w59
    assert %o1(BN) == %w229 != %w62 ? 31 <Field> : 33 <Field>
Transition:
    %w229 != %w62 ? -> 31 : -> 33

Block 31:
Func: main, Scope: 3
Exec Bound: 1, While Loop: true, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: u32
    %i9: u32
    %i10: field
    %i11: u32
    %i12: field
    %i13: u32
    %i14: field
    %i15: u32
    %i16: u32
    %i17: field
    %i18: field
    %i19: u32
    %i20: field
    %i21: u32
    %i22: field
    %i23: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: u32
    %o9: field
    %o10: u32
    %o22: field
    %o11: u32
    %o12: u32
    %o13: field
    %o14: field
    %o15: field
    %o16: u32
    %o17: field
    %o18: u32
    %o19: field
    %o20: field
Instructions:
    assert %i1(BN) == 31 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    u32 %w60 = %i8
    u32 %w229 = %i9
    field %w53 = %i10
    u32 %w65 = %i11
    field %w52 = %i12
    u32 %w64 = %i13
    field %w118 = %i14
    u32 %w62 = %i15
    u32 %w61 = %i16
    field %w63 = %i17
    field %w54 = %i18
    u32 %w55 = %i19
    field %w56 = %i20
    u32 %w57 = %i21
    field %w58 = %i22
    field %w59 = %i23
    field %w66 = %w63
    %PHY[%SP + 0] = %w4(SP) <field>
    %w4(SP) = %w3(RP)
    %PHY[%SP + 1] = %w68 <field>
    %PHY[%SP + 2] = %w60 <u32>
    %PHY[%SP + 3] = %w229 <u32>
    field %w67 = 32 <Field>
    %w3(RP) = %w3(RP) + 4 <Field>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w53
    assert %o8 == %w65
    assert %o9 == %w52
    assert %o10 == %w64
    assert %o22 == %w118
    assert %o11 == %w62
    assert %o12 == %w61
    assert %o13 == %w67
    assert %o14 == %w66
    assert %o15 == %w54
    assert %o16 == %w55
    assert %o17 == %w56
    assert %o18 == %w57
    assert %o19 == %w58
    assert %o20 == %w59
    assert %o1(BN) == 70 <Field>
Transition: -> 70

Block 32:
Func: main, Scope: 4
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i7(BP): field
    %i5(RP): field
    %i3(TS): field
    %i9: field
    %i10: u32
    %i11: field
    %i12: u32
    %i13: field
    %i15: u32
    %i18: u32
    %i28: field
    %i29: u32
    %i30: field
    %i31: u32
    %i32: field
    %i33: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: u32
    %o9: u32
    %o10: field
    %o11: u32
    %o12: field
    %o13: u32
    %o14: field
    %o15: u32
    %o16: u32
    %o17: field
    %o18: field
    %o19: u32
    %o20: field
    %o21: u32
    %o22: field
    %o23: field
Instructions:
    assert %i1(BN) == 32 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w200 = %i7(BP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w53 = %i9
    u32 %w65 = %i10
    field %w52 = %i11
    u32 %w64 = %i12
    field %w118 = %i13
    u32 %w62 = %i15
    u32 %w61 = %i18
    field %w54 = %i28
    u32 %w55 = %i29
    field %w56 = %i30
    u32 %w57 = %i31
    field %w58 = %i32
    field %w59 = %i33
    u32 %w229 = %PHY[%BP + 3]
    u32 %w60 = %PHY[%BP + 2]
    field %w68 = %PHY[%BP + 1]
    field %w4(SP) = %PHY[%BP + 0]
    field %w230 = %w200
    field %w63 = %w230
    %w229 = %w229 + 1 <U32>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w68
    assert %o8 == %w60
    assert %o9 == %w229
    assert %o10 == %w53
    assert %o11 == %w65
    assert %o12 == %w52
    assert %o13 == %w64
    assert %o14 == %w118
    assert %o15 == %w62
    assert %o16 == %w61
    assert %o17 == %w63
    assert %o18 == %w54
    assert %o19 == %w55
    assert %o20 == %w56
    assert %o21 == %w57
    assert %o22 == %w58
    assert %o23 == %w59
    assert %o1(BN) == %w229 != %w62 ? 31 <Field> : 33 <Field>
Transition:
    %w229 != %w62 ? -> 31 : -> 33

Block 33:
Func: main, Scope: 2
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: u32
    %i10: field
    %i11: u32
    %i12: field
    %i13: u32
    %i14: field
    %i15: u32
    %i16: u32
    %i17: field
    %i18: field
    %i19: u32
    %i20: field
    %i21: u32
    %i22: field
    %i23: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: u32
    %o9: u32
    %o10: field
    %o11: field
    %o12: u32
    %o13: field
    %o14: u32
    %o15: field
    %o16: u32
    %o17: u32
    %o18: field
    %o19: field
    %o20: u32
    %o21: field
    %o22: u32
    %o23: field
    %o24: field
Instructions:
    assert %i1(BN) == 33 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    u32 %w60 = %i8
    field %w53 = %i10
    u32 %w65 = %i11
    field %w52 = %i12
    u32 %w64 = %i13
    field %w118 = %i14
    u32 %w62 = %i15
    u32 %w61 = %i16
    field %w63 = %i17
    field %w54 = %i18
    u32 %w55 = %i19
    field %w56 = %i20
    u32 %w57 = %i21
    field %w58 = %i22
    field %w59 = %i23
    field %w117 = 0 <Field>
    u32 %w115 = 0 <U32>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w68
    assert %o8 == %w60
    assert %o9 == %w115
    assert %o10 == %w117
    assert %o11 == %w53
    assert %o12 == %w65
    assert %o13 == %w52
    assert %o14 == %w64
    assert %o15 == %w118
    assert %o16 == %w62
    assert %o17 == %w61
    assert %o18 == %w63
    assert %o19 == %w54
    assert %o20 == %w55
    assert %o21 == %w56
    assert %o22 == %w57
    assert %o23 == %w58
    assert %o24 == %w59
    assert %o1(BN) == %w115 != %w64 ? 34 <Field> : 36 <Field>
Transition:
    %w115 != %w64 ? -> 34 : -> 36

Block 34:
Func: main, Scope: 3
Exec Bound: 1, While Loop: true, Num VM Ops: 2
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: u32
    %i9: u32
    %i10: field
    %i11: field
    %i12: u32
    %i13: field
    %i14: u32
    %i15: field
    %i16: u32
    %i17: u32
    %i18: field
    %i19: field
    %i20: u32
    %i21: field
    %i22: u32
    %i23: field
    %i24: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: field
    %o9: u32
    %o10: u32
    %o11: field
    %o12: field
    %o13: u32
    %o14: field
    %o15: u32
    %o16: field
    %o17: u32
    %o18: u32
    %o19: u32
    %o20: field
    %o21: u32
    %o22: field
    %o23: field
    %o24: field
    %o25: field
    %o26: u32
    %o27: field
    %o28: u32
    %o29: field
    %o30: field
Instructions:
    assert %i1(BN) == 34 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    u32 %w60 = %i8
    u32 %w115 = %i9
    field %w117 = %i10
    field %w53 = %i11
    u32 %w65 = %i12
    field %w52 = %i13
    u32 %w64 = %i14
    field %w118 = %i15
    u32 %w62 = %i16
    u32 %w61 = %i17
    field %w63 = %i18
    field %w54 = %i19
    u32 %w55 = %i20
    field %w56 = %i21
    u32 %w57 = %i22
    field %w58 = %i23
    field %w59 = %i24
    field %w231 = %w52[%w115]
    field %w232 = %w231
    field %w233 = %w68[%w115]
    field %w112 = %w233
    field %w124 = %w232
    u32 %w120 = %w61
    field %w121 = %w118
    u32 %w122 = %w62
    field %w123 = 35 <Field>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w112
    assert %o8 == %w68
    assert %o9 == %w60
    assert %o10 == %w115
    assert %o11 == %w117
    assert %o12 == %w53
    assert %o13 == %w65
    assert %o14 == %w52
    assert %o15 == %w64
    assert %o16 == %w118
    assert %o17 == %w62
    assert %o18 == %w120
    assert %o19 == %w61
    assert %o20 == %w121
    assert %o21 == %w122
    assert %o22 == %w123
    assert %o23 == %w124
    assert %o24 == %w63
    assert %o25 == %w54
    assert %o26 == %w55
    assert %o27 == %w56
    assert %o28 == %w57
    assert %o29 == %w58
    assert %o30 == %w59
    assert %o1(BN) == 8 <Field>
Transition: -> 8

Block 35:
Func: main, Scope: 4
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i2(RET): field
    %i5(RP): field
    %i3(TS): field
    %i8: field
    %i11: field
    %i12: u32
    %i13: u32
    %i15: field
    %i16: field
    %i17: u32
    %i18: field
    %i19: u32
    %i20: field
    %i21: u32
    %i23: u32
    %i24: field
    %i25: field
    %i26: u32
    %i27: field
    %i28: u32
    %i29: field
    %i30: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: u32
    %o9: u32
    %o10: field
    %o11: field
    %o12: u32
    %o13: field
    %o14: u32
    %o15: field
    %o16: u32
    %o17: u32
    %o18: field
    %o19: field
    %o20: u32
    %o21: field
    %o22: u32
    %o23: field
    %o24: field
Instructions:
    assert %i1(BN) == 35 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w132 = %i2(RET)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w112 = %i8
    field %w68 = %i11
    u32 %w60 = %i12
    u32 %w115 = %i13
    field %w117 = %i15
    field %w53 = %i16
    u32 %w65 = %i17
    field %w52 = %i18
    u32 %w64 = %i19
    field %w118 = %i20
    u32 %w62 = %i21
    u32 %w61 = %i23
    field %w63 = %i24
    field %w54 = %i25
    u32 %w55 = %i26
    field %w56 = %i27
    u32 %w57 = %i28
    field %w58 = %i29
    field %w59 = %i30
    field %w234 = %w132
    %w117 = %w117 + %w234 * %w112
    %w115 = %w115 + 1 <U32>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w68
    assert %o8 == %w60
    assert %o9 == %w115
    assert %o10 == %w117
    assert %o11 == %w53
    assert %o12 == %w65
    assert %o13 == %w52
    assert %o14 == %w64
    assert %o15 == %w118
    assert %o16 == %w62
    assert %o17 == %w61
    assert %o18 == %w63
    assert %o19 == %w54
    assert %o20 == %w55
    assert %o21 == %w56
    assert %o22 == %w57
    assert %o23 == %w58
    assert %o24 == %w59
    assert %o1(BN) == %w115 != %w64 ? 34 <Field> : 36 <Field>
Transition:
    %w115 != %w64 ? -> 34 : -> 36

Block 36:
Func: main, Scope: 2
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: u32
    %i10: field
    %i11: field
    %i12: u32
    %i14: u32
    %i15: field
    %i16: u32
    %i17: u32
    %i18: field
    %i19: field
    %i20: u32
    %i21: field
    %i22: u32
    %i23: field
    %i24: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: u32
    %o9: u32
    %o10: field
    %o11: field
    %o12: u32
    %o13: u32
    %o14: field
    %o15: u32
    %o16: u32
    %o17: field
    %o18: field
    %o19: u32
    %o20: field
    %o21: u32
    %o22: field
    %o23: field
Instructions:
    assert %i1(BN) == 36 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    u32 %w60 = %i8
    field %w117 = %i10
    field %w53 = %i11
    u32 %w65 = %i12
    u32 %w64 = %i14
    field %w118 = %i15
    u32 %w62 = %i16
    u32 %w61 = %i17
    field %w63 = %i18
    field %w54 = %i19
    u32 %w55 = %i20
    field %w56 = %i21
    u32 %w57 = %i22
    field %w58 = %i23
    field %w59 = %i24
    u32 %w116 = 0 <U32>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w68
    assert %o8 == %w60
    assert %o9 == %w116
    assert %o10 == %w117
    assert %o11 == %w53
    assert %o12 == %w65
    assert %o13 == %w64
    assert %o14 == %w118
    assert %o15 == %w62
    assert %o16 == %w61
    assert %o17 == %w63
    assert %o18 == %w54
    assert %o19 == %w55
    assert %o20 == %w56
    assert %o21 == %w57
    assert %o22 == %w58
    assert %o23 == %w59
    assert %o1(BN) == %w116 != %w65 ? 37 <Field> : 40 <Field>
Transition:
    %w116 != %w65 ? -> 37 : -> 40

Block 37:
Func: main, Scope: 3
Exec Bound: 1, While Loop: true, Num VM Ops: 14
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: u32
    %i9: u32
    %i10: field
    %i11: field
    %i12: u32
    %i13: u32
    %i14: field
    %i15: u32
    %i16: u32
    %i17: field
    %i18: field
    %i19: u32
    %i20: field
    %i21: u32
    %i22: field
    %i23: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o31: field
    %o32: field
    %o8: field
    %o9: u32
    %o33: u32
    %o11: field
    %o12: field
    %o13: u32
    %o15: u32
    %o16: field
    %o17: u32
    %o34: field
    %o18: u32
    %o19: u32
    %o20: field
    %o21: u32
    %o22: field
    %o23: field
    %o24: field
    %o25: field
    %o26: u32
    %o27: field
    %o28: u32
    %o29: field
    %o30: field
Instructions:
    assert %i1(BN) == 37 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    u32 %w60 = %i8
    u32 %w116 = %i9
    field %w117 = %i10
    field %w53 = %i11
    u32 %w65 = %i12
    u32 %w64 = %i13
    field %w118 = %i14
    u32 %w62 = %i15
    u32 %w61 = %i16
    field %w63 = %i17
    field %w54 = %i18
    u32 %w55 = %i19
    field %w56 = %i20
    u32 %w57 = %i21
    field %w58 = %i22
    field %w59 = %i23
    field %w235 = %w68[%w64 + 2 <U32> * %w116]
    field %w114 = %w235
    field %w235 = %w68[%w64 + 2 <U32> * %w116 + 1 <U32>]
    field %w113 = %w235
    field[2 <U32>] %w236
    field %w237 = %w53[%w116]
    field %w238 = %w237[0 <Field>]
    field %w239 = %w238
    field %w240 = %w53[%w116]
    field %w241 = %w240[1 <Field>]
    field %w242 = %w241
    %w236[0 <Field>] = %w239 <field>, init
    %w236[1 <Field>] = %w242 <field>, init
    field %w243 = %w236
    field[2 <U32>] %w236
    field %w237 = %w53[%w116]
    field %w238 = %w237[2 <Field>]
    %w239 = %w238
    field %w240 = %w53[%w116]
    field %w241 = %w240[3 <Field>]
    %w242 = %w241
    %w236[0 <Field>] = %w239 <field>, init
    %w236[1 <Field>] = %w242 <field>, init
    field %w119 = %w236
    field %w124 = %w243
    u32 %w120 = %w61
    field %w121 = %w118
    u32 %w122 = %w62
    field %w123 = 38 <Field>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o31 == %w113
    assert %o32 == %w114
    assert %o8 == %w68
    assert %o9 == %w60
    assert %o33 == %w116
    assert %o11 == %w117
    assert %o12 == %w53
    assert %o13 == %w65
    assert %o15 == %w64
    assert %o16 == %w118
    assert %o17 == %w62
    assert %o34 == %w119
    assert %o18 == %w120
    assert %o19 == %w61
    assert %o20 == %w121
    assert %o21 == %w122
    assert %o22 == %w123
    assert %o23 == %w124
    assert %o24 == %w63
    assert %o25 == %w54
    assert %o26 == %w55
    assert %o27 == %w56
    assert %o28 == %w57
    assert %o29 == %w58
    assert %o30 == %w59
    assert %o1(BN) == 8 <Field>
Transition: -> 8

Block 38:
Func: main, Scope: 4
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i2(RET): field
    %i5(RP): field
    %i3(TS): field
    %i9: field
    %i10: field
    %i11: field
    %i12: u32
    %i14: u32
    %i15: field
    %i16: field
    %i17: u32
    %i19: u32
    %i20: field
    %i21: u32
    %i22: field
    %i23: u32
    %i24: field
    %i25: field
    %i26: u32
    %i27: field
    %i28: u32
    %i29: field
    %i30: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o31: field
    %o8: field
    %o9: u32
    %o33: u32
    %o11: field
    %o12: field
    %o13: u32
    %o15: u32
    %o16: field
    %o17: u32
    %o18: u32
    %o19: u32
    %o20: field
    %o21: u32
    %o22: field
    %o23: field
    %o24: field
    %o25: field
    %o26: u32
    %o27: field
    %o28: u32
    %o29: field
    %o30: field
Instructions:
    assert %i1(BN) == 38 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w132 = %i2(RET)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w113 = %i9
    field %w114 = %i10
    field %w68 = %i11
    u32 %w60 = %i12
    u32 %w116 = %i14
    field %w117 = %i15
    field %w53 = %i16
    u32 %w65 = %i17
    u32 %w64 = %i19
    field %w118 = %i20
    u32 %w62 = %i21
    field %w119 = %i22
    u32 %w61 = %i23
    field %w63 = %i24
    field %w54 = %i25
    u32 %w55 = %i26
    field %w56 = %i27
    u32 %w57 = %i28
    field %w58 = %i29
    field %w59 = %i30
    field %w244 = %w132
    %w117 = %w117 + %w244 * %w114
    field %w124 = %w119
    u32 %w120 = %w61
    field %w121 = %w118
    u32 %w122 = %w62
    field %w123 = 39 <Field>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o31 == %w113
    assert %o8 == %w68
    assert %o9 == %w60
    assert %o33 == %w116
    assert %o11 == %w117
    assert %o12 == %w53
    assert %o13 == %w65
    assert %o15 == %w64
    assert %o16 == %w118
    assert %o17 == %w62
    assert %o18 == %w120
    assert %o19 == %w61
    assert %o20 == %w121
    assert %o21 == %w122
    assert %o22 == %w123
    assert %o23 == %w124
    assert %o24 == %w63
    assert %o25 == %w54
    assert %o26 == %w55
    assert %o27 == %w56
    assert %o28 == %w57
    assert %o29 == %w58
    assert %o30 == %w59
    assert %o1(BN) == 8 <Field>
Transition: -> 8

Block 39:
Func: main, Scope: 4
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i2(RET): field
    %i5(RP): field
    %i3(TS): field
    %i9: field
    %i11: field
    %i12: u32
    %i14: u32
    %i15: field
    %i16: field
    %i17: u32
    %i19: u32
    %i20: field
    %i21: u32
    %i23: u32
    %i24: field
    %i25: field
    %i26: u32
    %i27: field
    %i28: u32
    %i29: field
    %i30: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: u32
    %o9: u32
    %o10: field
    %o11: field
    %o12: u32
    %o13: u32
    %o14: field
    %o15: u32
    %o16: u32
    %o17: field
    %o18: field
    %o19: u32
    %o20: field
    %o21: u32
    %o22: field
    %o23: field
Instructions:
    assert %i1(BN) == 39 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w132 = %i2(RET)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w113 = %i9
    field %w68 = %i11
    u32 %w60 = %i12
    u32 %w116 = %i14
    field %w117 = %i15
    field %w53 = %i16
    u32 %w65 = %i17
    u32 %w64 = %i19
    field %w118 = %i20
    u32 %w62 = %i21
    u32 %w61 = %i23
    field %w63 = %i24
    field %w54 = %i25
    u32 %w55 = %i26
    field %w56 = %i27
    u32 %w57 = %i28
    field %w58 = %i29
    field %w59 = %i30
    field %w244 = %w132
    %w117 = %w117 + %w244 * %w113
    %w116 = %w116 + 1 <U32>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w68
    assert %o8 == %w60
    assert %o9 == %w116
    assert %o10 == %w117
    assert %o11 == %w53
    assert %o12 == %w65
    assert %o13 == %w64
    assert %o14 == %w118
    assert %o15 == %w62
    assert %o16 == %w61
    assert %o17 == %w63
    assert %o18 == %w54
    assert %o19 == %w55
    assert %o20 == %w56
    assert %o21 == %w57
    assert %o22 == %w58
    assert %o23 == %w59
    assert %o1(BN) == %w116 != %w65 ? 37 <Field> : 40 <Field>
Transition:
    %w116 != %w65 ? -> 37 : -> 40

Block 40:
Func: main, Scope: 2
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: u32
    %i10: field
    %i13: u32
    %i14: field
    %i15: u32
    %i16: u32
    %i17: field
    %i18: field
    %i19: u32
    %i20: field
    %i21: u32
    %i22: field
    %i23: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: u32
    %o9: u32
    %o10: u32
    %o11: u32
    %o12: field
    %o13: field
    %o14: field
    %o15: field
    %o16: u32
    %o17: field
    %o18: u32
    %o19: field
    %o20: field
    %o21: u32
    %o22: field
    %o23: u32
    %o24: field
    %o25: field
Instructions:
    assert %i1(BN) == 40 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    u32 %w60 = %i8
    field %w117 = %i10
    u32 %w64 = %i13
    field %w118 = %i14
    u32 %w62 = %i15
    u32 %w61 = %i16
    field %w63 = %i17
    field %w54 = %i18
    u32 %w55 = %i19
    field %w56 = %i20
    u32 %w57 = %i21
    field %w58 = %i22
    field %w59 = %i23
    field[%w57] %w75
    field[%w55] %w72
    field[%w55] %w73
    field %w245 = %w118
    field %w246 = %w117
    field %w247 = %w246
    field %w248 = %w245
    u32 %w69 = 1 <U32>
    u32 %w78 = 0 <U32>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w68
    assert %o8 == %w69
    assert %o9 == %w60
    assert %o10 == %w64
    assert %o11 == %w62
    assert %o12 == %w72
    assert %o13 == %w73
    assert %o14 == %w247
    assert %o15 == %w248
    assert %o16 == %w61
    assert %o17 == %w75
    assert %o18 == %w78
    assert %o19 == %w63
    assert %o20 == %w54
    assert %o21 == %w55
    assert %o22 == %w56
    assert %o23 == %w57
    assert %o24 == %w58
    assert %o25 == %w59
    assert %o1(BN) == %w78 != %w60 - 1 <U32> ? 41 <Field> : 69 <Field>
Transition:
    %w78 != %w60 - 1 <U32> ? -> 41 : -> 69

Block 41:
Func: main, Scope: 3
Exec Bound: 1, While Loop: true, Num VM Ops: 1
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: u32
    %i9: u32
    %i10: u32
    %i11: u32
    %i12: field
    %i13: field
    %i14: field
    %i15: field
    %i16: u32
    %i17: field
    %i18: u32
    %i19: field
    %i20: field
    %i21: u32
    %i22: field
    %i23: u32
    %i24: field
    %i25: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: u32
    %o9: u32
    %o10: field
    %o11: u32
    %o12: u32
    %o13: u32
    %o14: u32
    %o15: field
    %o16: field
    %o17: u32
    %o18: field
    %o19: field
    %o20: field
    %o21: u32
    %o22: u32
    %o23: field
    %o24: field
    %o25: field
    %o26: u32
    %o27: field
    %o28: u32
    %o29: field
    %o30: field
Instructions:
    assert %i1(BN) == 41 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    u32 %w69 = %i8
    u32 %w60 = %i9
    u32 %w64 = %i10
    u32 %w62 = %i11
    field %w72 = %i12
    field %w73 = %i13
    field %w247 = %i14
    field %w248 = %i15
    u32 %w61 = %i16
    field %w75 = %i17
    u32 %w78 = %i18
    field %w63 = %i19
    field %w54 = %i20
    u32 %w55 = %i21
    field %w56 = %i22
    u32 %w57 = %i23
    field %w58 = %i24
    field %w59 = %i25
    field %w91 = %w248
    field %w249 = %w247
    u32 %w99 = %w78 + 1 <U32> * %w62
    field[0 <U32>] %w250
    field %w251 = %w59[%w78]
    field %w252 = %w251
    u32 %w253 = %w61 + 1 <U32>
    u32 %w254 = %w99
    field %w170 = %w249
    field %w176 = %w252
    u32 %w174 = %w253
    u32 %w175 = %w254
    field %w177 = %w63
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w68
    assert %o8 == %w174
    assert %o9 == %w175
    assert %o10 == %w170
    assert %o11 == %w69
    assert %o12 == %w60
    assert %o13 == %w64
    assert %o14 == %w62
    assert %o15 == %w72
    assert %o16 == %w73
    assert %o17 == %w61
    assert %o18 == %w91
    assert %o19 == %w75
    assert %o20 == %w176
    assert %o21 == %w78
    assert %o22 == %w99
    assert %o23 == %w63
    assert %o24 == %w177
    assert %o25 == %w54
    assert %o26 == %w55
    assert %o27 == %w56
    assert %o28 == %w57
    assert %o29 == %w58
    assert %o30 == %w59
    assert %o1(BN) == %w175 == 0 <U32> ? 19 <Field> : 20 <Field>
Transition:
    %w175 == 0 <U32> ? -> 19 : -> 20

Block 42:
Func: main, Scope: 4
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i7(BP): field
    %i8: field
    %i5(RP): field
    %i3(TS): field
    %i9: field
    %i10: u32
    %i11: u32
    %i12: u32
    %i13: u32
    %i14: field
    %i15: field
    %i16: u32
    %i17: field
    %i18: field
    %i19: u32
    %i20: u32
    %i21: field
    %i22: field
    %i23: u32
    %i24: field
    %i25: u32
    %i26: field
    %i27: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: u32
    %o9: field
    %o10: u32
    %o11: u32
    %o12: u32
    %o13: field
    %o14: field
    %o15: u32
    %o16: field
    %o17: field
    %o18: u32
    %o19: field
    %o20: u32
    %o21: u32
    %o22: field
    %o23: field
    %o24: field
    %o25: u32
    %o26: field
    %o27: u32
    %o28: field
    %o29: field
Instructions:
    assert %i1(BN) == 42 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w155 = %i7(BP)
    field %w156 = %i8
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i9
    u32 %w69 = %i10
    u32 %w60 = %i11
    u32 %w64 = %i12
    u32 %w62 = %i13
    field %w72 = %i14
    field %w73 = %i15
    u32 %w61 = %i16
    field %w91 = %i17
    field %w75 = %i18
    u32 %w78 = %i19
    u32 %w99 = %i20
    field %w63 = %i21
    field %w54 = %i22
    u32 %w55 = %i23
    field %w56 = %i24
    u32 %w57 = %i25
    field %w58 = %i26
    field %w59 = %i27
    field %w255 = %w155
    field %w256 = %w156
    field %w102 = %w255
    field %w257 = %w256
    field %w98 = %w257
    field %w89 = 0 <Field>
    u32 %w100 = 0 <U32>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w68
    assert %o8 == %w69
    assert %o9 == %w89
    assert %o10 == %w60
    assert %o11 == %w64
    assert %o12 == %w62
    assert %o13 == %w72
    assert %o14 == %w73
    assert %o15 == %w61
    assert %o16 == %w91
    assert %o17 == %w75
    assert %o18 == %w78
    assert %o19 == %w98
    assert %o20 == %w99
    assert %o21 == %w100
    assert %o22 == %w102
    assert %o23 == %w63
    assert %o24 == %w54
    assert %o25 == %w55
    assert %o26 == %w56
    assert %o27 == %w57
    assert %o28 == %w58
    assert %o29 == %w59
    assert %o1(BN) == %w100 != %w57 ? 43 <Field> : 49 <Field>
Transition:
    %w100 != %w57 ? -> 43 : -> 49

Block 43:
Func: main, Scope: 6
Exec Bound: 1, While Loop: true, Num VM Ops: 1
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: u32
    %i9: field
    %i10: u32
    %i11: u32
    %i12: u32
    %i13: field
    %i14: field
    %i15: u32
    %i16: field
    %i17: field
    %i18: u32
    %i19: field
    %i20: u32
    %i21: u32
    %i22: field
    %i23: field
    %i24: field
    %i25: u32
    %i26: field
    %i27: u32
    %i28: field
    %i29: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: u32
    %o9: field
    %o10: u32
    %o11: u32
    %o12: u32
    %o13: field
    %o14: field
    %o15: u32
    %o16: field
    %o17: field
    %o18: u32
    %o19: field
    %o20: u32
    %o21: u32
    %o22: field
    %o23: field
    %o24: field
    %o25: u32
    %o26: field
    %o27: u32
    %o28: field
    %o29: field
Instructions:
    assert %i1(BN) == 43 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    u32 %w69 = %i8
    field %w89 = %i9
    u32 %w60 = %i10
    u32 %w64 = %i11
    u32 %w62 = %i12
    field %w72 = %i13
    field %w73 = %i14
    u32 %w61 = %i15
    field %w91 = %i16
    field %w75 = %i17
    u32 %w78 = %i18
    field %w98 = %i19
    u32 %w99 = %i20
    u32 %w100 = %i21
    field %w102 = %i22
    field %w63 = %i23
    field %w54 = %i24
    u32 %w55 = %i25
    field %w56 = %i26
    u32 %w57 = %i27
    field %w58 = %i28
    field %w59 = %i29
    u32 %w258 = %w54[%w100]
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w68
    assert %o8 == %w69
    assert %o9 == %w89
    assert %o10 == %w60
    assert %o11 == %w64
    assert %o12 == %w62
    assert %o13 == %w72
    assert %o14 == %w73
    assert %o15 == %w61
    assert %o16 == %w91
    assert %o17 == %w75
    assert %o18 == %w78
    assert %o19 == %w98
    assert %o20 == %w99
    assert %o21 == %w100
    assert %o22 == %w102
    assert %o23 == %w63
    assert %o24 == %w54
    assert %o25 == %w55
    assert %o26 == %w56
    assert %o27 == %w57
    assert %o28 == %w58
    assert %o29 == %w59
    assert %o1(BN) == %w258 < %w78 ? 44 <Field> : 48 <Field>
Transition:
    %w258 < %w78 ? -> 44 : -> 48

Block 44:
Func: main, Scope: 8
Exec Bound: 1, While Loop: false, Num VM Ops: 1
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: u32
    %i9: field
    %i10: u32
    %i11: u32
    %i12: u32
    %i13: field
    %i14: field
    %i15: u32
    %i16: field
    %i17: field
    %i18: u32
    %i19: field
    %i20: u32
    %i21: u32
    %i22: field
    %i23: field
    %i24: field
    %i25: u32
    %i26: field
    %i27: u32
    %i28: field
    %i29: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: field
    %o9: u32
    %o10: field
    %o11: u32
    %o12: u32
    %o13: u32
    %o14: u32
    %o15: field
    %o16: field
    %o17: u32
    %o18: field
    %o19: field
    %o20: field
    %o21: u32
    %o22: field
    %o23: u32
    %o24: u32
    %o25: field
    %o26: field
    %o27: field
    %o28: u32
    %o29: field
    %o30: u32
    %o31: field
    %o32: field
Instructions:
    assert %i1(BN) == 44 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    u32 %w69 = %i8
    field %w89 = %i9
    u32 %w60 = %i10
    u32 %w64 = %i11
    u32 %w62 = %i12
    field %w72 = %i13
    field %w73 = %i14
    u32 %w61 = %i15
    field %w91 = %i16
    field %w75 = %i17
    u32 %w78 = %i18
    field %w98 = %i19
    u32 %w99 = %i20
    u32 %w100 = %i21
    field %w102 = %i22
    field %w63 = %i23
    field %w54 = %i24
    u32 %w55 = %i25
    field %w56 = %i26
    u32 %w57 = %i27
    field %w58 = %i28
    field %w59 = %i29
    field %w259 = %w68[%w100]
    field %w260 = %w259
    field %w94 = 1 <Field>
    u32 %w261 = 0 <U32>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w260
    assert %o8 == %w68
    assert %o9 == %w69
    assert %o10 == %w89
    assert %o11 == %w60
    assert %o12 == %w261
    assert %o13 == %w64
    assert %o14 == %w62
    assert %o15 == %w72
    assert %o16 == %w73
    assert %o17 == %w61
    assert %o18 == %w91
    assert %o19 == %w94
    assert %o20 == %w75
    assert %o21 == %w78
    assert %o22 == %w98
    assert %o23 == %w99
    assert %o24 == %w100
    assert %o25 == %w102
    assert %o26 == %w63
    assert %o27 == %w54
    assert %o28 == %w55
    assert %o29 == %w56
    assert %o30 == %w57
    assert %o31 == %w58
    assert %o32 == %w59
    assert %o1(BN) == %w261 != %w69 ? 45 <Field> : 46 <Field>
Transition:
    %w261 != %w69 ? -> 45 : -> 46

Block 45:
Func: main, Scope: 10
Exec Bound: 1, While Loop: true, Num VM Ops: 3
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: field
    %i9: u32
    %i10: field
    %i11: u32
    %i12: u32
    %i13: u32
    %i14: u32
    %i15: field
    %i16: field
    %i17: u32
    %i18: field
    %i19: field
    %i20: field
    %i21: u32
    %i22: field
    %i23: u32
    %i24: u32
    %i25: field
    %i26: field
    %i27: field
    %i28: u32
    %i29: field
    %i30: u32
    %i31: field
    %i32: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: field
    %o9: u32
    %o10: field
    %o11: u32
    %o12: u32
    %o13: u32
    %o14: u32
    %o15: field
    %o16: field
    %o17: u32
    %o18: field
    %o19: field
    %o20: field
    %o21: u32
    %o22: field
    %o23: u32
    %o24: u32
    %o25: field
    %o26: field
    %o27: field
    %o28: u32
    %o29: field
    %o30: u32
    %o31: field
    %o32: field
Instructions:
    assert %i1(BN) == 45 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w260 = %i7(BP)
    field %w68 = %i8
    u32 %w69 = %i9
    field %w89 = %i10
    u32 %w60 = %i11
    u32 %w261 = %i12
    u32 %w64 = %i13
    u32 %w62 = %i14
    field %w72 = %i15
    field %w73 = %i16
    u32 %w61 = %i17
    field %w91 = %i18
    field %w94 = %i19
    field %w75 = %i20
    u32 %w78 = %i21
    field %w98 = %i22
    u32 %w99 = %i23
    u32 %w100 = %i24
    field %w102 = %i25
    field %w63 = %i26
    field %w54 = %i27
    u32 %w55 = %i28
    field %w56 = %i29
    u32 %w57 = %i30
    field %w58 = %i31
    field %w59 = %i32
    field %w262 = %w58[%w100]
    field %w263 = %w262[%w78]
    field %w264 = %w263[%w261]
    %w94 = %w94 * %w264
    %w261 = %w261 + 1 <U32>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w260
    assert %o8 == %w68
    assert %o9 == %w69
    assert %o10 == %w89
    assert %o11 == %w60
    assert %o12 == %w261
    assert %o13 == %w64
    assert %o14 == %w62
    assert %o15 == %w72
    assert %o16 == %w73
    assert %o17 == %w61
    assert %o18 == %w91
    assert %o19 == %w94
    assert %o20 == %w75
    assert %o21 == %w78
    assert %o22 == %w98
    assert %o23 == %w99
    assert %o24 == %w100
    assert %o25 == %w102
    assert %o26 == %w63
    assert %o27 == %w54
    assert %o28 == %w55
    assert %o29 == %w56
    assert %o30 == %w57
    assert %o31 == %w58
    assert %o32 == %w59
    assert %o1(BN) == %w261 != %w69 ? 45 <Field> : 46 <Field>
Transition:
    %w261 != %w69 ? -> 45 : -> 46

Block 46:
Func: main, Scope: 9
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: field
    %i9: u32
    %i10: field
    %i11: u32
    %i13: u32
    %i14: u32
    %i15: field
    %i16: field
    %i17: u32
    %i18: field
    %i19: field
    %i20: field
    %i21: u32
    %i22: field
    %i23: u32
    %i24: u32
    %i25: field
    %i26: field
    %i27: field
    %i28: u32
    %i29: field
    %i30: u32
    %i31: field
    %i32: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): u32
    %o8: field
    %o9: u32
    %o10: u32
    %o11: u32
    %o12: u32
    %o13: field
    %o14: field
    %o15: u32
    %o16: field
    %o17: field
    %o18: field
    %o19: u32
    %o20: field
    %o21: field
    %o22: u32
    %o23: u32
    %o24: field
    %o25: field
    %o26: field
    %o27: u32
    %o28: field
    %o29: u32
    %o30: field
    %o31: field
    %o32: field
    %o33: field
Instructions:
    assert %i1(BN) == 46 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w260 = %i7(BP)
    field %w68 = %i8
    u32 %w69 = %i9
    field %w89 = %i10
    u32 %w60 = %i11
    u32 %w64 = %i13
    u32 %w62 = %i14
    field %w72 = %i15
    field %w73 = %i16
    u32 %w61 = %i17
    field %w91 = %i18
    field %w94 = %i19
    field %w75 = %i20
    u32 %w78 = %i21
    field %w98 = %i22
    u32 %w99 = %i23
    u32 %w100 = %i24
    field %w102 = %i25
    field %w63 = %i26
    field %w54 = %i27
    u32 %w55 = %i28
    field %w56 = %i29
    u32 %w57 = %i30
    field %w58 = %i31
    field %w59 = %i32
    u32 %w90 = %w99
    field %w103 = %w91
    field %w104 = %w98
    %PHY[%SP + 0] = %w4(SP) <field>
    %w4(SP) = %w3(RP)
    %PHY[%SP + 1] = %w260 <field>
    %PHY[%SP + 2] = %w68 <field>
    field %w97 = 47 <Field>
    %w3(RP) = %w3(RP) + 3 <Field>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w69
    assert %o8 == %w89
    assert %o9 == %w60
    assert %o10 == %w64
    assert %o11 == %w90
    assert %o12 == %w62
    assert %o13 == %w72
    assert %o14 == %w73
    assert %o15 == %w61
    assert %o16 == %w91
    assert %o17 == %w94
    assert %o18 == %w75
    assert %o19 == %w78
    assert %o20 == %w97
    assert %o21 == %w98
    assert %o22 == %w99
    assert %o23 == %w100
    assert %o24 == %w102
    assert %o25 == %w63
    assert %o26 == %w54
    assert %o27 == %w55
    assert %o28 == %w56
    assert %o29 == %w57
    assert %o30 == %w58
    assert %o31 == %w59
    assert %o32 == %w103
    assert %o33 == %w104
    assert %o1(BN) == 5 <Field>
Transition: -> 5

Block 47:
Func: main, Scope: 8
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i2(RET): field
    %i5(RP): field
    %i3(TS): field
    %i8: u32
    %i9: field
    %i10: u32
    %i11: u32
    %i12: u32
    %i13: field
    %i14: field
    %i15: u32
    %i16: field
    %i19: field
    %i20: field
    %i23: u32
    %i24: field
    %i25: u32
    %i26: u32
    %i28: field
    %i29: field
    %i30: field
    %i31: u32
    %i32: field
    %i33: u32
    %i34: field
    %i35: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: u32
    %o9: field
    %o10: u32
    %o11: u32
    %o12: u32
    %o13: field
    %o14: field
    %o15: u32
    %o16: field
    %o17: field
    %o18: u32
    %o19: field
    %o20: u32
    %o21: u32
    %o22: field
    %o23: field
    %o24: field
    %o25: u32
    %o26: field
    %o27: u32
    %o28: field
    %o29: field
Instructions:
    assert %i1(BN) == 47 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w111 = %i2(RET)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    u32 %w69 = %i8
    field %w89 = %i9
    u32 %w60 = %i10
    u32 %w64 = %i11
    u32 %w62 = %i12
    field %w72 = %i13
    field %w73 = %i14
    u32 %w61 = %i15
    field %w91 = %i16
    field %w94 = %i19
    field %w75 = %i20
    u32 %w78 = %i23
    field %w98 = %i24
    u32 %w99 = %i25
    u32 %w100 = %i26
    field %w102 = %i28
    field %w63 = %i29
    field %w54 = %i30
    u32 %w55 = %i31
    field %w56 = %i32
    u32 %w57 = %i33
    field %w58 = %i34
    field %w59 = %i35
    field %w68 = %PHY[%BP + 2]
    field %w260 = %PHY[%BP + 1]
    field %w4(SP) = %PHY[%BP + 0]
    field %w265 = %w111
    %w89 = %w89 + %w265 * %w260 * %w94
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w68
    assert %o8 == %w69
    assert %o9 == %w89
    assert %o10 == %w60
    assert %o11 == %w64
    assert %o12 == %w62
    assert %o13 == %w72
    assert %o14 == %w73
    assert %o15 == %w61
    assert %o16 == %w91
    assert %o17 == %w75
    assert %o18 == %w78
    assert %o19 == %w98
    assert %o20 == %w99
    assert %o21 == %w100
    assert %o22 == %w102
    assert %o23 == %w63
    assert %o24 == %w54
    assert %o25 == %w55
    assert %o26 == %w56
    assert %o27 == %w57
    assert %o28 == %w58
    assert %o29 == %w59
    assert %o1(BN) == 48 <Field>
Transition: -> 48

Block 48:
Func: main, Scope: 7
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: u32
    %i9: field
    %i10: u32
    %i11: u32
    %i12: u32
    %i13: field
    %i14: field
    %i15: u32
    %i16: field
    %i17: field
    %i18: u32
    %i19: field
    %i20: u32
    %i21: u32
    %i22: field
    %i23: field
    %i24: field
    %i25: u32
    %i26: field
    %i27: u32
    %i28: field
    %i29: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: u32
    %o9: field
    %o10: u32
    %o11: u32
    %o12: u32
    %o13: field
    %o14: field
    %o15: u32
    %o16: field
    %o17: field
    %o18: u32
    %o19: field
    %o20: u32
    %o21: u32
    %o22: field
    %o23: field
    %o24: field
    %o25: u32
    %o26: field
    %o27: u32
    %o28: field
    %o29: field
Instructions:
    assert %i1(BN) == 48 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    u32 %w69 = %i8
    field %w89 = %i9
    u32 %w60 = %i10
    u32 %w64 = %i11
    u32 %w62 = %i12
    field %w72 = %i13
    field %w73 = %i14
    u32 %w61 = %i15
    field %w91 = %i16
    field %w75 = %i17
    u32 %w78 = %i18
    field %w98 = %i19
    u32 %w99 = %i20
    u32 %w100 = %i21
    field %w102 = %i22
    field %w63 = %i23
    field %w54 = %i24
    u32 %w55 = %i25
    field %w56 = %i26
    u32 %w57 = %i27
    field %w58 = %i28
    field %w59 = %i29
    %w100 = %w100 + 1 <U32>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w68
    assert %o8 == %w69
    assert %o9 == %w89
    assert %o10 == %w60
    assert %o11 == %w64
    assert %o12 == %w62
    assert %o13 == %w72
    assert %o14 == %w73
    assert %o15 == %w61
    assert %o16 == %w91
    assert %o17 == %w75
    assert %o18 == %w78
    assert %o19 == %w98
    assert %o20 == %w99
    assert %o21 == %w100
    assert %o22 == %w102
    assert %o23 == %w63
    assert %o24 == %w54
    assert %o25 == %w55
    assert %o26 == %w56
    assert %o27 == %w57
    assert %o28 == %w58
    assert %o29 == %w59
    assert %o1(BN) == %w100 != %w57 ? 43 <Field> : 49 <Field>
Transition:
    %w100 != %w57 ? -> 43 : -> 49

Block 49:
Func: main, Scope: 5
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: u32
    %i9: field
    %i10: u32
    %i11: u32
    %i12: u32
    %i13: field
    %i14: field
    %i15: u32
    %i16: field
    %i17: field
    %i18: u32
    %i19: field
    %i20: u32
    %i22: field
    %i23: field
    %i24: field
    %i25: u32
    %i26: field
    %i27: u32
    %i28: field
    %i29: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: u32
    %o9: field
    %o10: u32
    %o11: u32
    %o12: u32
    %o13: field
    %o14: field
    %o15: u32
    %o16: field
    %o17: field
    %o18: u32
    %o19: field
    %o20: u32
    %o21: u32
    %o22: field
    %o23: field
    %o24: field
    %o25: u32
    %o26: field
    %o27: u32
    %o28: field
    %o29: field
Instructions:
    assert %i1(BN) == 49 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    u32 %w69 = %i8
    field %w89 = %i9
    u32 %w60 = %i10
    u32 %w64 = %i11
    u32 %w62 = %i12
    field %w72 = %i13
    field %w73 = %i14
    u32 %w61 = %i15
    field %w91 = %i16
    field %w75 = %i17
    u32 %w78 = %i18
    field %w98 = %i19
    u32 %w99 = %i20
    field %w102 = %i22
    field %w63 = %i23
    field %w54 = %i24
    u32 %w55 = %i25
    field %w56 = %i26
    u32 %w57 = %i27
    field %w58 = %i28
    field %w59 = %i29
    u32 %w101 = 0 <U32>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w68
    assert %o8 == %w69
    assert %o9 == %w89
    assert %o10 == %w60
    assert %o11 == %w64
    assert %o12 == %w62
    assert %o13 == %w72
    assert %o14 == %w73
    assert %o15 == %w61
    assert %o16 == %w91
    assert %o17 == %w75
    assert %o18 == %w78
    assert %o19 == %w98
    assert %o20 == %w99
    assert %o21 == %w101
    assert %o22 == %w102
    assert %o23 == %w63
    assert %o24 == %w54
    assert %o25 == %w55
    assert %o26 == %w56
    assert %o27 == %w57
    assert %o28 == %w58
    assert %o29 == %w59
    assert %o1(BN) == %w101 != %w55 ? 50 <Field> : 54 <Field>
Transition:
    %w101 != %w55 ? -> 50 : -> 54

Block 50:
Func: main, Scope: 6
Exec Bound: 1, While Loop: true, Num VM Ops: 1
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: u32
    %i9: field
    %i10: u32
    %i11: u32
    %i12: u32
    %i13: field
    %i14: field
    %i15: u32
    %i16: field
    %i17: field
    %i18: u32
    %i19: field
    %i20: u32
    %i21: u32
    %i22: field
    %i23: field
    %i24: field
    %i25: u32
    %i26: field
    %i27: u32
    %i28: field
    %i29: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: u32
    %o9: field
    %o10: u32
    %o11: u32
    %o12: u32
    %o13: field
    %o14: field
    %o15: u32
    %o16: field
    %o17: field
    %o18: u32
    %o19: field
    %o20: u32
    %o21: u32
    %o22: field
    %o23: field
    %o24: field
    %o25: u32
    %o26: field
    %o27: u32
    %o28: field
    %o29: field
Instructions:
    assert %i1(BN) == 50 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    u32 %w69 = %i8
    field %w89 = %i9
    u32 %w60 = %i10
    u32 %w64 = %i11
    u32 %w62 = %i12
    field %w72 = %i13
    field %w73 = %i14
    u32 %w61 = %i15
    field %w91 = %i16
    field %w75 = %i17
    u32 %w78 = %i18
    field %w98 = %i19
    u32 %w99 = %i20
    u32 %w101 = %i21
    field %w102 = %i22
    field %w63 = %i23
    field %w54 = %i24
    u32 %w55 = %i25
    field %w56 = %i26
    u32 %w57 = %i27
    field %w58 = %i28
    field %w59 = %i29
    u32 %w266 = %w54[%w101]
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w68
    assert %o8 == %w69
    assert %o9 == %w89
    assert %o10 == %w60
    assert %o11 == %w64
    assert %o12 == %w62
    assert %o13 == %w72
    assert %o14 == %w73
    assert %o15 == %w61
    assert %o16 == %w91
    assert %o17 == %w75
    assert %o18 == %w78
    assert %o19 == %w98
    assert %o20 == %w99
    assert %o21 == %w101
    assert %o22 == %w102
    assert %o23 == %w63
    assert %o24 == %w54
    assert %o25 == %w55
    assert %o26 == %w56
    assert %o27 == %w57
    assert %o28 == %w58
    assert %o29 == %w59
    assert %o1(BN) == %w266 < %w78 ? 51 <Field> : 53 <Field>
Transition:
    %w266 < %w78 ? -> 51 : -> 53

Block 51:
Func: main, Scope: 8
Exec Bound: 1, While Loop: false, Num VM Ops: 14
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: u32
    %i9: field
    %i10: u32
    %i11: u32
    %i12: u32
    %i13: field
    %i14: field
    %i15: u32
    %i16: field
    %i17: field
    %i18: u32
    %i19: field
    %i20: u32
    %i21: u32
    %i22: field
    %i23: field
    %i24: field
    %i25: u32
    %i26: field
    %i27: u32
    %i28: field
    %i29: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): u32
    %o8: field
    %o9: u32
    %o10: u32
    %o11: u32
    %o12: u32
    %o13: field
    %o14: field
    %o15: u32
    %o16: field
    %o34: field
    %o35: field
    %o18: field
    %o36: field
    %o37: field
    %o19: u32
    %o20: field
    %o21: field
    %o22: u32
    %o38: u32
    %o24: field
    %o25: field
    %o26: field
    %o27: u32
    %o28: field
    %o29: u32
    %o30: field
    %o31: field
    %o32: field
    %o33: field
Instructions:
    assert %i1(BN) == 51 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    u32 %w69 = %i8
    field %w89 = %i9
    u32 %w60 = %i10
    u32 %w64 = %i11
    u32 %w62 = %i12
    field %w72 = %i13
    field %w73 = %i14
    u32 %w61 = %i15
    field %w91 = %i16
    field %w75 = %i17
    u32 %w78 = %i18
    field %w98 = %i19
    u32 %w99 = %i20
    u32 %w101 = %i21
    field %w102 = %i22
    field %w63 = %i23
    field %w54 = %i24
    u32 %w55 = %i25
    field %w56 = %i26
    u32 %w57 = %i27
    field %w58 = %i28
    field %w59 = %i29
    field %w267 = %w68[%w64 + 2 <U32> * %w101]
    field %w268 = %w267
    field %w267 = %w68[%w64 + 2 <U32> * %w101 + 1 <U32>]
    field %w269 = %w267
    field %w270 = %w56[%w101]
    field %w271 = %w270[%w78]
    field %w272 = %w271[0 <Field>]
    field %w92 = %w272
    field %w270 = %w56[%w101]
    field %w271 = %w270[%w78]
    field %w272 = %w271[1 <Field>]
    field %w93 = %w272
    field %w270 = %w56[%w101]
    field %w271 = %w270[%w78]
    field %w272 = %w271[2 <Field>]
    field %w95 = %w272
    field %w270 = %w56[%w101]
    field %w271 = %w270[%w78]
    field %w272 = %w271[3 <Field>]
    field %w96 = %w272
    u32 %w90 = %w99
    field %w103 = %w91
    field %w104 = %w98
    %PHY[%SP + 0] = %w4(SP) <field>
    %w4(SP) = %w3(RP)
    %PHY[%SP + 1] = %w269 <field>
    %PHY[%SP + 2] = %w268 <field>
    %PHY[%SP + 3] = %w68 <field>
    field %w97 = 52 <Field>
    %w3(RP) = %w3(RP) + 4 <Field>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w69
    assert %o8 == %w89
    assert %o9 == %w60
    assert %o10 == %w64
    assert %o11 == %w90
    assert %o12 == %w62
    assert %o13 == %w72
    assert %o14 == %w73
    assert %o15 == %w61
    assert %o16 == %w91
    assert %o34 == %w92
    assert %o35 == %w93
    assert %o18 == %w75
    assert %o36 == %w95
    assert %o37 == %w96
    assert %o19 == %w78
    assert %o20 == %w97
    assert %o21 == %w98
    assert %o22 == %w99
    assert %o38 == %w101
    assert %o24 == %w102
    assert %o25 == %w63
    assert %o26 == %w54
    assert %o27 == %w55
    assert %o28 == %w56
    assert %o29 == %w57
    assert %o30 == %w58
    assert %o31 == %w59
    assert %o32 == %w103
    assert %o33 == %w104
    assert %o1(BN) == 5 <Field>
Transition: -> 5

Block 52:
Func: main, Scope: 8
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i2(RET): field
    %i5(RP): field
    %i3(TS): field
    %i8: u32
    %i9: field
    %i10: u32
    %i11: u32
    %i12: u32
    %i13: field
    %i14: field
    %i15: u32
    %i16: field
    %i17: field
    %i18: field
    %i20: field
    %i21: field
    %i22: field
    %i23: u32
    %i24: field
    %i25: u32
    %i27: u32
    %i28: field
    %i29: field
    %i30: field
    %i31: u32
    %i32: field
    %i33: u32
    %i34: field
    %i35: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: u32
    %o9: field
    %o10: u32
    %o11: u32
    %o12: u32
    %o13: field
    %o14: field
    %o15: u32
    %o16: field
    %o17: field
    %o18: u32
    %o19: field
    %o20: u32
    %o21: u32
    %o22: field
    %o23: field
    %o24: field
    %o25: u32
    %o26: field
    %o27: u32
    %o28: field
    %o29: field
Instructions:
    assert %i1(BN) == 52 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w111 = %i2(RET)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    u32 %w69 = %i8
    field %w89 = %i9
    u32 %w60 = %i10
    u32 %w64 = %i11
    u32 %w62 = %i12
    field %w72 = %i13
    field %w73 = %i14
    u32 %w61 = %i15
    field %w91 = %i16
    field %w92 = %i17
    field %w93 = %i18
    field %w75 = %i20
    field %w95 = %i21
    field %w96 = %i22
    u32 %w78 = %i23
    field %w98 = %i24
    u32 %w99 = %i25
    u32 %w101 = %i27
    field %w102 = %i28
    field %w63 = %i29
    field %w54 = %i30
    u32 %w55 = %i31
    field %w56 = %i32
    u32 %w57 = %i33
    field %w58 = %i34
    field %w59 = %i35
    field %w68 = %PHY[%BP + 3]
    field %w268 = %PHY[%BP + 2]
    field %w269 = %PHY[%BP + 1]
    field %w4(SP) = %PHY[%BP + 0]
    field %w273 = %w111
    %w89 = %w89 + %w273 * %w268 * %w92 * %w96 + %w93 * %w95 + %w269 * %w95 * %w96
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w68
    assert %o8 == %w69
    assert %o9 == %w89
    assert %o10 == %w60
    assert %o11 == %w64
    assert %o12 == %w62
    assert %o13 == %w72
    assert %o14 == %w73
    assert %o15 == %w61
    assert %o16 == %w91
    assert %o17 == %w75
    assert %o18 == %w78
    assert %o19 == %w98
    assert %o20 == %w99
    assert %o21 == %w101
    assert %o22 == %w102
    assert %o23 == %w63
    assert %o24 == %w54
    assert %o25 == %w55
    assert %o26 == %w56
    assert %o27 == %w57
    assert %o28 == %w58
    assert %o29 == %w59
    assert %o1(BN) == 53 <Field>
Transition: -> 53

Block 53:
Func: main, Scope: 7
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: u32
    %i9: field
    %i10: u32
    %i11: u32
    %i12: u32
    %i13: field
    %i14: field
    %i15: u32
    %i16: field
    %i17: field
    %i18: u32
    %i19: field
    %i20: u32
    %i21: u32
    %i22: field
    %i23: field
    %i24: field
    %i25: u32
    %i26: field
    %i27: u32
    %i28: field
    %i29: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: u32
    %o9: field
    %o10: u32
    %o11: u32
    %o12: u32
    %o13: field
    %o14: field
    %o15: u32
    %o16: field
    %o17: field
    %o18: u32
    %o19: field
    %o20: u32
    %o21: u32
    %o22: field
    %o23: field
    %o24: field
    %o25: u32
    %o26: field
    %o27: u32
    %o28: field
    %o29: field
Instructions:
    assert %i1(BN) == 53 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    u32 %w69 = %i8
    field %w89 = %i9
    u32 %w60 = %i10
    u32 %w64 = %i11
    u32 %w62 = %i12
    field %w72 = %i13
    field %w73 = %i14
    u32 %w61 = %i15
    field %w91 = %i16
    field %w75 = %i17
    u32 %w78 = %i18
    field %w98 = %i19
    u32 %w99 = %i20
    u32 %w101 = %i21
    field %w102 = %i22
    field %w63 = %i23
    field %w54 = %i24
    u32 %w55 = %i25
    field %w56 = %i26
    u32 %w57 = %i27
    field %w58 = %i28
    field %w59 = %i29
    %w101 = %w101 + 1 <U32>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w68
    assert %o8 == %w69
    assert %o9 == %w89
    assert %o10 == %w60
    assert %o11 == %w64
    assert %o12 == %w62
    assert %o13 == %w72
    assert %o14 == %w73
    assert %o15 == %w61
    assert %o16 == %w91
    assert %o17 == %w75
    assert %o18 == %w78
    assert %o19 == %w98
    assert %o20 == %w99
    assert %o21 == %w101
    assert %o22 == %w102
    assert %o23 == %w63
    assert %o24 == %w54
    assert %o25 == %w55
    assert %o26 == %w56
    assert %o27 == %w57
    assert %o28 == %w58
    assert %o29 == %w59
    assert %o1(BN) == %w101 != %w55 ? 50 <Field> : 54 <Field>
Transition:
    %w101 != %w55 ? -> 50 : -> 54

Block 54:
Func: main, Scope: 5
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: u32
    %i9: field
    %i10: u32
    %i11: u32
    %i12: u32
    %i13: field
    %i14: field
    %i15: u32
    %i17: field
    %i18: u32
    %i19: field
    %i20: u32
    %i22: field
    %i23: field
    %i24: field
    %i25: u32
    %i26: field
    %i27: u32
    %i28: field
    %i29: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: u32
    %o9: u32
    %o10: u32
    %o11: u32
    %o12: u32
    %o13: field
    %o14: field
    %o15: u32
    %o16: field
    %o17: field
    %o18: u32
    %o19: field
    %o20: u32
    %o21: field
    %o22: field
    %o23: field
    %o24: u32
    %o25: field
    %o26: u32
    %o27: field
    %o28: field
Instructions:
    assert %i1(BN) == 54 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    u32 %w69 = %i8
    field %w89 = %i9
    u32 %w60 = %i10
    u32 %w64 = %i11
    u32 %w62 = %i12
    field %w72 = %i13
    field %w73 = %i14
    u32 %w61 = %i15
    field %w75 = %i17
    u32 %w78 = %i18
    field %w98 = %i19
    u32 %w99 = %i20
    field %w102 = %i22
    field %w63 = %i23
    field %w54 = %i24
    u32 %w55 = %i25
    field %w56 = %i26
    u32 %w57 = %i27
    field %w58 = %i28
    field %w59 = %i29
    assert %w89 == %w102
    field[%w62] %w274
    field[%w99 + %w62] %w79
    u32 %w275 = 0 <U32>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w68
    assert %o8 == %w69
    assert %o9 == %w60
    assert %o10 == %w275
    assert %o11 == %w64
    assert %o12 == %w62
    assert %o13 == %w72
    assert %o14 == %w73
    assert %o15 == %w61
    assert %o16 == %w75
    assert %o17 == %w274
    assert %o18 == %w78
    assert %o19 == %w98
    assert %o20 == %w99
    assert %o21 == %w79
    assert %o22 == %w63
    assert %o23 == %w54
    assert %o24 == %w55
    assert %o25 == %w56
    assert %o26 == %w57
    assert %o27 == %w58
    assert %o28 == %w59
    assert %o1(BN) == %w275 != %w99 ? 55 <Field> : 56 <Field>
Transition:
    %w275 != %w99 ? -> 55 : -> 56

Block 55:
Func: main, Scope: 6
Exec Bound: 1, While Loop: true, Num VM Ops: 2
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: u32
    %i9: u32
    %i10: u32
    %i11: u32
    %i12: u32
    %i13: field
    %i14: field
    %i15: u32
    %i16: field
    %i17: field
    %i18: u32
    %i19: field
    %i20: u32
    %i21: field
    %i22: field
    %i23: field
    %i24: u32
    %i25: field
    %i26: u32
    %i27: field
    %i28: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: u32
    %o9: u32
    %o10: u32
    %o11: u32
    %o12: u32
    %o13: field
    %o14: field
    %o15: u32
    %o16: field
    %o17: field
    %o18: u32
    %o19: field
    %o20: u32
    %o21: field
    %o22: field
    %o23: field
    %o24: u32
    %o25: field
    %o26: u32
    %o27: field
    %o28: field
Instructions:
    assert %i1(BN) == 55 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    u32 %w69 = %i8
    u32 %w60 = %i9
    u32 %w275 = %i10
    u32 %w64 = %i11
    u32 %w62 = %i12
    field %w72 = %i13
    field %w73 = %i14
    u32 %w61 = %i15
    field %w75 = %i16
    field %w274 = %i17
    u32 %w78 = %i18
    field %w98 = %i19
    u32 %w99 = %i20
    field %w79 = %i21
    field %w63 = %i22
    field %w54 = %i23
    u32 %w55 = %i24
    field %w56 = %i25
    u32 %w57 = %i26
    field %w58 = %i27
    field %w59 = %i28
    field %w276 = %w98[%w275]
    %w79[%w275] = %w276 <field>
    %w275 = %w275 + 1 <U32>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w68
    assert %o8 == %w69
    assert %o9 == %w60
    assert %o10 == %w275
    assert %o11 == %w64
    assert %o12 == %w62
    assert %o13 == %w72
    assert %o14 == %w73
    assert %o15 == %w61
    assert %o16 == %w75
    assert %o17 == %w274
    assert %o18 == %w78
    assert %o19 == %w98
    assert %o20 == %w99
    assert %o21 == %w79
    assert %o22 == %w63
    assert %o23 == %w54
    assert %o24 == %w55
    assert %o25 == %w56
    assert %o26 == %w57
    assert %o27 == %w58
    assert %o28 == %w59
    assert %o1(BN) == %w275 != %w99 ? 55 <Field> : 56 <Field>
Transition:
    %w275 != %w99 ? -> 55 : -> 56

Block 56:
Func: main, Scope: 5
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: u32
    %i9: u32
    %i11: u32
    %i12: u32
    %i13: field
    %i14: field
    %i15: u32
    %i16: field
    %i17: field
    %i18: u32
    %i20: u32
    %i21: field
    %i22: field
    %i23: field
    %i24: u32
    %i25: field
    %i26: u32
    %i27: field
    %i28: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: u32
    %o9: u32
    %o10: u32
    %o11: u32
    %o12: u32
    %o13: field
    %o14: field
    %o15: u32
    %o16: field
    %o17: field
    %o18: u32
    %o19: u32
    %o20: field
    %o21: field
    %o22: field
    %o23: u32
    %o24: field
    %o25: u32
    %o26: field
    %o27: field
Instructions:
    assert %i1(BN) == 56 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    u32 %w69 = %i8
    u32 %w60 = %i9
    u32 %w64 = %i11
    u32 %w62 = %i12
    field %w72 = %i13
    field %w73 = %i14
    u32 %w61 = %i15
    field %w75 = %i16
    field %w274 = %i17
    u32 %w78 = %i18
    u32 %w99 = %i20
    field %w79 = %i21
    field %w63 = %i22
    field %w54 = %i23
    u32 %w55 = %i24
    field %w56 = %i25
    u32 %w57 = %i26
    field %w58 = %i27
    field %w59 = %i28
    u32 %w277 = 0 <U32>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w68
    assert %o8 == %w69
    assert %o9 == %w60
    assert %o10 == %w277
    assert %o11 == %w64
    assert %o12 == %w62
    assert %o13 == %w72
    assert %o14 == %w73
    assert %o15 == %w61
    assert %o16 == %w75
    assert %o17 == %w274
    assert %o18 == %w78
    assert %o19 == %w99
    assert %o20 == %w79
    assert %o21 == %w63
    assert %o22 == %w54
    assert %o23 == %w55
    assert %o24 == %w56
    assert %o25 == %w57
    assert %o26 == %w58
    assert %o27 == %w59
    assert %o1(BN) == %w277 != %w62 ? 57 <Field> : 59 <Field>
Transition:
    %w277 != %w62 ? -> 57 : -> 59

Block 57:
Func: main, Scope: 6
Exec Bound: 1, While Loop: true, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: u32
    %i9: u32
    %i10: u32
    %i11: u32
    %i12: u32
    %i13: field
    %i14: field
    %i15: u32
    %i16: field
    %i17: field
    %i18: u32
    %i19: u32
    %i20: field
    %i21: field
    %i22: field
    %i23: u32
    %i24: field
    %i25: u32
    %i26: field
    %i27: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o10: u32
    %o11: u32
    %o24: field
    %o25: field
    %o12: u32
    %o27: field
    %o30: field
    %o31: u32
    %o13: field
    %o32: u32
    %o33: field
    %o14: field
    %o15: field
    %o16: u32
    %o17: field
    %o18: u32
    %o19: field
    %o20: field
Instructions:
    assert %i1(BN) == 57 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    u32 %w69 = %i8
    u32 %w60 = %i9
    u32 %w277 = %i10
    u32 %w64 = %i11
    u32 %w62 = %i12
    field %w72 = %i13
    field %w73 = %i14
    u32 %w61 = %i15
    field %w75 = %i16
    field %w274 = %i17
    u32 %w78 = %i18
    u32 %w99 = %i19
    field %w79 = %i20
    field %w63 = %i21
    field %w54 = %i22
    u32 %w55 = %i23
    field %w56 = %i24
    u32 %w57 = %i25
    field %w58 = %i26
    field %w59 = %i27
    field %w66 = %w63
    %PHY[%SP + 0] = %w4(SP) <field>
    %w4(SP) = %w3(RP)
    %PHY[%SP + 1] = %w68 <field>
    %PHY[%SP + 2] = %w69 <u32>
    %PHY[%SP + 3] = %w60 <u32>
    %PHY[%SP + 4] = %w277 <u32>
    field %w67 = 58 <Field>
    %w3(RP) = %w3(RP) + 5 <Field>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o10 == %w64
    assert %o11 == %w62
    assert %o24 == %w72
    assert %o25 == %w73
    assert %o12 == %w61
    assert %o27 == %w75
    assert %o30 == %w274
    assert %o31 == %w78
    assert %o13 == %w67
    assert %o32 == %w99
    assert %o33 == %w79
    assert %o14 == %w66
    assert %o15 == %w54
    assert %o16 == %w55
    assert %o17 == %w56
    assert %o18 == %w57
    assert %o19 == %w58
    assert %o20 == %w59
    assert %o1(BN) == 70 <Field>
Transition: -> 70

Block 58:
Func: main, Scope: 7
Exec Bound: 1, While Loop: false, Num VM Ops: 2
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i7(BP): field
    %i5(RP): field
    %i3(TS): field
    %i12: u32
    %i15: u32
    %i16: field
    %i17: field
    %i18: u32
    %i20: field
    %i23: field
    %i24: u32
    %i25: u32
    %i26: field
    %i28: field
    %i29: u32
    %i30: field
    %i31: u32
    %i32: field
    %i33: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: u32
    %o9: u32
    %o10: u32
    %o11: u32
    %o12: u32
    %o13: field
    %o14: field
    %o15: u32
    %o16: field
    %o17: field
    %o18: u32
    %o19: u32
    %o20: field
    %o21: field
    %o22: field
    %o23: u32
    %o24: field
    %o25: u32
    %o26: field
    %o27: field
Instructions:
    assert %i1(BN) == 58 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w200 = %i7(BP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    u32 %w64 = %i12
    u32 %w62 = %i15
    field %w72 = %i16
    field %w73 = %i17
    u32 %w61 = %i18
    field %w75 = %i20
    field %w274 = %i23
    u32 %w78 = %i24
    u32 %w99 = %i25
    field %w79 = %i26
    field %w54 = %i28
    u32 %w55 = %i29
    field %w56 = %i30
    u32 %w57 = %i31
    field %w58 = %i32
    field %w59 = %i33
    u32 %w277 = %PHY[%BP + 4]
    u32 %w60 = %PHY[%BP + 3]
    u32 %w69 = %PHY[%BP + 2]
    field %w68 = %PHY[%BP + 1]
    field %w4(SP) = %PHY[%BP + 0]
    field %w278 = %w200
    field %w63 = %w278
    %w274[%w277] = %w63 <field>
    %w79[%w99 + %w277] = %w63 <field>
    %w277 = %w277 + 1 <U32>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w68
    assert %o8 == %w69
    assert %o9 == %w60
    assert %o10 == %w277
    assert %o11 == %w64
    assert %o12 == %w62
    assert %o13 == %w72
    assert %o14 == %w73
    assert %o15 == %w61
    assert %o16 == %w75
    assert %o17 == %w274
    assert %o18 == %w78
    assert %o19 == %w99
    assert %o20 == %w79
    assert %o21 == %w63
    assert %o22 == %w54
    assert %o23 == %w55
    assert %o24 == %w56
    assert %o25 == %w57
    assert %o26 == %w58
    assert %o27 == %w59
    assert %o1(BN) == %w277 != %w62 ? 57 <Field> : 59 <Field>
Transition:
    %w277 != %w62 ? -> 57 : -> 59

Block 59:
Func: main, Scope: 5
Exec Bound: 1, While Loop: false, Num VM Ops: 1
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: u32
    %i9: u32
    %i11: u32
    %i12: u32
    %i13: field
    %i14: field
    %i15: u32
    %i16: field
    %i17: field
    %i18: u32
    %i20: field
    %i21: field
    %i22: field
    %i23: u32
    %i24: field
    %i25: u32
    %i26: field
    %i27: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: u32
    %o9: field
    %o10: u32
    %o11: u32
    %o12: u32
    %o13: u32
    %o14: field
    %o15: field
    %o16: u32
    %o17: u32
    %o18: field
    %o19: field
    %o20: u32
    %o21: u32
    %o22: field
    %o23: field
    %o24: field
    %o25: u32
    %o26: field
    %o27: u32
    %o28: field
    %o29: field
Instructions:
    assert %i1(BN) == 59 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    u32 %w69 = %i8
    u32 %w60 = %i9
    u32 %w64 = %i11
    u32 %w62 = %i12
    field %w72 = %i13
    field %w73 = %i14
    u32 %w61 = %i15
    field %w75 = %i16
    field %w274 = %i17
    u32 %w78 = %i18
    field %w79 = %i20
    field %w63 = %i21
    field %w54 = %i22
    u32 %w55 = %i23
    field %w56 = %i24
    u32 %w57 = %i25
    field %w58 = %i26
    field %w59 = %i27
    u32 %w77 = %w62
    u32 %w279 = %w61
    field %w76 = %w274
    field[%w279] %w70
    %w70[0 <Field>] = 1 <Field> <field>
    u32 %w74 = 1 <U32>
    u32 %w71 = 0 <U32>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w68
    assert %o8 == %w69
    assert %o9 == %w70
    assert %o10 == %w60
    assert %o11 == %w71
    assert %o12 == %w64
    assert %o13 == %w62
    assert %o14 == %w72
    assert %o15 == %w73
    assert %o16 == %w74
    assert %o17 == %w61
    assert %o18 == %w75
    assert %o19 == %w76
    assert %o20 == %w77
    assert %o21 == %w78
    assert %o22 == %w79
    assert %o23 == %w63
    assert %o24 == %w54
    assert %o25 == %w55
    assert %o26 == %w56
    assert %o27 == %w57
    assert %o28 == %w58
    assert %o29 == %w59
    assert %o1(BN) == %w71 != %w77 ? 1 <Field> : 4 <Field>
Transition:
    %w71 != %w77 ? -> 1 : -> 4

Block 60:
Func: main, Scope: 6
Exec Bound: 1, While Loop: true, Num VM Ops: 1
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: field
    %i9: u32
    %i10: u32
    %i11: u32
    %i12: u32
    %i13: field
    %i14: field
    %i15: u32
    %i16: field
    %i17: field
    %i18: u32
    %i19: field
    %i20: u32
    %i21: field
    %i22: field
    %i23: u32
    %i24: field
    %i25: u32
    %i26: field
    %i27: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: field
    %o9: u32
    %o10: u32
    %o11: u32
    %o12: u32
    %o13: field
    %o14: field
    %o15: u32
    %o16: field
    %o17: field
    %o18: u32
    %o19: field
    %o20: u32
    %o21: field
    %o22: field
    %o23: u32
    %o24: field
    %o25: u32
    %o26: field
    %o27: field
Instructions:
    assert %i1(BN) == 60 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    field %w86 = %i8
    u32 %w69 = %i9
    u32 %w60 = %i10
    u32 %w64 = %i11
    u32 %w62 = %i12
    field %w72 = %i13
    field %w73 = %i14
    u32 %w61 = %i15
    field %w87 = %i16
    field %w75 = %i17
    u32 %w78 = %i18
    field %w79 = %i19
    u32 %w88 = %i20
    field %w63 = %i21
    field %w54 = %i22
    u32 %w55 = %i23
    field %w56 = %i24
    u32 %w57 = %i25
    field %w58 = %i26
    field %w59 = %i27
    u32 %w280 = %w54[%w88]
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w68
    assert %o8 == %w86
    assert %o9 == %w69
    assert %o10 == %w60
    assert %o11 == %w64
    assert %o12 == %w62
    assert %o13 == %w72
    assert %o14 == %w73
    assert %o15 == %w61
    assert %o16 == %w87
    assert %o17 == %w75
    assert %o18 == %w78
    assert %o19 == %w79
    assert %o20 == %w88
    assert %o21 == %w63
    assert %o22 == %w54
    assert %o23 == %w55
    assert %o24 == %w56
    assert %o25 == %w57
    assert %o26 == %w58
    assert %o27 == %w59
    assert %o1(BN) == %w280 < %w78 ? 61 <Field> : 64 <Field>
Transition:
    %w280 < %w78 ? -> 61 : -> 64

Block 61:
Func: main, Scope: 8
Exec Bound: 1, While Loop: false, Num VM Ops: 1
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: field
    %i9: u32
    %i10: u32
    %i11: u32
    %i12: u32
    %i13: field
    %i14: field
    %i15: u32
    %i16: field
    %i17: field
    %i18: u32
    %i19: field
    %i20: u32
    %i21: field
    %i22: field
    %i23: u32
    %i24: field
    %i25: u32
    %i26: field
    %i27: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: field
    %o9: field
    %o10: u32
    %o11: field
    %o12: u32
    %o13: u32
    %o14: u32
    %o15: u32
    %o16: field
    %o17: field
    %o18: u32
    %o19: field
    %o20: field
    %o21: u32
    %o22: field
    %o23: u32
    %o24: field
    %o25: field
    %o26: u32
    %o27: field
    %o28: u32
    %o29: field
    %o30: field
Instructions:
    assert %i1(BN) == 61 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    field %w86 = %i8
    u32 %w69 = %i9
    u32 %w60 = %i10
    u32 %w64 = %i11
    u32 %w62 = %i12
    field %w72 = %i13
    field %w73 = %i14
    u32 %w61 = %i15
    field %w87 = %i16
    field %w75 = %i17
    u32 %w78 = %i18
    field %w79 = %i19
    u32 %w88 = %i20
    field %w63 = %i21
    field %w54 = %i22
    u32 %w55 = %i23
    field %w56 = %i24
    u32 %w57 = %i25
    field %w58 = %i26
    field %w59 = %i27
    field %w281 = %w68[%w88]
    field %w282 = %w281
    field %w283 = 0 <Field>
    u32 %w284 = 0 <U32>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w282
    assert %o8 == %w68
    assert %o9 == %w86
    assert %o10 == %w69
    assert %o11 == %w283
    assert %o12 == %w60
    assert %o13 == %w284
    assert %o14 == %w64
    assert %o15 == %w62
    assert %o16 == %w72
    assert %o17 == %w73
    assert %o18 == %w61
    assert %o19 == %w87
    assert %o20 == %w75
    assert %o21 == %w78
    assert %o22 == %w79
    assert %o23 == %w88
    assert %o24 == %w63
    assert %o25 == %w54
    assert %o26 == %w55
    assert %o27 == %w56
    assert %o28 == %w57
    assert %o29 == %w58
    assert %o30 == %w59
    assert %o1(BN) == %w284 != %w69 ? 62 <Field> : 63 <Field>
Transition:
    %w284 != %w69 ? -> 62 : -> 63

Block 62:
Func: main, Scope: 10
Exec Bound: 1, While Loop: true, Num VM Ops: 4
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: field
    %i9: field
    %i10: u32
    %i11: field
    %i12: u32
    %i13: u32
    %i14: u32
    %i15: u32
    %i16: field
    %i17: field
    %i18: u32
    %i19: field
    %i20: field
    %i21: u32
    %i22: field
    %i23: u32
    %i24: field
    %i25: field
    %i26: u32
    %i27: field
    %i28: u32
    %i29: field
    %i30: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: field
    %o9: field
    %o10: u32
    %o11: field
    %o12: u32
    %o13: u32
    %o14: u32
    %o15: u32
    %o16: field
    %o17: field
    %o18: u32
    %o19: field
    %o20: field
    %o21: u32
    %o22: field
    %o23: u32
    %o24: field
    %o25: field
    %o26: u32
    %o27: field
    %o28: u32
    %o29: field
    %o30: field
Instructions:
    assert %i1(BN) == 62 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w282 = %i7(BP)
    field %w68 = %i8
    field %w86 = %i9
    u32 %w69 = %i10
    field %w283 = %i11
    u32 %w60 = %i12
    u32 %w284 = %i13
    u32 %w64 = %i14
    u32 %w62 = %i15
    field %w72 = %i16
    field %w73 = %i17
    u32 %w61 = %i18
    field %w87 = %i19
    field %w75 = %i20
    u32 %w78 = %i21
    field %w79 = %i22
    u32 %w88 = %i23
    field %w63 = %i24
    field %w54 = %i25
    u32 %w55 = %i26
    field %w56 = %i27
    u32 %w57 = %i28
    field %w58 = %i29
    field %w59 = %i30
    field %w285 = %w58[%w88]
    field %w286 = %w285[%w78]
    field %w287 = %w286[%w284]
    field %w288 = %w86[%w284]
    %w283 = %w283 + %w287 * %w288
    %w284 = %w284 + 1 <U32>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w282
    assert %o8 == %w68
    assert %o9 == %w86
    assert %o10 == %w69
    assert %o11 == %w283
    assert %o12 == %w60
    assert %o13 == %w284
    assert %o14 == %w64
    assert %o15 == %w62
    assert %o16 == %w72
    assert %o17 == %w73
    assert %o18 == %w61
    assert %o19 == %w87
    assert %o20 == %w75
    assert %o21 == %w78
    assert %o22 == %w79
    assert %o23 == %w88
    assert %o24 == %w63
    assert %o25 == %w54
    assert %o26 == %w55
    assert %o27 == %w56
    assert %o28 == %w57
    assert %o29 == %w58
    assert %o30 == %w59
    assert %o1(BN) == %w284 != %w69 ? 62 <Field> : 63 <Field>
Transition:
    %w284 != %w69 ? -> 62 : -> 63

Block 63:
Func: main, Scope: 9
Exec Bound: 1, While Loop: false, Num VM Ops: 1
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: field
    %i9: field
    %i10: u32
    %i11: field
    %i12: u32
    %i14: u32
    %i15: u32
    %i16: field
    %i17: field
    %i18: u32
    %i19: field
    %i20: field
    %i21: u32
    %i22: field
    %i23: u32
    %i24: field
    %i25: field
    %i26: u32
    %i27: field
    %i28: u32
    %i29: field
    %i30: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: field
    %o9: u32
    %o10: u32
    %o11: u32
    %o12: u32
    %o13: field
    %o14: field
    %o15: u32
    %o16: field
    %o17: field
    %o18: u32
    %o19: field
    %o20: u32
    %o21: field
    %o22: field
    %o23: u32
    %o24: field
    %o25: u32
    %o26: field
    %o27: field
Instructions:
    assert %i1(BN) == 63 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w282 = %i7(BP)
    field %w68 = %i8
    field %w86 = %i9
    u32 %w69 = %i10
    field %w283 = %i11
    u32 %w60 = %i12
    u32 %w64 = %i14
    u32 %w62 = %i15
    field %w72 = %i16
    field %w73 = %i17
    u32 %w61 = %i18
    field %w87 = %i19
    field %w75 = %i20
    u32 %w78 = %i21
    field %w79 = %i22
    u32 %w88 = %i23
    field %w63 = %i24
    field %w54 = %i25
    u32 %w55 = %i26
    field %w56 = %i27
    u32 %w57 = %i28
    field %w58 = %i29
    field %w59 = %i30
    %w75[%w88] = %w283 <field>
    %w87 = %w87 + %w282 * %w283
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w68
    assert %o8 == %w86
    assert %o9 == %w69
    assert %o10 == %w60
    assert %o11 == %w64
    assert %o12 == %w62
    assert %o13 == %w72
    assert %o14 == %w73
    assert %o15 == %w61
    assert %o16 == %w87
    assert %o17 == %w75
    assert %o18 == %w78
    assert %o19 == %w79
    assert %o20 == %w88
    assert %o21 == %w63
    assert %o22 == %w54
    assert %o23 == %w55
    assert %o24 == %w56
    assert %o25 == %w57
    assert %o26 == %w58
    assert %o27 == %w59
    assert %o1(BN) == 65 <Field>
Transition: -> 65

Block 64:
Func: main, Scope: 8
Exec Bound: 1, While Loop: false, Num VM Ops: 1
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: field
    %i9: u32
    %i10: u32
    %i11: u32
    %i12: u32
    %i13: field
    %i14: field
    %i15: u32
    %i16: field
    %i17: field
    %i18: u32
    %i19: field
    %i20: u32
    %i21: field
    %i22: field
    %i23: u32
    %i24: field
    %i25: u32
    %i26: field
    %i27: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: field
    %o9: u32
    %o10: u32
    %o11: u32
    %o12: u32
    %o13: field
    %o14: field
    %o15: u32
    %o16: field
    %o17: field
    %o18: u32
    %o19: field
    %o20: u32
    %o21: field
    %o22: field
    %o23: u32
    %o24: field
    %o25: u32
    %o26: field
    %o27: field
Instructions:
    assert %i1(BN) == 64 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    field %w86 = %i8
    u32 %w69 = %i9
    u32 %w60 = %i10
    u32 %w64 = %i11
    u32 %w62 = %i12
    field %w72 = %i13
    field %w73 = %i14
    u32 %w61 = %i15
    field %w87 = %i16
    field %w75 = %i17
    u32 %w78 = %i18
    field %w79 = %i19
    u32 %w88 = %i20
    field %w63 = %i21
    field %w54 = %i22
    u32 %w55 = %i23
    field %w56 = %i24
    u32 %w57 = %i25
    field %w58 = %i26
    field %w59 = %i27
    %w75[%w88] = 0 <Field> <field>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w68
    assert %o8 == %w86
    assert %o9 == %w69
    assert %o10 == %w60
    assert %o11 == %w64
    assert %o12 == %w62
    assert %o13 == %w72
    assert %o14 == %w73
    assert %o15 == %w61
    assert %o16 == %w87
    assert %o17 == %w75
    assert %o18 == %w78
    assert %o19 == %w79
    assert %o20 == %w88
    assert %o21 == %w63
    assert %o22 == %w54
    assert %o23 == %w55
    assert %o24 == %w56
    assert %o25 == %w57
    assert %o26 == %w58
    assert %o27 == %w59
    assert %o1(BN) == 65 <Field>
Transition: -> 65

Block 65:
Func: main, Scope: 7
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: field
    %i9: u32
    %i10: u32
    %i11: u32
    %i12: u32
    %i13: field
    %i14: field
    %i15: u32
    %i16: field
    %i17: field
    %i18: u32
    %i19: field
    %i20: u32
    %i21: field
    %i22: field
    %i23: u32
    %i24: field
    %i25: u32
    %i26: field
    %i27: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: field
    %o9: u32
    %o10: u32
    %o11: u32
    %o12: u32
    %o13: field
    %o14: field
    %o15: u32
    %o16: field
    %o17: field
    %o18: u32
    %o19: field
    %o20: u32
    %o21: field
    %o22: field
    %o23: u32
    %o24: field
    %o25: u32
    %o26: field
    %o27: field
Instructions:
    assert %i1(BN) == 65 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    field %w86 = %i8
    u32 %w69 = %i9
    u32 %w60 = %i10
    u32 %w64 = %i11
    u32 %w62 = %i12
    field %w72 = %i13
    field %w73 = %i14
    u32 %w61 = %i15
    field %w87 = %i16
    field %w75 = %i17
    u32 %w78 = %i18
    field %w79 = %i19
    u32 %w88 = %i20
    field %w63 = %i21
    field %w54 = %i22
    u32 %w55 = %i23
    field %w56 = %i24
    u32 %w57 = %i25
    field %w58 = %i26
    field %w59 = %i27
    %w88 = %w88 + 1 <U32>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w68
    assert %o8 == %w86
    assert %o9 == %w69
    assert %o10 == %w60
    assert %o11 == %w64
    assert %o12 == %w62
    assert %o13 == %w72
    assert %o14 == %w73
    assert %o15 == %w61
    assert %o16 == %w87
    assert %o17 == %w75
    assert %o18 == %w78
    assert %o19 == %w79
    assert %o20 == %w88
    assert %o21 == %w63
    assert %o22 == %w54
    assert %o23 == %w55
    assert %o24 == %w56
    assert %o25 == %w57
    assert %o26 == %w58
    assert %o27 == %w59
    assert %o1(BN) == %w88 != %w57 ? 60 <Field> : 66 <Field>
Transition:
    %w88 != %w57 ? -> 60 : -> 66

Block 66:
Func: main, Scope: 5
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: field
    %i9: u32
    %i10: u32
    %i11: u32
    %i12: u32
    %i13: field
    %i14: field
    %i15: u32
    %i16: field
    %i17: field
    %i18: u32
    %i19: field
    %i21: field
    %i22: field
    %i23: u32
    %i24: field
    %i25: u32
    %i26: field
    %i27: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: field
    %o9: u32
    %o10: u32
    %o11: u32
    %o12: u32
    %o13: field
    %o14: field
    %o15: field
    %o16: u32
    %o17: field
    %o18: field
    %o19: u32
    %o20: field
    %o21: u32
    %o22: field
    %o23: field
    %o24: u32
    %o25: field
    %o26: u32
    %o27: field
    %o28: field
Instructions:
    assert %i1(BN) == 66 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    field %w86 = %i8
    u32 %w69 = %i9
    u32 %w60 = %i10
    u32 %w64 = %i11
    u32 %w62 = %i12
    field %w72 = %i13
    field %w73 = %i14
    u32 %w61 = %i15
    field %w87 = %i16
    field %w75 = %i17
    u32 %w78 = %i18
    field %w79 = %i19
    field %w63 = %i21
    field %w54 = %i22
    u32 %w55 = %i23
    field %w56 = %i24
    u32 %w57 = %i25
    field %w58 = %i26
    field %w59 = %i27
    field %w289 = 0 <Field>
    u32 %w290 = 0 <U32>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w68
    assert %o8 == %w86
    assert %o9 == %w69
    assert %o10 == %w60
    assert %o11 == %w64
    assert %o12 == %w62
    assert %o13 == %w289
    assert %o14 == %w72
    assert %o15 == %w73
    assert %o16 == %w61
    assert %o17 == %w87
    assert %o18 == %w75
    assert %o19 == %w78
    assert %o20 == %w79
    assert %o21 == %w290
    assert %o22 == %w63
    assert %o23 == %w54
    assert %o24 == %w55
    assert %o25 == %w56
    assert %o26 == %w57
    assert %o27 == %w58
    assert %o28 == %w59
    assert %o1(BN) == %w290 != %w55 ? 67 <Field> : 68 <Field>
Transition:
    %w290 != %w55 ? -> 67 : -> 68

Block 67:
Func: main, Scope: 6
Exec Bound: 1, While Loop: true, Num VM Ops: 21
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: field
    %i9: u32
    %i10: u32
    %i11: u32
    %i12: u32
    %i13: field
    %i14: field
    %i15: field
    %i16: u32
    %i17: field
    %i18: field
    %i19: u32
    %i20: field
    %i21: u32
    %i22: field
    %i23: field
    %i24: u32
    %i25: field
    %i26: u32
    %i27: field
    %i28: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: field
    %o9: u32
    %o10: u32
    %o11: u32
    %o12: u32
    %o13: field
    %o14: field
    %o15: field
    %o16: u32
    %o17: field
    %o18: field
    %o19: u32
    %o20: field
    %o21: u32
    %o22: field
    %o23: field
    %o24: u32
    %o25: field
    %o26: u32
    %o27: field
    %o28: field
Instructions:
    assert %i1(BN) == 67 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    field %w86 = %i8
    u32 %w69 = %i9
    u32 %w60 = %i10
    u32 %w64 = %i11
    u32 %w62 = %i12
    field %w289 = %i13
    field %w72 = %i14
    field %w73 = %i15
    u32 %w61 = %i16
    field %w87 = %i17
    field %w75 = %i18
    u32 %w78 = %i19
    field %w79 = %i20
    u32 %w290 = %i21
    field %w63 = %i22
    field %w54 = %i23
    u32 %w55 = %i24
    field %w56 = %i25
    u32 %w57 = %i26
    field %w58 = %i27
    field %w59 = %i28
    u32 %w291 = %w54[%w290]
    field %w293 = 0 <Field>
    field %w294 = 0 <Field>
    field %w303 = 0 <Field>
    field %w304 = 0 <Field>
    if %w291 < %w78:
        field %w292 = %w68[%w64 + 2 <U32> * %w290]
        %w293 = %w292
        field %w292 = %w68[%w64 + 2 <U32> * %w290 + 1 <U32>]
        %w294 = %w292
        field %w295 = %w56[%w290]
        field %w296 = %w295[%w78]
        field %w297 = %w296[0 <Field>]
        field %w298 = %w86[0 <Field>]
        field %w299 = %w56[%w290]
        field %w300 = %w299[%w78]
        field %w301 = %w300[1 <Field>]
        field %w302 = %w86[1 <Field>]
        %w303 = %w297 * %w298 + %w301 * %w302
        field %w295 = %w56[%w290]
        field %w296 = %w295[%w78]
        field %w297 = %w296[2 <Field>]
        field %w298 = %w86[0 <Field>]
        field %w299 = %w56[%w290]
        field %w300 = %w299[%w78]
        field %w301 = %w300[3 <Field>]
        field %w302 = %w86[1 <Field>]
        %w304 = %w297 * %w298 + %w301 * %w302
        %w72[%w290] = %w303 <field>
        %w73[%w290] = %w304 <field>
        %w289 = %w289 + %w293 * %w303 + %w294 * %w304
    else:
        %w72[%w290] = 0 <Field> <field>
        %w73[%w290] = 0 <Field> <field>
        Dummy Load
        Dummy Load
        Dummy Load
        Dummy Load
        Dummy Load
        Dummy Load
        Dummy Load
        Dummy Load
        Dummy Load
        Dummy Load
        Dummy Load
        Dummy Load
        Dummy Load
        Dummy Load
        Dummy Load
        Dummy Load
        Dummy Load
        Dummy Load
    %w290 = %w290 + 1 <U32>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w68
    assert %o8 == %w86
    assert %o9 == %w69
    assert %o10 == %w60
    assert %o11 == %w64
    assert %o12 == %w62
    assert %o13 == %w289
    assert %o14 == %w72
    assert %o15 == %w73
    assert %o16 == %w61
    assert %o17 == %w87
    assert %o18 == %w75
    assert %o19 == %w78
    assert %o20 == %w79
    assert %o21 == %w290
    assert %o22 == %w63
    assert %o23 == %w54
    assert %o24 == %w55
    assert %o25 == %w56
    assert %o26 == %w57
    assert %o27 == %w58
    assert %o28 == %w59
    assert %o1(BN) == %w290 != %w55 ? 67 <Field> : 68 <Field>
Transition:
    %w290 != %w55 ? -> 67 : -> 68

Block 68:
Func: main, Scope: 5
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i9: u32
    %i10: u32
    %i11: u32
    %i12: u32
    %i13: field
    %i14: field
    %i15: field
    %i16: u32
    %i17: field
    %i18: field
    %i19: u32
    %i20: field
    %i22: field
    %i23: field
    %i24: u32
    %i25: field
    %i26: u32
    %i27: field
    %i28: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: u32
    %o9: u32
    %o10: u32
    %o11: u32
    %o12: field
    %o13: field
    %o14: field
    %o15: field
    %o16: u32
    %o17: field
    %o18: u32
    %o19: field
    %o20: field
    %o21: u32
    %o22: field
    %o23: u32
    %o24: field
    %o25: field
Instructions:
    assert %i1(BN) == 68 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    u32 %w69 = %i9
    u32 %w60 = %i10
    u32 %w64 = %i11
    u32 %w62 = %i12
    field %w289 = %i13
    field %w72 = %i14
    field %w73 = %i15
    u32 %w61 = %i16
    field %w87 = %i17
    field %w75 = %i18
    u32 %w78 = %i19
    field %w79 = %i20
    field %w63 = %i22
    field %w54 = %i23
    u32 %w55 = %i24
    field %w56 = %i25
    u32 %w57 = %i26
    field %w58 = %i27
    field %w59 = %i28
    field %w305 = %w87 + %w289
    field %w306 = %w79
    field %w307 = %w305
    field %w247 = %w307
    field %w248 = %w306
    %w69 = %w69 * %w61
    %w78 = %w78 + 1 <U32>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w68
    assert %o8 == %w69
    assert %o9 == %w60
    assert %o10 == %w64
    assert %o11 == %w62
    assert %o12 == %w72
    assert %o13 == %w73
    assert %o14 == %w247
    assert %o15 == %w248
    assert %o16 == %w61
    assert %o17 == %w75
    assert %o18 == %w78
    assert %o19 == %w63
    assert %o20 == %w54
    assert %o21 == %w55
    assert %o22 == %w56
    assert %o23 == %w57
    assert %o24 == %w58
    assert %o25 == %w59
    assert %o1(BN) == %w78 != %w60 - 1 <U32> ? 41 <Field> : 69 <Field>
Transition:
    %w78 != %w60 - 1 <U32> ? -> 41 : -> 69

Block 69:
Func: main, Scope: 2
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
Outputs:
    %o1(BN): field
    %o2(RET): u32
Instructions:
    assert %i1(BN) == 69 <Field>
    u32 %w84 = 1 <U32>
    assert %o2(RET) == %w84
    assert %o1(BN) == 72 <Field>
Program terminates.

Block 70:
Func: append_message_field, Scope: 0
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i21: u32
    %i7(BP): field
    %i8: u32
    %i9: field
    %i10: u32
    %i22: field
    %i23: u32
    %i11: u32
    %i24: field
    %i25: field
    %i12: u32
    %i26: field
    %i27: field
    %i28: field
    %i29: field
    %i30: field
    %i31: u32
    %i13: field
    %i32: u32
    %i33: field
    %i14: field
    %i34: field
    %i15: field
    %i16: u32
    %i17: field
    %i18: u32
    %i19: field
    %i20: field
    %i35: field
    %i36: bool
    %i37: u32
    %i38: u32
    %i39: field
    %i40: u32
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o7(BP): field
    %o5(RP): field
    %o3(TS): field
    %o8: u32
    %o9: field
    %o10: u32
    %o11: field
    %o12: u32
    %o13: field
    %o14: u32
    %o15: u32
    %o16: field
    %o17: field
    %o18: u32
    %o19: field
    %o20: field
    %o21: field
    %o22: field
    %o23: field
    %o24: u32
    %o25: u32
    %o26: field
    %o27: field
    %o28: field
    %o29: u32
    %o30: field
    %o31: u32
    %o32: field
    %o33: field
    %o34: field
    %o35: bool
    %o36: u32
    %o37: u32
    %o38: field
    %o39: u32
Instructions:
    assert %i1(BN) == 70 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    u32 %w196 = %i21
    field %w53 = %i7(BP)
    u32 %w65 = %i8
    field %w52 = %i9
    u32 %w64 = %i10
    field %w118 = %i22
    u32 %w199 = %i23
    u32 %w62 = %i11
    field %w72 = %i24
    field %w73 = %i25
    u32 %w61 = %i12
    field %w91 = %i26
    field %w75 = %i27
    field %w176 = %i28
    field %w198 = %i29
    field %w274 = %i30
    u32 %w78 = %i31
    field %w67 = %i13
    u32 %w99 = %i32
    field %w79 = %i33
    field %w66 = %i14
    field %w63 = %i34
    field %w54 = %i15
    u32 %w55 = %i16
    field %w56 = %i17
    u32 %w57 = %i18
    field %w58 = %i19
    field %w59 = %i20
    field %w190 = %i35
    bool %w191 = %i36
    u32 %w192 = %i37
    u32 %w193 = %i38
    field %w194 = %i39
    u32 %w195 = %i40
    field %w200 = %w66
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o7(BP) == %w200
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o8 == %w196
    assert %o9 == %w53
    assert %o10 == %w65
    assert %o11 == %w52
    assert %o12 == %w64
    assert %o13 == %w118
    assert %o14 == %w199
    assert %o15 == %w62
    assert %o16 == %w72
    assert %o17 == %w73
    assert %o18 == %w61
    assert %o19 == %w91
    assert %o20 == %w75
    assert %o21 == %w176
    assert %o22 == %w198
    assert %o23 == %w274
    assert %o24 == %w78
    assert %o25 == %w99
    assert %o26 == %w79
    assert %o27 == %w63
    assert %o28 == %w54
    assert %o29 == %w55
    assert %o30 == %w56
    assert %o31 == %w57
    assert %o32 == %w58
    assert %o33 == %w59
    assert %o34 == %w190
    assert %o35 == %w191
    assert %o36 == %w192
    assert %o37 == %w193
    assert %o38 == %w194
    assert %o39 == %w195
    assert %o1(BN) == %w67
Transition: -> %w67

Block 71:
Func: append_message_u32, Scope: 0
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: u32
    %i9: u32
    %i10: field
    %i11: u32
    %i12: u32
    %i13: u32
    %i14: u32
    %i15: field
    %i16: field
    %i17: u32
    %i18: field
    %i19: field
    %i20: field
    %i21: u32
    %i22: field
    %i23: u32
    %i24: field
    %i25: field
    %i26: field
    %i27: u32
    %i28: field
    %i29: u32
    %i30: field
    %i31: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o7(BP): field
    %o5(RP): field
    %o3(TS): field
    %o8: field
    %o9: u32
    %o10: u32
    %o11: field
    %o12: u32
    %o13: u32
    %o14: u32
    %o15: u32
    %o16: field
    %o17: field
    %o18: u32
    %o19: field
    %o20: field
    %o21: field
    %o22: u32
    %o23: u32
    %o24: field
    %o25: field
    %o26: u32
    %o27: field
    %o28: u32
    %o29: field
    %o30: field
Instructions:
    assert %i1(BN) == 71 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    u32 %w174 = %i8
    u32 %w175 = %i9
    field %w170 = %i10
    u32 %w69 = %i11
    u32 %w60 = %i12
    u32 %w64 = %i13
    u32 %w62 = %i14
    field %w72 = %i15
    field %w73 = %i16
    u32 %w61 = %i17
    field %w91 = %i18
    field %w75 = %i19
    field %w176 = %i20
    u32 %w78 = %i21
    field %w179 = %i22
    u32 %w99 = %i23
    field %w178 = %i24
    field %w63 = %i25
    field %w54 = %i26
    u32 %w55 = %i27
    field %w56 = %i28
    u32 %w57 = %i29
    field %w58 = %i30
    field %w59 = %i31
    field %w180 = %w178
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o7(BP) == %w180
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o8 == %w68
    assert %o9 == %w174
    assert %o10 == %w175
    assert %o11 == %w170
    assert %o12 == %w69
    assert %o13 == %w60
    assert %o14 == %w64
    assert %o15 == %w62
    assert %o16 == %w72
    assert %o17 == %w73
    assert %o18 == %w61
    assert %o19 == %w91
    assert %o20 == %w75
    assert %o21 == %w176
    assert %o22 == %w78
    assert %o23 == %w99
    assert %o24 == %w63
    assert %o25 == %w54
    assert %o26 == %w55
    assert %o27 == %w56
    assert %o28 == %w57
    assert %o29 == %w58
    assert %o30 == %w59
    assert %o1(BN) == %w179
Transition: -> %w179
Entry block: 0

Block 0:
Func: main, Scope: 0
Exec Bound: 1, While Loop: false, Num VM Ops: 25
Inputs:
    %i1(BN): field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: u32
    %o9: field
    %o10: u32
    %o11: u32
    %o12: u32
    %o13: field
    %o14: field
    %o15: field
    %o16: u32
    %o17: field
    %o18: u32
    %o19: field
    %o20: field
Instructions:
    assert %i1(BN) == 0 <Field>
    field %w3(RP) = 0 <Field>
    field %w4(SP) = 0 <Field>
    field %w1(TS) = 0 <Field>
    field %w2(AS) = 0 <Field>
    field[2][1 <U32>] %w5
    field[2 <U32>] %w6
    field %w7 = 1 <Field>
    field %w8 = 0 <Field>
    %w6[0 <Field>] = %w7 <field>, init
    %w6[1 <Field>] = %w8 <field>, init
    %w7 = %w6
    u32 %w9 = 0 <U32>
    if %w9 != 1 <U32>:
        %w5[%w9] = %w7 <field>, init
    else:
        Dummy Load
    field %w10 = %w5(BP)
    field[4][1 <U32>] %w11
    field[4 <U32>] %w12
    field %w13 = 1 <Field>
    %w8 = 2 <Field>
    field %w14 = 1 <Field>
    field %w15 = 2 <Field>
    %w12[0 <Field>] = %w13 <field>, init
    %w12[1 <Field>] = %w8 <field>, init
    %w12[2 <Field>] = %w14 <field>, init
    %w12[3 <Field>] = %w15 <field>, init
    %w13 = %w12
    %w9 = 0 <U32>
    if %w9 != 1 <U32>:
        %w11[%w9] = %w13 <field>, init
    else:
        Dummy Load
    field %w16 = %w11
    IOPProverMessage { evaluations: field[3] }[3][1 <U32>] %w17
    IOPProverMessage { evaluations: field[3] }[3 <U32>] %w18
    field[3 <U32>] %w19
    field %w20 = 1 <Field>
    %w8 = 2 <Field>
    %w14 = 3 <Field>
    %w19[0 <Field>] = %w20 <field>, init
    %w19[1 <Field>] = %w8 <field>, init
    %w19[2 <Field>] = %w14 <field>, init
    field %w21 = %w19
    field %w22 = %w21
    %w9 = 0 <U32>
    if %w9 != 3 <U32>:
        %w18[%w9] = %w22 <field>, init
        %w9 = %w9 + 1 <U32>
    else:
        Dummy Load
    if %w9 != 3 <U32>:
        %w18[%w9] = %w22 <field>, init
        %w9 = %w9 + 1 <U32>
    else:
        Dummy Load
    if %w9 != 3 <U32>:
        %w18[%w9] = %w22 <field>, init
    else:
        Dummy Load
    %w20 = %w18
    %w9 = 0 <U32>
    if %w9 != 1 <U32>:
        %w17[%w9] = %w20 <field>, init
    else:
        Dummy Load
    u32[1 <U32>] %w23
    u32 %w24 = 1 <U32>
    %w9 = 0 <U32>
    if %w9 != 1 <U32>:
        %w23[%w9] = %w24 <u32>, init
    else:
        Dummy Load
    field[1][1][1 <U32>] %w25
    field[1][1 <U32>] %w26
    field[1 <U32>] %w27
    field %w28 = 0 <Field>
    %w9 = 0 <U32>
    if %w9 != 1 <U32>:
        %w27[%w9] = %w28 <field>, init
    else:
        Dummy Load
    %w28 = %w27
    %w9 = 0 <U32>
    if %w9 != 1 <U32>:
        %w26[%w9] = %w28 <field>, init
    else:
        Dummy Load
    %w28 = %w26
    %w9 = 0 <U32>
    if %w9 != 1 <U32>:
        %w25[%w9] = %w28 <field>, init
    else:
        Dummy Load
    field[1][4][1 <U32>] %w29
    field[4][1 <U32>] %w30
    field[4 <U32>] %w31
    field %w32 = 0 <Field>
    %w8 = 0 <Field>
    %w14 = 0 <Field>
    %w15 = 0 <Field>
    %w31[0 <Field>] = %w32 <field>, init
    %w31[1 <Field>] = %w8 <field>, init
    %w31[2 <Field>] = %w14 <field>, init
    %w31[3 <Field>] = %w15 <field>, init
    %w32 = %w31
    %w9 = 0 <U32>
    if %w9 != 1 <U32>:
        %w30[%w9] = %w32 <field>, init
    else:
        Dummy Load
    %w32 = %w30
    %w9 = 0 <U32>
    if %w9 != 1 <U32>:
        %w29[%w9] = %w32 <field>, init
    else:
        Dummy Load
    u32 %w33 = 1 <U32>
    u32 %w34 = 1 <U32>
    field %w35 = %w17
    field %w36 = %w23
    field %w37 = %w25
    field %w38 = %w29
    field %w39 = %w36
    u32 %w40 = %w34
    field %w41 = %w38
    u32 %w42 = %w33
    field %w43 = %w37
    field %w44 = %w35
    u32 %w45 = 2 <U32>
    u32 %w46 = 2 <U32>
    u32 %w47 = 1 <U32>
    field %w48 = 2 <Field>
    field %w49 = %w48
    field %w50 = %w49
    field %w51 = %w50
    field %w52 = %w10
    field %w53 = %w16
    field %w54 = %w39
    u32 %w55 = %w40
    field %w56 = %w41
    u32 %w57 = %w42
    field %w58 = %w43
    field %w59 = %w44
    u32 %w60 = %w45
    u32 %w61 = %w46
    u32 %w62 = %w47
    field %w63 = %w51
    assert %w61 == 2 <U32>
    assert %w62 == 1 <U32>
    u32 %w64 = %w57
    u32 %w65 = %w55
    field %w66 = %w63
    %PHY[%SP + 0] = %w4(SP) <field>
    %w4(SP) = %w3(RP)
    %PHY[%SP + 1] = %w60 <u32>
    field %w67 = 28 <Field>
    %w3(RP) = %w3(RP) + 2 <Field>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w53
    assert %o8 == %w65
    assert %o9 == %w52
    assert %o10 == %w64
    assert %o11 == %w62
    assert %o12 == %w61
    assert %o13 == %w67
    assert %o14 == %w66
    assert %o15 == %w54
    assert %o16 == %w55
    assert %o17 == %w56
    assert %o18 == %w57
    assert %o19 == %w58
    assert %o20 == %w59
    assert %o1(BN) == 70 <Field>
Transition: -> 70

Block 1:
Func: main, Scope: 7
Exec Bound: 1, While Loop: true, Num VM Ops: 1
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: u32
    %i9: field
    %i10: u32
    %i11: u32
    %i12: u32
    %i13: u32
    %i14: field
    %i15: field
    %i16: u32
    %i17: u32
    %i18: field
    %i19: field
    %i20: u32
    %i21: u32
    %i22: field
    %i23: field
    %i24: field
    %i25: u32
    %i26: field
    %i27: u32
    %i28: field
    %i29: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: u32
    %o9: field
    %o10: u32
    %o11: u32
    %o12: u32
    %o13: u32
    %o14: u32
    %o15: field
    %o16: field
    %o17: u32
    %o18: u32
    %o19: field
    %o20: field
    %o21: field
    %o22: u32
    %o23: u32
    %o24: field
    %o25: field
    %o26: field
    %o27: u32
    %o28: field
    %o29: u32
    %o30: field
    %o31: field
Instructions:
    assert %i1(BN) == 1 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    u32 %w69 = %i8
    field %w70 = %i9
    u32 %w60 = %i10
    u32 %w71 = %i11
    u32 %w64 = %i12
    u32 %w62 = %i13
    field %w72 = %i14
    field %w73 = %i15
    u32 %w74 = %i16
    u32 %w61 = %i17
    field %w75 = %i18
    field %w76 = %i19
    u32 %w77 = %i20
    u32 %w78 = %i21
    field %w79 = %i22
    field %w63 = %i23
    field %w54 = %i24
    u32 %w55 = %i25
    field %w56 = %i26
    u32 %w57 = %i27
    field %w58 = %i28
    field %w59 = %i29
    field %w80 = %w76[%w77 - 1 <U32> - %w71]
    field %w81 = %w80
    u32 %w82 = %w74
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w68
    assert %o8 == %w69
    assert %o9 == %w70
    assert %o10 == %w60
    assert %o11 == %w71
    assert %o12 == %w64
    assert %o13 == %w82
    assert %o14 == %w62
    assert %o15 == %w72
    assert %o16 == %w73
    assert %o17 == %w74
    assert %o18 == %w61
    assert %o19 == %w75
    assert %o20 == %w76
    assert %o21 == %w81
    assert %o22 == %w77
    assert %o23 == %w78
    assert %o24 == %w79
    assert %o25 == %w63
    assert %o26 == %w54
    assert %o27 == %w55
    assert %o28 == %w56
    assert %o29 == %w57
    assert %o30 == %w58
    assert %o31 == %w59
    assert %o1(BN) == %w82 != 0 <U32> ? 2 <Field> : 3 <Field>
Transition:
    %w82 != 0 <U32> ? -> 2 : -> 3

Block 2:
Func: main, Scope: 9
Exec Bound: 1, While Loop: true, Num VM Ops: 4
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: u32
    %i9: field
    %i10: u32
    %i11: u32
    %i12: u32
    %i13: u32
    %i14: u32
    %i15: field
    %i16: field
    %i17: u32
    %i18: u32
    %i19: field
    %i20: field
    %i21: field
    %i22: u32
    %i23: u32
    %i24: field
    %i25: field
    %i26: field
    %i27: u32
    %i28: field
    %i29: u32
    %i30: field
    %i31: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: u32
    %o9: field
    %o10: u32
    %o11: u32
    %o12: u32
    %o13: u32
    %o14: u32
    %o15: field
    %o16: field
    %o17: u32
    %o18: u32
    %o19: field
    %o20: field
    %o21: field
    %o22: u32
    %o23: u32
    %o24: field
    %o25: field
    %o26: field
    %o27: u32
    %o28: field
    %o29: u32
    %o30: field
    %o31: field
Instructions:
    assert %i1(BN) == 2 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    u32 %w69 = %i8
    field %w70 = %i9
    u32 %w60 = %i10
    u32 %w71 = %i11
    u32 %w64 = %i12
    u32 %w82 = %i13
    u32 %w62 = %i14
    field %w72 = %i15
    field %w73 = %i16
    u32 %w74 = %i17
    u32 %w61 = %i18
    field %w75 = %i19
    field %w76 = %i20
    field %w81 = %i21
    u32 %w77 = %i22
    u32 %w78 = %i23
    field %w79 = %i24
    field %w63 = %i25
    field %w54 = %i26
    u32 %w55 = %i27
    field %w56 = %i28
    u32 %w57 = %i29
    field %w58 = %i30
    field %w59 = %i31
    %w82 = %w82 - 1 <U32>
    field %w83 = %w70[%w82]
    %w70[2 <U32> * %w82 + 1 <U32>] = %w81 * %w83 <field>
    field %w83 = %w70[%w82]
    %w70[2 <U32> * %w82] = 1 <Field> - %w81 * %w83 <field>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w68
    assert %o8 == %w69
    assert %o9 == %w70
    assert %o10 == %w60
    assert %o11 == %w71
    assert %o12 == %w64
    assert %o13 == %w82
    assert %o14 == %w62
    assert %o15 == %w72
    assert %o16 == %w73
    assert %o17 == %w74
    assert %o18 == %w61
    assert %o19 == %w75
    assert %o20 == %w76
    assert %o21 == %w81
    assert %o22 == %w77
    assert %o23 == %w78
    assert %o24 == %w79
    assert %o25 == %w63
    assert %o26 == %w54
    assert %o27 == %w55
    assert %o28 == %w56
    assert %o29 == %w57
    assert %o30 == %w58
    assert %o31 == %w59
    assert %o1(BN) == %w82 != 0 <U32> ? 2 <Field> : 3 <Field>
Transition:
    %w82 != 0 <U32> ? -> 2 : -> 3

Block 3:
Func: main, Scope: 8
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: u32
    %i9: field
    %i10: u32
    %i11: u32
    %i12: u32
    %i14: u32
    %i15: field
    %i16: field
    %i17: u32
    %i18: u32
    %i19: field
    %i20: field
    %i22: u32
    %i23: u32
    %i24: field
    %i25: field
    %i26: field
    %i27: u32
    %i28: field
    %i29: u32
    %i30: field
    %i31: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: u32
    %o9: field
    %o10: u32
    %o11: u32
    %o12: u32
    %o13: u32
    %o14: field
    %o15: field
    %o16: u32
    %o17: u32
    %o18: field
    %o19: field
    %o20: u32
    %o21: u32
    %o22: field
    %o23: field
    %o24: field
    %o25: u32
    %o26: field
    %o27: u32
    %o28: field
    %o29: field
Instructions:
    assert %i1(BN) == 3 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    u32 %w69 = %i8
    field %w70 = %i9
    u32 %w60 = %i10
    u32 %w71 = %i11
    u32 %w64 = %i12
    u32 %w62 = %i14
    field %w72 = %i15
    field %w73 = %i16
    u32 %w74 = %i17
    u32 %w61 = %i18
    field %w75 = %i19
    field %w76 = %i20
    u32 %w77 = %i22
    u32 %w78 = %i23
    field %w79 = %i24
    field %w63 = %i25
    field %w54 = %i26
    u32 %w55 = %i27
    field %w56 = %i28
    u32 %w57 = %i29
    field %w58 = %i30
    field %w59 = %i31
    %w74 = %w74 * 2 <U32>
    %w71 = %w71 + 1 <U32>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w68
    assert %o8 == %w69
    assert %o9 == %w70
    assert %o10 == %w60
    assert %o11 == %w71
    assert %o12 == %w64
    assert %o13 == %w62
    assert %o14 == %w72
    assert %o15 == %w73
    assert %o16 == %w74
    assert %o17 == %w61
    assert %o18 == %w75
    assert %o19 == %w76
    assert %o20 == %w77
    assert %o21 == %w78
    assert %o22 == %w79
    assert %o23 == %w63
    assert %o24 == %w54
    assert %o25 == %w55
    assert %o26 == %w56
    assert %o27 == %w57
    assert %o28 == %w58
    assert %o29 == %w59
    assert %o1(BN) == %w71 != %w77 ? 1 <Field> : 4 <Field>
Transition:
    %w71 != %w77 ? -> 1 : -> 4

Block 4:
Func: main, Scope: 6
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: u32
    %i9: field
    %i10: u32
    %i12: u32
    %i13: u32
    %i14: field
    %i15: field
    %i17: u32
    %i18: field
    %i21: u32
    %i22: field
    %i23: field
    %i24: field
    %i25: u32
    %i26: field
    %i27: u32
    %i28: field
    %i29: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: field
    %o9: u32
    %o10: u32
    %o11: u32
    %o12: u32
    %o13: field
    %o14: field
    %o15: u32
    %o16: field
    %o17: field
    %o18: u32
    %o19: field
    %o20: u32
    %o21: field
    %o22: field
    %o23: u32
    %o24: field
    %o25: u32
    %o26: field
    %o27: field
Instructions:
    assert %i1(BN) == 4 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    u32 %w69 = %i8
    field %w70 = %i9
    u32 %w60 = %i10
    u32 %w64 = %i12
    u32 %w62 = %i13
    field %w72 = %i14
    field %w73 = %i15
    u32 %w61 = %i17
    field %w75 = %i18
    u32 %w78 = %i21
    field %w79 = %i22
    field %w63 = %i23
    field %w54 = %i24
    u32 %w55 = %i25
    field %w56 = %i26
    u32 %w57 = %i27
    field %w58 = %i28
    field %w59 = %i29
    field %w84 = %w70
    field %w85 = %w84
    field %w86 = %w85
    field %w87 = 0 <Field>
    u32 %w88 = 0 <U32>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w68
    assert %o8 == %w86
    assert %o9 == %w69
    assert %o10 == %w60
    assert %o11 == %w64
    assert %o12 == %w62
    assert %o13 == %w72
    assert %o14 == %w73
    assert %o15 == %w61
    assert %o16 == %w87
    assert %o17 == %w75
    assert %o18 == %w78
    assert %o19 == %w79
    assert %o20 == %w88
    assert %o21 == %w63
    assert %o22 == %w54
    assert %o23 == %w55
    assert %o24 == %w56
    assert %o25 == %w57
    assert %o26 == %w58
    assert %o27 == %w59
    assert %o1(BN) == %w88 != %w57 ? 60 <Field> : 66 <Field>
Transition:
    %w88 != %w57 ? -> 60 : -> 66

Block 5:
Func: eq_eval, Scope: 0
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): u32
    %i8: field
    %i9: u32
    %i10: u32
    %i11: u32
    %i12: u32
    %i13: field
    %i14: field
    %i15: u32
    %i16: field
    %i34: field
    %i35: field
    %i17: field
    %i18: field
    %i36: field
    %i37: field
    %i19: u32
    %i20: field
    %i21: field
    %i22: u32
    %i23: u32
    %i38: u32
    %i24: field
    %i25: field
    %i26: field
    %i27: u32
    %i28: field
    %i29: u32
    %i30: field
    %i31: field
    %i32: field
    %i33: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): u32
    %o8: field
    %o9: u32
    %o10: u32
    %o11: u32
    %o12: u32
    %o13: u32
    %o14: field
    %o15: field
    %o16: u32
    %o17: field
    %o18: field
    %o19: field
    %o20: field
    %o21: field
    %o22: field
    %o23: field
    %o24: field
    %o25: u32
    %o26: field
    %o27: field
    %o28: u32
    %o29: u32
    %o30: u32
    %o31: field
    %o32: field
    %o33: field
    %o34: u32
    %o35: field
    %o36: u32
    %o37: field
    %o38: field
    %o39: field
    %o40: field
Instructions:
    assert %i1(BN) == 5 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    u32 %w69 = %i7(BP)
    field %w89 = %i8
    u32 %w60 = %i9
    u32 %w64 = %i10
    u32 %w90 = %i11
    u32 %w62 = %i12
    field %w72 = %i13
    field %w73 = %i14
    u32 %w61 = %i15
    field %w91 = %i16
    field %w92 = %i34
    field %w93 = %i35
    field %w94 = %i17
    field %w75 = %i18
    field %w95 = %i36
    field %w96 = %i37
    u32 %w78 = %i19
    field %w97 = %i20
    field %w98 = %i21
    u32 %w99 = %i22
    u32 %w100 = %i23
    u32 %w101 = %i38
    field %w102 = %i24
    field %w63 = %i25
    field %w54 = %i26
    u32 %w55 = %i27
    field %w56 = %i28
    u32 %w57 = %i29
    field %w58 = %i30
    field %w59 = %i31
    field %w103 = %i32
    field %w104 = %i33
    field %w105 = 1 <Field>
    u32 %w106 = 0 <U32>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w69
    assert %o8 == %w89
    assert %o9 == %w60
    assert %o10 == %w106
    assert %o11 == %w64
    assert %o12 == %w90
    assert %o13 == %w62
    assert %o14 == %w72
    assert %o15 == %w73
    assert %o16 == %w61
    assert %o17 == %w91
    assert %o18 == %w92
    assert %o19 == %w93
    assert %o20 == %w94
    assert %o21 == %w75
    assert %o22 == %w95
    assert %o23 == %w96
    assert %o24 == %w105
    assert %o25 == %w78
    assert %o26 == %w97
    assert %o27 == %w98
    assert %o28 == %w99
    assert %o29 == %w100
    assert %o30 == %w101
    assert %o31 == %w102
    assert %o32 == %w63
    assert %o33 == %w54
    assert %o34 == %w55
    assert %o35 == %w56
    assert %o36 == %w57
    assert %o37 == %w58
    assert %o38 == %w59
    assert %o39 == %w103
    assert %o40 == %w104
    assert %o1(BN) == %w106 != %w90 ? 6 <Field> : 7 <Field>
Transition:
    %w106 != %w90 ? -> 6 : -> 7

Block 6:
Func: eq_eval, Scope: 2
Exec Bound: 1, While Loop: true, Num VM Ops: 2
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): u32
    %i8: field
    %i9: u32
    %i10: u32
    %i11: u32
    %i12: u32
    %i13: u32
    %i14: field
    %i15: field
    %i16: u32
    %i17: field
    %i18: field
    %i19: field
    %i20: field
    %i21: field
    %i22: field
    %i23: field
    %i24: field
    %i25: u32
    %i26: field
    %i27: field
    %i28: u32
    %i29: u32
    %i30: u32
    %i31: field
    %i32: field
    %i33: field
    %i34: u32
    %i35: field
    %i36: u32
    %i37: field
    %i38: field
    %i39: field
    %i40: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): u32
    %o8: field
    %o9: u32
    %o10: u32
    %o11: u32
    %o12: u32
    %o13: u32
    %o14: field
    %o15: field
    %o16: u32
    %o17: field
    %o18: field
    %o19: field
    %o20: field
    %o21: field
    %o22: field
    %o23: field
    %o24: field
    %o25: u32
    %o26: field
    %o27: field
    %o28: u32
    %o29: u32
    %o30: u32
    %o31: field
    %o32: field
    %o33: field
    %o34: u32
    %o35: field
    %o36: u32
    %o37: field
    %o38: field
    %o39: field
    %o40: field
Instructions:
    assert %i1(BN) == 6 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    u32 %w69 = %i7(BP)
    field %w89 = %i8
    u32 %w60 = %i9
    u32 %w106 = %i10
    u32 %w64 = %i11
    u32 %w90 = %i12
    u32 %w62 = %i13
    field %w72 = %i14
    field %w73 = %i15
    u32 %w61 = %i16
    field %w91 = %i17
    field %w92 = %i18
    field %w93 = %i19
    field %w94 = %i20
    field %w75 = %i21
    field %w95 = %i22
    field %w96 = %i23
    field %w105 = %i24
    u32 %w78 = %i25
    field %w97 = %i26
    field %w98 = %i27
    u32 %w99 = %i28
    u32 %w100 = %i29
    u32 %w101 = %i30
    field %w102 = %i31
    field %w63 = %i32
    field %w54 = %i33
    u32 %w55 = %i34
    field %w56 = %i35
    u32 %w57 = %i36
    field %w58 = %i37
    field %w59 = %i38
    field %w103 = %i39
    field %w104 = %i40
    field %w107 = %w103[%w106]
    field %w108 = %w107
    field %w107 = %w104[%w106]
    field %w109 = %w107
    field %w110 = %w108 * %w109
    %w105 = %w105 * %w110 + %w110 - %w108 - %w109 + 1 <Field>
    %w106 = %w106 + 1 <U32>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w69
    assert %o8 == %w89
    assert %o9 == %w60
    assert %o10 == %w106
    assert %o11 == %w64
    assert %o12 == %w90
    assert %o13 == %w62
    assert %o14 == %w72
    assert %o15 == %w73
    assert %o16 == %w61
    assert %o17 == %w91
    assert %o18 == %w92
    assert %o19 == %w93
    assert %o20 == %w94
    assert %o21 == %w75
    assert %o22 == %w95
    assert %o23 == %w96
    assert %o24 == %w105
    assert %o25 == %w78
    assert %o26 == %w97
    assert %o27 == %w98
    assert %o28 == %w99
    assert %o29 == %w100
    assert %o30 == %w101
    assert %o31 == %w102
    assert %o32 == %w63
    assert %o33 == %w54
    assert %o34 == %w55
    assert %o35 == %w56
    assert %o36 == %w57
    assert %o37 == %w58
    assert %o38 == %w59
    assert %o39 == %w103
    assert %o40 == %w104
    assert %o1(BN) == %w106 != %w90 ? 6 <Field> : 7 <Field>
Transition:
    %w106 != %w90 ? -> 6 : -> 7

Block 7:
Func: eq_eval, Scope: 1
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): u32
    %i8: field
    %i9: u32
    %i11: u32
    %i13: u32
    %i14: field
    %i15: field
    %i16: u32
    %i17: field
    %i18: field
    %i19: field
    %i20: field
    %i21: field
    %i22: field
    %i23: field
    %i24: field
    %i25: u32
    %i26: field
    %i27: field
    %i28: u32
    %i29: u32
    %i30: u32
    %i31: field
    %i32: field
    %i33: field
    %i34: u32
    %i35: field
    %i36: u32
    %i37: field
    %i38: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o2(RET): field
    %o5(RP): field
    %o3(TS): field
    %o8: u32
    %o9: field
    %o10: u32
    %o11: u32
    %o12: u32
    %o13: field
    %o14: field
    %o15: u32
    %o16: field
    %o17: field
    %o18: field
    %o19: field
    %o20: field
    %o21: field
    %o22: field
    %o23: u32
    %o24: field
    %o25: u32
    %o26: u32
    %o27: u32
    %o28: field
    %o29: field
    %o30: field
    %o31: u32
    %o32: field
    %o33: u32
    %o34: field
    %o35: field
Instructions:
    assert %i1(BN) == 7 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    u32 %w69 = %i7(BP)
    field %w89 = %i8
    u32 %w60 = %i9
    u32 %w64 = %i11
    u32 %w62 = %i13
    field %w72 = %i14
    field %w73 = %i15
    u32 %w61 = %i16
    field %w91 = %i17
    field %w92 = %i18
    field %w93 = %i19
    field %w94 = %i20
    field %w75 = %i21
    field %w95 = %i22
    field %w96 = %i23
    field %w105 = %i24
    u32 %w78 = %i25
    field %w97 = %i26
    field %w98 = %i27
    u32 %w99 = %i28
    u32 %w100 = %i29
    u32 %w101 = %i30
    field %w102 = %i31
    field %w63 = %i32
    field %w54 = %i33
    u32 %w55 = %i34
    field %w56 = %i35
    u32 %w57 = %i36
    field %w58 = %i37
    field %w59 = %i38
    field %w111 = %w105
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o2(RET) == %w111
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o8 == %w69
    assert %o9 == %w89
    assert %o10 == %w60
    assert %o11 == %w64
    assert %o12 == %w62
    assert %o13 == %w72
    assert %o14 == %w73
    assert %o15 == %w61
    assert %o16 == %w91
    assert %o17 == %w92
    assert %o18 == %w93
    assert %o19 == %w94
    assert %o20 == %w75
    assert %o21 == %w95
    assert %o22 == %w96
    assert %o23 == %w78
    assert %o24 == %w98
    assert %o25 == %w99
    assert %o26 == %w100
    assert %o27 == %w101
    assert %o28 == %w102
    assert %o29 == %w63
    assert %o30 == %w54
    assert %o31 == %w55
    assert %o32 == %w56
    assert %o33 == %w57
    assert %o34 == %w58
    assert %o35 == %w59
    assert %o1(BN) == %w97
Transition: -> %w97

Block 8:
Func: mle_eval, Scope: 0
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i31: field
    %i32: field
    %i8: field
    %i9: u32
    %i10: u32
    %i33: u32
    %i11: field
    %i12: field
    %i13: u32
    %i14: field
    %i15: u32
    %i16: field
    %i17: u32
    %i34: field
    %i18: u32
    %i19: u32
    %i20: field
    %i21: u32
    %i22: field
    %i23: field
    %i24: field
    %i25: field
    %i26: u32
    %i27: field
    %i28: u32
    %i29: field
    %i30: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: field
    %o9: field
    %o10: field
    %o11: u32
    %o12: u32
    %o13: u32
    %o14: u32
    %o15: field
    %o16: field
    %o17: u32
    %o18: field
    %o19: u32
    %o20: field
    %o21: u32
    %o22: field
    %o23: u32
    %o24: u32
    %o25: field
    %o26: u32
    %o27: field
    %o28: field
    %o29: field
    %o30: field
    %o31: u32
    %o32: field
    %o33: u32
    %o34: field
    %o35: field
Instructions:
    assert %i1(BN) == 8 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w112 = %i7(BP)
    field %w113 = %i31
    field %w114 = %i32
    field %w68 = %i8
    u32 %w60 = %i9
    u32 %w115 = %i10
    u32 %w116 = %i33
    field %w117 = %i11
    field %w53 = %i12
    u32 %w65 = %i13
    field %w52 = %i14
    u32 %w64 = %i15
    field %w118 = %i16
    u32 %w62 = %i17
    field %w119 = %i34
    u32 %w120 = %i18
    u32 %w61 = %i19
    field %w121 = %i20
    u32 %w122 = %i21
    field %w123 = %i22
    field %w124 = %i23
    field %w63 = %i24
    field %w54 = %i25
    u32 %w55 = %i26
    field %w56 = %i27
    u32 %w57 = %i28
    field %w58 = %i29
    field %w59 = %i30
    u32 %w125 = 0 <U32>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w112
    assert %o8 == %w113
    assert %o9 == %w114
    assert %o10 == %w68
    assert %o11 == %w60
    assert %o12 == %w125
    assert %o13 == %w115
    assert %o14 == %w116
    assert %o15 == %w117
    assert %o16 == %w53
    assert %o17 == %w65
    assert %o18 == %w52
    assert %o19 == %w64
    assert %o20 == %w118
    assert %o21 == %w62
    assert %o22 == %w119
    assert %o23 == %w120
    assert %o24 == %w61
    assert %o25 == %w121
    assert %o26 == %w122
    assert %o27 == %w123
    assert %o28 == %w124
    assert %o29 == %w63
    assert %o30 == %w54
    assert %o31 == %w55
    assert %o32 == %w56
    assert %o33 == %w57
    assert %o34 == %w58
    assert %o35 == %w59
    assert %o1(BN) == %w125 != %w122 ? 9 <Field> : 12 <Field>
Transition:
    %w125 != %w122 ? -> 9 : -> 12

Block 9:
Func: mle_eval, Scope: 2
Exec Bound: 1, While Loop: true, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: field
    %i9: field
    %i10: field
    %i11: u32
    %i12: u32
    %i13: u32
    %i14: u32
    %i15: field
    %i16: field
    %i17: u32
    %i18: field
    %i19: u32
    %i20: field
    %i21: u32
    %i22: field
    %i23: u32
    %i24: u32
    %i25: field
    %i26: u32
    %i27: field
    %i28: field
    %i29: field
    %i30: field
    %i31: u32
    %i32: field
    %i33: u32
    %i34: field
    %i35: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: field
    %o9: field
    %o10: field
    %o11: u32
    %o12: u32
    %o13: u32
    %o14: u32
    %o15: field
    %o16: field
    %o17: u32
    %o18: field
    %o19: u32
    %o20: field
    %o21: u32
    %o22: u32
    %o23: field
    %o24: u32
    %o25: u32
    %o26: field
    %o27: u32
    %o28: field
    %o29: field
    %o30: field
    %o31: field
    %o32: u32
    %o33: field
    %o34: u32
    %o35: field
    %o36: field
Instructions:
    assert %i1(BN) == 9 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w112 = %i7(BP)
    field %w113 = %i8
    field %w114 = %i9
    field %w68 = %i10
    u32 %w60 = %i11
    u32 %w125 = %i12
    u32 %w115 = %i13
    u32 %w116 = %i14
    field %w117 = %i15
    field %w53 = %i16
    u32 %w65 = %i17
    field %w52 = %i18
    u32 %w64 = %i19
    field %w118 = %i20
    u32 %w62 = %i21
    field %w119 = %i22
    u32 %w120 = %i23
    u32 %w61 = %i24
    field %w121 = %i25
    u32 %w122 = %i26
    field %w123 = %i27
    field %w124 = %i28
    field %w63 = %i29
    field %w54 = %i30
    u32 %w55 = %i31
    field %w56 = %i32
    u32 %w57 = %i33
    field %w58 = %i34
    field %w59 = %i35
    %w120 = %w120 / 2 <U32>
    u32 %w126 = 0 <U32>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w112
    assert %o8 == %w113
    assert %o9 == %w114
    assert %o10 == %w68
    assert %o11 == %w60
    assert %o12 == %w125
    assert %o13 == %w115
    assert %o14 == %w116
    assert %o15 == %w117
    assert %o16 == %w53
    assert %o17 == %w65
    assert %o18 == %w52
    assert %o19 == %w64
    assert %o20 == %w118
    assert %o21 == %w126
    assert %o22 == %w62
    assert %o23 == %w119
    assert %o24 == %w120
    assert %o25 == %w61
    assert %o26 == %w121
    assert %o27 == %w122
    assert %o28 == %w123
    assert %o29 == %w124
    assert %o30 == %w63
    assert %o31 == %w54
    assert %o32 == %w55
    assert %o33 == %w56
    assert %o34 == %w57
    assert %o35 == %w58
    assert %o36 == %w59
    assert %o1(BN) == %w126 != %w120 ? 10 <Field> : 11 <Field>
Transition:
    %w126 != %w120 ? -> 10 : -> 11

Block 10:
Func: mle_eval, Scope: 5
Exec Bound: 1, While Loop: true, Num VM Ops: 5
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: field
    %i9: field
    %i10: field
    %i11: u32
    %i12: u32
    %i13: u32
    %i14: u32
    %i15: field
    %i16: field
    %i17: u32
    %i18: field
    %i19: u32
    %i20: field
    %i21: u32
    %i22: u32
    %i23: field
    %i24: u32
    %i25: u32
    %i26: field
    %i27: u32
    %i28: field
    %i29: field
    %i30: field
    %i31: field
    %i32: u32
    %i33: field
    %i34: u32
    %i35: field
    %i36: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: field
    %o9: field
    %o10: field
    %o11: u32
    %o12: u32
    %o13: u32
    %o14: u32
    %o15: field
    %o16: field
    %o17: u32
    %o18: field
    %o19: u32
    %o20: field
    %o21: u32
    %o22: u32
    %o23: field
    %o24: u32
    %o25: u32
    %o26: field
    %o27: u32
    %o28: field
    %o29: field
    %o30: field
    %o31: field
    %o32: u32
    %o33: field
    %o34: u32
    %o35: field
    %o36: field
Instructions:
    assert %i1(BN) == 10 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w112 = %i7(BP)
    field %w113 = %i8
    field %w114 = %i9
    field %w68 = %i10
    u32 %w60 = %i11
    u32 %w125 = %i12
    u32 %w115 = %i13
    u32 %w116 = %i14
    field %w117 = %i15
    field %w53 = %i16
    u32 %w65 = %i17
    field %w52 = %i18
    u32 %w64 = %i19
    field %w118 = %i20
    u32 %w126 = %i21
    u32 %w62 = %i22
    field %w119 = %i23
    u32 %w120 = %i24
    u32 %w61 = %i25
    field %w121 = %i26
    u32 %w122 = %i27
    field %w123 = %i28
    field %w124 = %i29
    field %w63 = %i30
    field %w54 = %i31
    u32 %w55 = %i32
    field %w56 = %i33
    u32 %w57 = %i34
    field %w58 = %i35
    field %w59 = %i36
    field %w127 = %w121[%w125]
    field %w128 = %w124[%w126]
    field %w129 = %w121[%w125]
    field %w130 = %w124[%w120 + %w126]
    %w124[%w126] = 1 <Field> - %w127 * %w128 + %w129 * %w130 <field>
    %w126 = %w126 + 1 <U32>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w112
    assert %o8 == %w113
    assert %o9 == %w114
    assert %o10 == %w68
    assert %o11 == %w60
    assert %o12 == %w125
    assert %o13 == %w115
    assert %o14 == %w116
    assert %o15 == %w117
    assert %o16 == %w53
    assert %o17 == %w65
    assert %o18 == %w52
    assert %o19 == %w64
    assert %o20 == %w118
    assert %o21 == %w126
    assert %o22 == %w62
    assert %o23 == %w119
    assert %o24 == %w120
    assert %o25 == %w61
    assert %o26 == %w121
    assert %o27 == %w122
    assert %o28 == %w123
    assert %o29 == %w124
    assert %o30 == %w63
    assert %o31 == %w54
    assert %o32 == %w55
    assert %o33 == %w56
    assert %o34 == %w57
    assert %o35 == %w58
    assert %o36 == %w59
    assert %o1(BN) == %w126 != %w120 ? 10 <Field> : 11 <Field>
Transition:
    %w126 != %w120 ? -> 10 : -> 11

Block 11:
Func: mle_eval, Scope: 4
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: field
    %i9: field
    %i10: field
    %i11: u32
    %i12: u32
    %i13: u32
    %i14: u32
    %i15: field
    %i16: field
    %i17: u32
    %i18: field
    %i19: u32
    %i20: field
    %i22: u32
    %i23: field
    %i24: u32
    %i25: u32
    %i26: field
    %i27: u32
    %i28: field
    %i29: field
    %i30: field
    %i31: field
    %i32: u32
    %i33: field
    %i34: u32
    %i35: field
    %i36: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: field
    %o9: field
    %o10: field
    %o11: u32
    %o12: u32
    %o13: u32
    %o14: u32
    %o15: field
    %o16: field
    %o17: u32
    %o18: field
    %o19: u32
    %o20: field
    %o21: u32
    %o22: field
    %o23: u32
    %o24: u32
    %o25: field
    %o26: u32
    %o27: field
    %o28: field
    %o29: field
    %o30: field
    %o31: u32
    %o32: field
    %o33: u32
    %o34: field
    %o35: field
Instructions:
    assert %i1(BN) == 11 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w112 = %i7(BP)
    field %w113 = %i8
    field %w114 = %i9
    field %w68 = %i10
    u32 %w60 = %i11
    u32 %w125 = %i12
    u32 %w115 = %i13
    u32 %w116 = %i14
    field %w117 = %i15
    field %w53 = %i16
    u32 %w65 = %i17
    field %w52 = %i18
    u32 %w64 = %i19
    field %w118 = %i20
    u32 %w62 = %i22
    field %w119 = %i23
    u32 %w120 = %i24
    u32 %w61 = %i25
    field %w121 = %i26
    u32 %w122 = %i27
    field %w123 = %i28
    field %w124 = %i29
    field %w63 = %i30
    field %w54 = %i31
    u32 %w55 = %i32
    field %w56 = %i33
    u32 %w57 = %i34
    field %w58 = %i35
    field %w59 = %i36
    %w125 = %w125 + 1 <U32>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w112
    assert %o8 == %w113
    assert %o9 == %w114
    assert %o10 == %w68
    assert %o11 == %w60
    assert %o12 == %w125
    assert %o13 == %w115
    assert %o14 == %w116
    assert %o15 == %w117
    assert %o16 == %w53
    assert %o17 == %w65
    assert %o18 == %w52
    assert %o19 == %w64
    assert %o20 == %w118
    assert %o21 == %w62
    assert %o22 == %w119
    assert %o23 == %w120
    assert %o24 == %w61
    assert %o25 == %w121
    assert %o26 == %w122
    assert %o27 == %w123
    assert %o28 == %w124
    assert %o29 == %w63
    assert %o30 == %w54
    assert %o31 == %w55
    assert %o32 == %w56
    assert %o33 == %w57
    assert %o34 == %w58
    assert %o35 == %w59
    assert %o1(BN) == %w125 != %w122 ? 9 <Field> : 12 <Field>
Transition:
    %w125 != %w122 ? -> 9 : -> 12

Block 12:
Func: mle_eval, Scope: 1
Exec Bound: 1, While Loop: false, Num VM Ops: 1
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: field
    %i9: field
    %i10: field
    %i11: u32
    %i13: u32
    %i14: u32
    %i15: field
    %i16: field
    %i17: u32
    %i18: field
    %i19: u32
    %i20: field
    %i21: u32
    %i22: field
    %i24: u32
    %i27: field
    %i28: field
    %i29: field
    %i30: field
    %i31: u32
    %i32: field
    %i33: u32
    %i34: field
    %i35: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o2(RET): field
    %o5(RP): field
    %o3(TS): field
    %o8: field
    %o9: field
    %o10: field
    %o11: field
    %o12: u32
    %o13: u32
    %o14: u32
    %o15: field
    %o16: field
    %o17: u32
    %o18: field
    %o19: u32
    %o20: field
    %o21: u32
    %o22: field
    %o23: u32
    %o24: field
    %o25: field
    %o26: u32
    %o27: field
    %o28: u32
    %o29: field
    %o30: field
Instructions:
    assert %i1(BN) == 12 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w112 = %i7(BP)
    field %w113 = %i8
    field %w114 = %i9
    field %w68 = %i10
    u32 %w60 = %i11
    u32 %w115 = %i13
    u32 %w116 = %i14
    field %w117 = %i15
    field %w53 = %i16
    u32 %w65 = %i17
    field %w52 = %i18
    u32 %w64 = %i19
    field %w118 = %i20
    u32 %w62 = %i21
    field %w119 = %i22
    u32 %w61 = %i24
    field %w123 = %i27
    field %w124 = %i28
    field %w63 = %i29
    field %w54 = %i30
    u32 %w55 = %i31
    field %w56 = %i32
    u32 %w57 = %i33
    field %w58 = %i34
    field %w59 = %i35
    field %w131 = %w124[0 <Field>]
    field %w132 = %w131
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o2(RET) == %w132
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o8 == %w112
    assert %o9 == %w113
    assert %o10 == %w114
    assert %o11 == %w68
    assert %o12 == %w60
    assert %o13 == %w115
    assert %o14 == %w116
    assert %o15 == %w117
    assert %o16 == %w53
    assert %o17 == %w65
    assert %o18 == %w52
    assert %o19 == %w64
    assert %o20 == %w118
    assert %o21 == %w62
    assert %o22 == %w119
    assert %o23 == %w61
    assert %o24 == %w63
    assert %o25 == %w54
    assert %o26 == %w55
    assert %o27 == %w56
    assert %o28 == %w57
    assert %o29 == %w58
    assert %o30 == %w59
    assert %o1(BN) == %w123
Transition: -> %w123

Block 13:
Func: main, Scope: 8
Exec Bound: 1, While Loop: true, Num VM Ops: 3
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: u32
    %i9: u32
    %i10: field
    %i11: u32
    %i12: u32
    %i13: u32
    %i14: field
    %i15: field
    %i16: u32
    %i17: field
    %i18: field
    %i19: u32
    %i20: u32
    %i21: field
    %i22: u32
    %i23: u32
    %i24: field
    %i25: field
    %i26: field
    %i27: u32
    %i28: field
    %i29: u32
    %i30: field
    %i31: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: field
    %o9: u32
    %o10: field
    %o11: u32
    %o12: field
    %o13: field
    %o14: u32
    %o15: field
    %o16: u32
    %o17: u32
    %o18: u32
    %o19: u32
    %o20: field
    %o21: field
    %o22: u32
    %o23: field
    %o24: field
    %o25: field
    %o26: field
    %o27: field
    %o28: u32
    %o29: u32
    %o30: field
    %o31: u32
    %o32: u32
    %o33: field
    %o34: field
    %o35: field
    %o36: u32
    %o37: field
    %o38: u32
    %o39: field
    %o40: field
Instructions:
    assert %i1(BN) == 13 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    u32 %w69 = %i8
    u32 %w60 = %i9
    field %w133 = %i10
    u32 %w134 = %i11
    u32 %w64 = %i12
    u32 %w62 = %i13
    field %w72 = %i14
    field %w73 = %i15
    u32 %w61 = %i16
    field %w91 = %i17
    field %w75 = %i18
    u32 %w78 = %i19
    u32 %w99 = %i20
    field %w135 = %i21
    u32 %w136 = %i22
    u32 %w137 = %i23
    field %w138 = %i24
    field %w63 = %i25
    field %w54 = %i26
    u32 %w55 = %i27
    field %w56 = %i28
    u32 %w57 = %i29
    field %w58 = %i30
    field %w59 = %i31
    field %w139 = %w138[%w134]
    field %w140 = %w139
    field %w141 = %w135[%w134]
    field %w142 = %w141
    u32 %w143 = %w136 + 1 <U32>
    field %w144 = %w140
    field %w145 = %w142
    u32 %w146 = %w143
    field[%w146] %w147
    field %w148 = %w145
    %w147[0 <Field>] = %w145 <field>
    field %w149 = 0 <Field>
    field %w150 = 1 <Field>
    u32 %w151 = 1 <U32>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w68
    assert %o8 == %w150
    assert %o9 == %w151
    assert %o10 == %w145
    assert %o11 == %w69
    assert %o12 == %w147
    assert %o13 == %w140
    assert %o14 == %w60
    assert %o15 == %w133
    assert %o16 == %w134
    assert %o17 == %w64
    assert %o18 == %w146
    assert %o19 == %w62
    assert %o20 == %w72
    assert %o21 == %w73
    assert %o22 == %w61
    assert %o23 == %w91
    assert %o24 == %w144
    assert %o25 == %w148
    assert %o26 == %w75
    assert %o27 == %w149
    assert %o28 == %w78
    assert %o29 == %w99
    assert %o30 == %w135
    assert %o31 == %w136
    assert %o32 == %w137
    assert %o33 == %w138
    assert %o34 == %w63
    assert %o35 == %w54
    assert %o36 == %w55
    assert %o37 == %w56
    assert %o38 == %w57
    assert %o39 == %w58
    assert %o40 == %w59
    assert %o1(BN) == %w151 != %w146 ? 15 <Field> : 16 <Field>
Transition:
    %w151 != %w146 ? -> 15 : -> 16

Block 14:
Func: main, Scope: 7
Exec Bound: 1, While Loop: false, Num VM Ops: 1
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: u32
    %i9: u32
    %i10: field
    %i12: u32
    %i13: u32
    %i14: field
    %i15: field
    %i16: u32
    %i17: field
    %i18: field
    %i19: u32
    %i20: u32
    %i21: field
    %i23: u32
    %i25: field
    %i26: field
    %i27: u32
    %i28: field
    %i29: u32
    %i30: field
    %i31: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o7(BP): field
    %o8: field
    %o5(RP): field
    %o3(TS): field
    %o9: field
    %o10: u32
    %o11: u32
    %o12: u32
    %o13: u32
    %o14: field
    %o15: field
    %o16: u32
    %o17: field
    %o18: field
    %o19: u32
    %o20: u32
    %o21: field
    %o22: field
    %o23: u32
    %o24: field
    %o25: u32
    %o26: field
    %o27: field
Instructions:
    assert %i1(BN) == 14 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    u32 %w69 = %i8
    u32 %w60 = %i9
    field %w133 = %i10
    u32 %w64 = %i12
    u32 %w62 = %i13
    field %w72 = %i14
    field %w73 = %i15
    u32 %w61 = %i16
    field %w91 = %i17
    field %w75 = %i18
    u32 %w78 = %i19
    u32 %w99 = %i20
    field %w135 = %i21
    u32 %w137 = %i23
    field %w63 = %i25
    field %w54 = %i26
    u32 %w55 = %i27
    field %w56 = %i28
    u32 %w57 = %i29
    field %w58 = %i30
    field %w59 = %i31
    field %w152 = %w133[%w137]
    field %w153 = %w135
    field %w154 = %w152
    field %w155 = %w154
    field %w156 = %w153
    field %w157 = %w155
    field %w158 = %w156
    field %w159 = %w157
    field %w160 = %w158
    %w155 = %w159
    %w156 = %w160
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o7(BP) == %w155
    assert %o8 == %w156
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o9 == %w68
    assert %o10 == %w69
    assert %o11 == %w60
    assert %o12 == %w64
    assert %o13 == %w62
    assert %o14 == %w72
    assert %o15 == %w73
    assert %o16 == %w61
    assert %o17 == %w91
    assert %o18 == %w75
    assert %o19 == %w78
    assert %o20 == %w99
    assert %o21 == %w63
    assert %o22 == %w54
    assert %o23 == %w55
    assert %o24 == %w56
    assert %o25 == %w57
    assert %o26 == %w58
    assert %o27 == %w59
    assert %o1(BN) == 42 <Field>
Transition: -> 42

Block 15:
Func: main, Scope: 12
Exec Bound: 1, While Loop: true, Num VM Ops: 1
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: field
    %i9: u32
    %i10: field
    %i11: u32
    %i12: field
    %i13: field
    %i14: u32
    %i15: field
    %i16: u32
    %i17: u32
    %i18: u32
    %i19: u32
    %i20: field
    %i21: field
    %i22: u32
    %i23: field
    %i24: field
    %i25: field
    %i26: field
    %i27: field
    %i28: u32
    %i29: u32
    %i30: field
    %i31: u32
    %i32: u32
    %i33: field
    %i34: field
    %i35: field
    %i36: u32
    %i37: field
    %i38: u32
    %i39: field
    %i40: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: field
    %o9: u32
    %o10: field
    %o11: u32
    %o12: field
    %o13: field
    %o14: u32
    %o15: field
    %o16: u32
    %o17: u32
    %o18: u32
    %o19: u32
    %o20: field
    %o21: field
    %o22: u32
    %o23: field
    %o24: field
    %o25: field
    %o26: field
    %o27: field
    %o28: u32
    %o29: u32
    %o30: field
    %o31: u32
    %o32: u32
    %o33: field
    %o34: field
    %o35: field
    %o36: u32
    %o37: field
    %o38: u32
    %o39: field
    %o40: field
Instructions:
    assert %i1(BN) == 15 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    field %w150 = %i8
    u32 %w151 = %i9
    field %w145 = %i10
    u32 %w69 = %i11
    field %w147 = %i12
    field %w140 = %i13
    u32 %w60 = %i14
    field %w133 = %i15
    u32 %w134 = %i16
    u32 %w64 = %i17
    u32 %w146 = %i18
    u32 %w62 = %i19
    field %w72 = %i20
    field %w73 = %i21
    u32 %w61 = %i22
    field %w91 = %i23
    field %w144 = %i24
    field %w148 = %i25
    field %w75 = %i26
    field %w149 = %i27
    u32 %w78 = %i28
    u32 %w99 = %i29
    field %w135 = %i30
    u32 %w136 = %i31
    u32 %w137 = %i32
    field %w138 = %i33
    field %w63 = %i34
    field %w54 = %i35
    u32 %w55 = %i36
    field %w56 = %i37
    u32 %w57 = %i38
    field %w58 = %i39
    field %w59 = %i40
    field %w161 = %w145 - (F)%w151
    %w147[%w151] = %w161 <field>
    %w148 = %w148 * %w161
    %w150 = %w150 * (F)%w151
    %w151 = %w151 + 1 <U32>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w68
    assert %o8 == %w150
    assert %o9 == %w151
    assert %o10 == %w145
    assert %o11 == %w69
    assert %o12 == %w147
    assert %o13 == %w140
    assert %o14 == %w60
    assert %o15 == %w133
    assert %o16 == %w134
    assert %o17 == %w64
    assert %o18 == %w146
    assert %o19 == %w62
    assert %o20 == %w72
    assert %o21 == %w73
    assert %o22 == %w61
    assert %o23 == %w91
    assert %o24 == %w144
    assert %o25 == %w148
    assert %o26 == %w75
    assert %o27 == %w149
    assert %o28 == %w78
    assert %o29 == %w99
    assert %o30 == %w135
    assert %o31 == %w136
    assert %o32 == %w137
    assert %o33 == %w138
    assert %o34 == %w63
    assert %o35 == %w54
    assert %o36 == %w55
    assert %o37 == %w56
    assert %o38 == %w57
    assert %o39 == %w58
    assert %o40 == %w59
    assert %o1(BN) == %w151 != %w146 ? 15 <Field> : 16 <Field>
Transition:
    %w151 != %w146 ? -> 15 : -> 16

Block 16:
Func: main, Scope: 11
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: field
    %i11: u32
    %i12: field
    %i13: field
    %i14: u32
    %i15: field
    %i16: u32
    %i17: u32
    %i18: u32
    %i19: u32
    %i20: field
    %i21: field
    %i22: u32
    %i23: field
    %i24: field
    %i25: field
    %i26: field
    %i27: field
    %i28: u32
    %i29: u32
    %i30: field
    %i31: u32
    %i32: u32
    %i33: field
    %i34: field
    %i35: field
    %i36: u32
    %i37: field
    %i38: u32
    %i39: field
    %i40: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: field
    %o9: field
    %o10: u32
    %o11: field
    %o12: field
    %o13: u32
    %o14: field
    %o15: u32
    %o16: u32
    %o17: u32
    %o18: u32
    %o19: u32
    %o20: field
    %o21: field
    %o22: u32
    %o23: field
    %o24: field
    %o25: field
    %o26: field
    %o27: field
    %o28: u32
    %o29: u32
    %o30: field
    %o31: u32
    %o32: u32
    %o33: field
    %o34: field
    %o35: field
    %o36: u32
    %o37: field
    %o38: u32
    %o39: field
    %o40: field
Instructions:
    assert %i1(BN) == 16 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    field %w150 = %i8
    u32 %w69 = %i11
    field %w147 = %i12
    field %w140 = %i13
    u32 %w60 = %i14
    field %w133 = %i15
    u32 %w134 = %i16
    u32 %w64 = %i17
    u32 %w146 = %i18
    u32 %w62 = %i19
    field %w72 = %i20
    field %w73 = %i21
    u32 %w61 = %i22
    field %w91 = %i23
    field %w144 = %i24
    field %w148 = %i25
    field %w75 = %i26
    field %w149 = %i27
    u32 %w78 = %i28
    u32 %w99 = %i29
    field %w135 = %i30
    u32 %w136 = %i31
    u32 %w137 = %i32
    field %w138 = %i33
    field %w63 = %i34
    field %w54 = %i35
    u32 %w55 = %i36
    field %w56 = %i37
    u32 %w57 = %i38
    field %w58 = %i39
    field %w59 = %i40
    field %w162 = 1 <Field>
    u32 %w163 = %w146
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w68
    assert %o8 == %w162
    assert %o9 == %w150
    assert %o10 == %w69
    assert %o11 == %w147
    assert %o12 == %w140
    assert %o13 == %w60
    assert %o14 == %w133
    assert %o15 == %w134
    assert %o16 == %w64
    assert %o17 == %w163
    assert %o18 == %w146
    assert %o19 == %w62
    assert %o20 == %w72
    assert %o21 == %w73
    assert %o22 == %w61
    assert %o23 == %w91
    assert %o24 == %w144
    assert %o25 == %w148
    assert %o26 == %w75
    assert %o27 == %w149
    assert %o28 == %w78
    assert %o29 == %w99
    assert %o30 == %w135
    assert %o31 == %w136
    assert %o32 == %w137
    assert %o33 == %w138
    assert %o34 == %w63
    assert %o35 == %w54
    assert %o36 == %w55
    assert %o37 == %w56
    assert %o38 == %w57
    assert %o39 == %w58
    assert %o40 == %w59
    assert %o1(BN) == %w163 > 0 <U32> ? 17 <Field> : 18 <Field>
Transition:
    %w163 > 0 <U32> ? -> 17 : -> 18

Block 17:
Func: main, Scope: 11
Exec Bound: 1, While Loop: true, Num VM Ops: 2
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: field
    %i9: field
    %i10: u32
    %i11: field
    %i12: field
    %i13: u32
    %i14: field
    %i15: u32
    %i16: u32
    %i17: u32
    %i18: u32
    %i19: u32
    %i20: field
    %i21: field
    %i22: u32
    %i23: field
    %i24: field
    %i25: field
    %i26: field
    %i27: field
    %i28: u32
    %i29: u32
    %i30: field
    %i31: u32
    %i32: u32
    %i33: field
    %i34: field
    %i35: field
    %i36: u32
    %i37: field
    %i38: u32
    %i39: field
    %i40: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: field
    %o9: field
    %o10: u32
    %o11: field
    %o12: field
    %o13: u32
    %o14: field
    %o15: u32
    %o16: u32
    %o17: u32
    %o18: u32
    %o19: u32
    %o20: field
    %o21: field
    %o22: u32
    %o23: field
    %o24: field
    %o25: field
    %o26: field
    %o27: field
    %o28: u32
    %o29: u32
    %o30: field
    %o31: u32
    %o32: u32
    %o33: field
    %o34: field
    %o35: field
    %o36: u32
    %o37: field
    %o38: u32
    %o39: field
    %o40: field
Instructions:
    assert %i1(BN) == 17 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    field %w162 = %i8
    field %w150 = %i9
    u32 %w69 = %i10
    field %w147 = %i11
    field %w140 = %i12
    u32 %w60 = %i13
    field %w133 = %i14
    u32 %w134 = %i15
    u32 %w64 = %i16
    u32 %w163 = %i17
    u32 %w146 = %i18
    u32 %w62 = %i19
    field %w72 = %i20
    field %w73 = %i21
    u32 %w61 = %i22
    field %w91 = %i23
    field %w144 = %i24
    field %w148 = %i25
    field %w75 = %i26
    field %w149 = %i27
    u32 %w78 = %i28
    u32 %w99 = %i29
    field %w135 = %i30
    u32 %w136 = %i31
    u32 %w137 = %i32
    field %w138 = %i33
    field %w63 = %i34
    field %w54 = %i35
    u32 %w55 = %i36
    field %w56 = %i37
    u32 %w57 = %i38
    field %w58 = %i39
    field %w59 = %i40
    u32 %w164 = %w163 - 1 <U32>
    field %w165 = %w144[%w164]
    field %w166 = %w147[%w164]
    %w149 = %w149 + %w165 * %w148 * %w162 / %w150 * %w166
    if %w164 != 0 <U32>:
        %w150 = -1 <Field> * %w150 * (F)%w146 - %w164
        %w162 = %w162 * (F)%w164
    %w163 = %w163 - 1 <U32>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w68
    assert %o8 == %w162
    assert %o9 == %w150
    assert %o10 == %w69
    assert %o11 == %w147
    assert %o12 == %w140
    assert %o13 == %w60
    assert %o14 == %w133
    assert %o15 == %w134
    assert %o16 == %w64
    assert %o17 == %w163
    assert %o18 == %w146
    assert %o19 == %w62
    assert %o20 == %w72
    assert %o21 == %w73
    assert %o22 == %w61
    assert %o23 == %w91
    assert %o24 == %w144
    assert %o25 == %w148
    assert %o26 == %w75
    assert %o27 == %w149
    assert %o28 == %w78
    assert %o29 == %w99
    assert %o30 == %w135
    assert %o31 == %w136
    assert %o32 == %w137
    assert %o33 == %w138
    assert %o34 == %w63
    assert %o35 == %w54
    assert %o36 == %w55
    assert %o37 == %w56
    assert %o38 == %w57
    assert %o39 == %w58
    assert %o40 == %w59
    assert %o1(BN) == %w163 > 0 <U32> ? 17 <Field> : 18 <Field>
Transition:
    %w163 > 0 <U32> ? -> 17 : -> 18

Block 18:
Func: main, Scope: 10
Exec Bound: 1, While Loop: false, Num VM Ops: 4
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i10: u32
    %i12: field
    %i13: u32
    %i14: field
    %i15: u32
    %i16: u32
    %i19: u32
    %i20: field
    %i21: field
    %i22: u32
    %i23: field
    %i26: field
    %i27: field
    %i28: u32
    %i29: u32
    %i30: field
    %i31: u32
    %i32: u32
    %i33: field
    %i34: field
    %i35: field
    %i36: u32
    %i37: field
    %i38: u32
    %i39: field
    %i40: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: u32
    %o9: u32
    %o10: field
    %o11: u32
    %o12: u32
    %o13: u32
    %o14: field
    %o15: field
    %o16: u32
    %o17: field
    %o18: field
    %o19: u32
    %o20: u32
    %o21: field
    %o22: u32
    %o23: u32
    %o24: field
    %o25: field
    %o26: field
    %o27: u32
    %o28: field
    %o29: u32
    %o30: field
    %o31: field
Instructions:
    assert %i1(BN) == 18 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    u32 %w69 = %i10
    field %w140 = %i12
    u32 %w60 = %i13
    field %w133 = %i14
    u32 %w134 = %i15
    u32 %w64 = %i16
    u32 %w62 = %i19
    field %w72 = %i20
    field %w73 = %i21
    u32 %w61 = %i22
    field %w91 = %i23
    field %w75 = %i26
    field %w149 = %i27
    u32 %w78 = %i28
    u32 %w99 = %i29
    field %w135 = %i30
    u32 %w136 = %i31
    u32 %w137 = %i32
    field %w138 = %i33
    field %w63 = %i34
    field %w54 = %i35
    u32 %w55 = %i36
    field %w56 = %i37
    u32 %w57 = %i38
    field %w58 = %i39
    field %w59 = %i40
    field %w84 = %w149
    field %w167 = %w84
    %w133[%w134 + 1 <U32>] = %w167 <field>
    field %w141 = %w133[%w134]
    field %w168 = %w141
    field %w141 = %w140[0 <Field>]
    field %w169 = %w140[1 <Field>]
    assert %w141 + %w169 == %w168
    %w134 = %w134 + 1 <U32>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w68
    assert %o8 == %w69
    assert %o9 == %w60
    assert %o10 == %w133
    assert %o11 == %w134
    assert %o12 == %w64
    assert %o13 == %w62
    assert %o14 == %w72
    assert %o15 == %w73
    assert %o16 == %w61
    assert %o17 == %w91
    assert %o18 == %w75
    assert %o19 == %w78
    assert %o20 == %w99
    assert %o21 == %w135
    assert %o22 == %w136
    assert %o23 == %w137
    assert %o24 == %w138
    assert %o25 == %w63
    assert %o26 == %w54
    assert %o27 == %w55
    assert %o28 == %w56
    assert %o29 == %w57
    assert %o30 == %w58
    assert %o31 == %w59
    assert %o1(BN) == %w134 != %w137 ? 13 <Field> : 14 <Field>
Transition:
    %w134 != %w137 ? -> 13 : -> 14

Block 19:
Func: main, Scope: 6
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i10: field
    %i11: u32
    %i12: u32
    %i13: u32
    %i14: u32
    %i15: field
    %i16: field
    %i17: u32
    %i18: field
    %i19: field
    %i21: u32
    %i22: u32
    %i23: field
    %i25: field
    %i26: u32
    %i27: field
    %i28: u32
    %i29: field
    %i30: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o7(BP): field
    %o8: field
    %o5(RP): field
    %o3(TS): field
    %o9: field
    %o10: u32
    %o11: u32
    %o12: u32
    %o13: u32
    %o14: field
    %o15: field
    %o16: u32
    %o17: field
    %o18: field
    %o19: u32
    %o20: u32
    %o21: field
    %o22: field
    %o23: u32
    %o24: field
    %o25: u32
    %o26: field
    %o27: field
Instructions:
    assert %i1(BN) == 19 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    field %w170 = %i10
    u32 %w69 = %i11
    u32 %w60 = %i12
    u32 %w64 = %i13
    u32 %w62 = %i14
    field %w72 = %i15
    field %w73 = %i16
    u32 %w61 = %i17
    field %w91 = %i18
    field %w75 = %i19
    u32 %w78 = %i21
    u32 %w99 = %i22
    field %w63 = %i23
    field %w54 = %i25
    u32 %w55 = %i26
    field %w56 = %i27
    u32 %w57 = %i28
    field %w58 = %i29
    field %w59 = %i30
    field[0 <U32>] %w171
    field %w172 = %w171
    field %w173 = %w170
    field %w155 = %w173
    field %w156 = %w172
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o7(BP) == %w155
    assert %o8 == %w156
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o9 == %w68
    assert %o10 == %w69
    assert %o11 == %w60
    assert %o12 == %w64
    assert %o13 == %w62
    assert %o14 == %w72
    assert %o15 == %w73
    assert %o16 == %w61
    assert %o17 == %w91
    assert %o18 == %w75
    assert %o19 == %w78
    assert %o20 == %w99
    assert %o21 == %w63
    assert %o22 == %w54
    assert %o23 == %w55
    assert %o24 == %w56
    assert %o25 == %w57
    assert %o26 == %w58
    assert %o27 == %w59
    assert %o1(BN) == 42 <Field>
Transition: -> 42

Block 20:
Func: main, Scope: 6
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: u32
    %i9: u32
    %i10: field
    %i11: u32
    %i12: u32
    %i13: u32
    %i14: u32
    %i15: field
    %i16: field
    %i17: u32
    %i18: field
    %i19: field
    %i20: field
    %i21: u32
    %i22: u32
    %i23: field
    %i24: field
    %i25: field
    %i26: u32
    %i27: field
    %i28: u32
    %i29: field
    %i30: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: u32
    %o9: u32
    %o10: field
    %o11: u32
    %o12: u32
    %o13: u32
    %o14: u32
    %o15: field
    %o16: field
    %o17: u32
    %o18: field
    %o19: field
    %o20: field
    %o21: u32
    %o22: field
    %o23: u32
    %o24: field
    %o25: field
    %o26: field
    %o27: u32
    %o28: field
    %o29: u32
    %o30: field
    %o31: field
Instructions:
    assert %i1(BN) == 20 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    u32 %w174 = %i8
    u32 %w175 = %i9
    field %w170 = %i10
    u32 %w69 = %i11
    u32 %w60 = %i12
    u32 %w64 = %i13
    u32 %w62 = %i14
    field %w72 = %i15
    field %w73 = %i16
    u32 %w61 = %i17
    field %w91 = %i18
    field %w75 = %i19
    field %w176 = %i20
    u32 %w78 = %i21
    u32 %w99 = %i22
    field %w63 = %i23
    field %w177 = %i24
    field %w54 = %i25
    u32 %w55 = %i26
    field %w56 = %i27
    u32 %w57 = %i28
    field %w58 = %i29
    field %w59 = %i30
    field %w178 = %w177
    field %w179 = 21 <Field>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w68
    assert %o8 == %w174
    assert %o9 == %w175
    assert %o10 == %w170
    assert %o11 == %w69
    assert %o12 == %w60
    assert %o13 == %w64
    assert %o14 == %w62
    assert %o15 == %w72
    assert %o16 == %w73
    assert %o17 == %w61
    assert %o18 == %w91
    assert %o19 == %w75
    assert %o20 == %w176
    assert %o21 == %w78
    assert %o22 == %w179
    assert %o23 == %w99
    assert %o24 == %w178
    assert %o25 == %w63
    assert %o26 == %w54
    assert %o27 == %w55
    assert %o28 == %w56
    assert %o29 == %w57
    assert %o30 == %w58
    assert %o31 == %w59
    assert %o1(BN) == 71 <Field>
Transition: -> 71

Block 21:
Func: main, Scope: 5
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i7(BP): field
    %i5(RP): field
    %i3(TS): field
    %i8: field
    %i9: u32
    %i10: u32
    %i11: field
    %i12: u32
    %i13: u32
    %i14: u32
    %i15: u32
    %i16: field
    %i17: field
    %i18: u32
    %i19: field
    %i20: field
    %i21: field
    %i22: u32
    %i23: u32
    %i24: field
    %i25: field
    %i26: u32
    %i27: field
    %i28: u32
    %i29: field
    %i30: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: u32
    %o9: u32
    %o10: field
    %o11: u32
    %o12: u32
    %o13: u32
    %o14: u32
    %o15: field
    %o16: field
    %o17: u32
    %o18: field
    %o19: field
    %o20: field
    %o21: u32
    %o22: field
    %o23: u32
    %o24: field
    %o25: field
    %o26: field
    %o27: u32
    %o28: field
    %o29: u32
    %o30: field
    %o31: field
Instructions:
    assert %i1(BN) == 21 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w180 = %i7(BP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i8
    u32 %w174 = %i9
    u32 %w175 = %i10
    field %w170 = %i11
    u32 %w69 = %i12
    u32 %w60 = %i13
    u32 %w64 = %i14
    u32 %w62 = %i15
    field %w72 = %i16
    field %w73 = %i17
    u32 %w61 = %i18
    field %w91 = %i19
    field %w75 = %i20
    field %w176 = %i21
    u32 %w78 = %i22
    u32 %w99 = %i23
    field %w63 = %i24
    field %w54 = %i25
    u32 %w55 = %i26
    field %w56 = %i27
    u32 %w57 = %i28
    field %w58 = %i29
    field %w59 = %i30
    field %w181 = %w180
    field %w177 = %w181
    field %w178 = %w177
    field %w179 = 22 <Field>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w68
    assert %o8 == %w174
    assert %o9 == %w175
    assert %o10 == %w170
    assert %o11 == %w69
    assert %o12 == %w60
    assert %o13 == %w64
    assert %o14 == %w62
    assert %o15 == %w72
    assert %o16 == %w73
    assert %o17 == %w61
    assert %o18 == %w91
    assert %o19 == %w75
    assert %o20 == %w176
    assert %o21 == %w78
    assert %o22 == %w179
    assert %o23 == %w99
    assert %o24 == %w178
    assert %o25 == %w63
    assert %o26 == %w54
    assert %o27 == %w55
    assert %o28 == %w56
    assert %o29 == %w57
    assert %o30 == %w58
    assert %o31 == %w59
    assert %o1(BN) == 71 <Field>
Transition: -> 71

Block 22:
Func: main, Scope: 5
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i7(BP): field
    %i5(RP): field
    %i3(TS): field
    %i8: field
    %i9: u32
    %i10: u32
    %i11: field
    %i12: u32
    %i13: u32
    %i14: u32
    %i15: u32
    %i16: field
    %i17: field
    %i18: u32
    %i19: field
    %i20: field
    %i21: field
    %i22: u32
    %i23: u32
    %i24: field
    %i25: field
    %i26: u32
    %i27: field
    %i28: u32
    %i29: field
    %i30: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: u32
    %o9: u32
    %o10: field
    %o11: u32
    %o12: u32
    %o13: u32
    %o14: u32
    %o15: u32
    %o16: field
    %o17: field
    %o18: u32
    %o19: field
    %o20: field
    %o21: field
    %o22: u32
    %o23: u32
    %o24: field
    %o25: field
    %o26: field
    %o27: u32
    %o28: field
    %o29: u32
    %o30: field
    %o31: field
    %o32: field
    %o33: bool
    %o34: u32
    %o35: u32
    %o36: field
    %o37: u32
Instructions:
    assert %i1(BN) == 22 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w180 = %i7(BP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i8
    u32 %w174 = %i9
    u32 %w175 = %i10
    field %w170 = %i11
    u32 %w69 = %i12
    u32 %w60 = %i13
    u32 %w64 = %i14
    u32 %w62 = %i15
    field %w72 = %i16
    field %w73 = %i17
    u32 %w61 = %i18
    field %w91 = %i19
    field %w75 = %i20
    field %w176 = %i21
    u32 %w78 = %i22
    u32 %w99 = %i23
    field %w63 = %i24
    field %w54 = %i25
    u32 %w55 = %i26
    field %w56 = %i27
    u32 %w57 = %i28
    field %w58 = %i29
    field %w59 = %i30
    field %w181 = %w180
    field %w177 = %w181
    field[%w175] %w182
    field[0][%w175] %w183
    u32 %w184 = 1 <U32>
    u32 %w185 = %w175
    u32 %w186 = %w174
    bool %w187 = false
    field %w188 = %w183
    field %w189 = %w182
    field %w190 = %w189
    bool %w191 = %w187
    u32 %w192 = %w186
    u32 %w193 = %w185
    field %w194 = %w188
    u32 %w195 = %w184
    u32 %w196 = 0 <U32>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w68
    assert %o8 == %w174
    assert %o9 == %w175
    assert %o10 == %w170
    assert %o11 == %w69
    assert %o12 == %w60
    assert %o13 == %w196
    assert %o14 == %w64
    assert %o15 == %w62
    assert %o16 == %w72
    assert %o17 == %w73
    assert %o18 == %w61
    assert %o19 == %w91
    assert %o20 == %w75
    assert %o21 == %w176
    assert %o22 == %w78
    assert %o23 == %w99
    assert %o24 == %w63
    assert %o25 == %w177
    assert %o26 == %w54
    assert %o27 == %w55
    assert %o28 == %w56
    assert %o29 == %w57
    assert %o30 == %w58
    assert %o31 == %w59
    assert %o32 == %w190
    assert %o33 == %w191
    assert %o34 == %w192
    assert %o35 == %w193
    assert %o36 == %w194
    assert %o37 == %w195
    assert %o1(BN) == %w196 != %w175 ? 23 <Field> : 27 <Field>
Transition:
    %w196 != %w175 ? -> 23 : -> 27

Block 23:
Func: main, Scope: 7
Exec Bound: 1, While Loop: true, Num VM Ops: 1
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: u32
    %i9: u32
    %i10: field
    %i11: u32
    %i12: u32
    %i13: u32
    %i14: u32
    %i15: u32
    %i16: field
    %i17: field
    %i18: u32
    %i19: field
    %i20: field
    %i21: field
    %i22: u32
    %i23: u32
    %i24: field
    %i25: field
    %i26: field
    %i27: u32
    %i28: field
    %i29: u32
    %i30: field
    %i31: field
    %i32: field
    %i33: bool
    %i34: u32
    %i35: u32
    %i36: field
    %i37: u32
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: u32
    %o9: u32
    %o10: field
    %o11: u32
    %o12: u32
    %o13: u32
    %o14: u32
    %o15: u32
    %o16: u32
    %o17: field
    %o18: field
    %o19: u32
    %o20: field
    %o21: field
    %o22: field
    %o23: field
    %o24: u32
    %o25: u32
    %o26: field
    %o27: field
    %o28: field
    %o29: u32
    %o30: field
    %o31: u32
    %o32: field
    %o33: field
    %o34: field
    %o35: bool
    %o36: u32
    %o37: u32
    %o38: field
    %o39: u32
Instructions:
    assert %i1(BN) == 23 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    u32 %w174 = %i8
    u32 %w175 = %i9
    field %w170 = %i10
    u32 %w69 = %i11
    u32 %w60 = %i12
    u32 %w196 = %i13
    u32 %w64 = %i14
    u32 %w62 = %i15
    field %w72 = %i16
    field %w73 = %i17
    u32 %w61 = %i18
    field %w91 = %i19
    field %w75 = %i20
    field %w176 = %i21
    u32 %w78 = %i22
    u32 %w99 = %i23
    field %w63 = %i24
    field %w177 = %i25
    field %w54 = %i26
    u32 %w55 = %i27
    field %w56 = %i28
    u32 %w57 = %i29
    field %w58 = %i30
    field %w59 = %i31
    field %w190 = %i32
    bool %w191 = %i33
    u32 %w192 = %i34
    u32 %w193 = %i35
    field %w194 = %i36
    u32 %w195 = %i37
    field %w197 = %w176[%w196]
    field %w198 = %w197
    u32 %w199 = 0 <U32>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w68
    assert %o8 == %w174
    assert %o9 == %w175
    assert %o10 == %w170
    assert %o11 == %w69
    assert %o12 == %w60
    assert %o13 == %w196
    assert %o14 == %w64
    assert %o15 == %w199
    assert %o16 == %w62
    assert %o17 == %w72
    assert %o18 == %w73
    assert %o19 == %w61
    assert %o20 == %w91
    assert %o21 == %w75
    assert %o22 == %w176
    assert %o23 == %w198
    assert %o24 == %w78
    assert %o25 == %w99
    assert %o26 == %w63
    assert %o27 == %w177
    assert %o28 == %w54
    assert %o29 == %w55
    assert %o30 == %w56
    assert %o31 == %w57
    assert %o32 == %w58
    assert %o33 == %w59
    assert %o34 == %w190
    assert %o35 == %w191
    assert %o36 == %w192
    assert %o37 == %w193
    assert %o38 == %w194
    assert %o39 == %w195
    assert %o1(BN) == %w199 != %w174 + 1 <U32> ? 24 <Field> : 26 <Field>
Transition:
    %w199 != %w174 + 1 <U32> ? -> 24 : -> 26

Block 24:
Func: main, Scope: 10
Exec Bound: 1, While Loop: true, Num VM Ops: 1
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: u32
    %i9: u32
    %i10: field
    %i11: u32
    %i12: u32
    %i13: u32
    %i14: u32
    %i15: u32
    %i16: u32
    %i17: field
    %i18: field
    %i19: u32
    %i20: field
    %i21: field
    %i22: field
    %i23: field
    %i24: u32
    %i25: u32
    %i26: field
    %i27: field
    %i28: field
    %i29: u32
    %i30: field
    %i31: u32
    %i32: field
    %i33: field
    %i34: field
    %i35: bool
    %i36: u32
    %i37: u32
    %i38: field
    %i39: u32
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o21: u32
    %o10: u32
    %o23: u32
    %o11: u32
    %o24: field
    %o25: field
    %o12: u32
    %o26: field
    %o27: field
    %o28: field
    %o29: field
    %o31: u32
    %o13: field
    %o32: u32
    %o14: field
    %o34: field
    %o15: field
    %o16: u32
    %o17: field
    %o18: u32
    %o19: field
    %o20: field
    %o35: field
    %o36: bool
    %o37: u32
    %o38: u32
    %o39: field
    %o40: u32
Instructions:
    assert %i1(BN) == 24 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    u32 %w174 = %i8
    u32 %w175 = %i9
    field %w170 = %i10
    u32 %w69 = %i11
    u32 %w60 = %i12
    u32 %w196 = %i13
    u32 %w64 = %i14
    u32 %w199 = %i15
    u32 %w62 = %i16
    field %w72 = %i17
    field %w73 = %i18
    u32 %w61 = %i19
    field %w91 = %i20
    field %w75 = %i21
    field %w176 = %i22
    field %w198 = %i23
    u32 %w78 = %i24
    u32 %w99 = %i25
    field %w63 = %i26
    field %w177 = %i27
    field %w54 = %i28
    u32 %w55 = %i29
    field %w56 = %i30
    u32 %w57 = %i31
    field %w58 = %i32
    field %w59 = %i33
    field %w190 = %i34
    bool %w191 = %i35
    u32 %w192 = %i36
    u32 %w193 = %i37
    field %w194 = %i38
    u32 %w195 = %i39
    field %w66 = %w177
    %PHY[%SP + 0] = %w4(SP) <field>
    %w4(SP) = %w3(RP)
    %PHY[%SP + 1] = %w68 <field>
    %PHY[%SP + 2] = %w174 <u32>
    %PHY[%SP + 3] = %w175 <u32>
    %PHY[%SP + 4] = %w170 <field>
    %PHY[%SP + 5] = %w69 <u32>
    %PHY[%SP + 6] = %w60 <u32>
    field %w67 = 25 <Field>
    %w3(RP) = %w3(RP) + 7 <Field>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o21 == %w196
    assert %o10 == %w64
    assert %o23 == %w199
    assert %o11 == %w62
    assert %o24 == %w72
    assert %o25 == %w73
    assert %o12 == %w61
    assert %o26 == %w91
    assert %o27 == %w75
    assert %o28 == %w176
    assert %o29 == %w198
    assert %o31 == %w78
    assert %o13 == %w67
    assert %o32 == %w99
    assert %o14 == %w66
    assert %o34 == %w63
    assert %o15 == %w54
    assert %o16 == %w55
    assert %o17 == %w56
    assert %o18 == %w57
    assert %o19 == %w58
    assert %o20 == %w59
    assert %o35 == %w190
    assert %o36 == %w191
    assert %o37 == %w192
    assert %o38 == %w193
    assert %o39 == %w194
    assert %o40 == %w195
    assert %o1(BN) == 70 <Field>
Transition: -> 70

Block 25:
Func: main, Scope: 11
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i7(BP): field
    %i5(RP): field
    %i3(TS): field
    %i8: u32
    %i12: u32
    %i14: u32
    %i15: u32
    %i16: field
    %i17: field
    %i18: u32
    %i19: field
    %i20: field
    %i21: field
    %i22: field
    %i24: u32
    %i25: u32
    %i27: field
    %i28: field
    %i29: u32
    %i30: field
    %i31: u32
    %i32: field
    %i33: field
    %i34: field
    %i35: bool
    %i36: u32
    %i37: u32
    %i38: field
    %i39: u32
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: u32
    %o9: u32
    %o10: field
    %o11: u32
    %o12: u32
    %o13: u32
    %o14: u32
    %o15: u32
    %o16: u32
    %o17: field
    %o18: field
    %o19: u32
    %o20: field
    %o21: field
    %o22: field
    %o23: field
    %o24: u32
    %o25: u32
    %o26: field
    %o27: field
    %o28: field
    %o29: u32
    %o30: field
    %o31: u32
    %o32: field
    %o33: field
    %o34: field
    %o35: bool
    %o36: u32
    %o37: u32
    %o38: field
    %o39: u32
Instructions:
    assert %i1(BN) == 25 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w200 = %i7(BP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    u32 %w196 = %i8
    u32 %w64 = %i12
    u32 %w199 = %i14
    u32 %w62 = %i15
    field %w72 = %i16
    field %w73 = %i17
    u32 %w61 = %i18
    field %w91 = %i19
    field %w75 = %i20
    field %w176 = %i21
    field %w198 = %i22
    u32 %w78 = %i24
    u32 %w99 = %i25
    field %w63 = %i27
    field %w54 = %i28
    u32 %w55 = %i29
    field %w56 = %i30
    u32 %w57 = %i31
    field %w58 = %i32
    field %w59 = %i33
    field %w190 = %i34
    bool %w191 = %i35
    u32 %w192 = %i36
    u32 %w193 = %i37
    field %w194 = %i38
    u32 %w195 = %i39
    u32 %w60 = %PHY[%BP + 6]
    u32 %w69 = %PHY[%BP + 5]
    field %w170 = %PHY[%BP + 4]
    u32 %w175 = %PHY[%BP + 3]
    u32 %w174 = %PHY[%BP + 2]
    field %w68 = %PHY[%BP + 1]
    field %w4(SP) = %PHY[%BP + 0]
    field %w201 = %w200
    field %w177 = %w201
    %w199 = %w199 + 1 <U32>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w68
    assert %o8 == %w174
    assert %o9 == %w175
    assert %o10 == %w170
    assert %o11 == %w69
    assert %o12 == %w60
    assert %o13 == %w196
    assert %o14 == %w64
    assert %o15 == %w199
    assert %o16 == %w62
    assert %o17 == %w72
    assert %o18 == %w73
    assert %o19 == %w61
    assert %o20 == %w91
    assert %o21 == %w75
    assert %o22 == %w176
    assert %o23 == %w198
    assert %o24 == %w78
    assert %o25 == %w99
    assert %o26 == %w63
    assert %o27 == %w177
    assert %o28 == %w54
    assert %o29 == %w55
    assert %o30 == %w56
    assert %o31 == %w57
    assert %o32 == %w58
    assert %o33 == %w59
    assert %o34 == %w190
    assert %o35 == %w191
    assert %o36 == %w192
    assert %o37 == %w193
    assert %o38 == %w194
    assert %o39 == %w195
    assert %o1(BN) == %w199 != %w174 + 1 <U32> ? 24 <Field> : 26 <Field>
Transition:
    %w199 != %w174 + 1 <U32> ? -> 24 : -> 26

Block 26:
Func: main, Scope: 9
Exec Bound: 1, While Loop: false, Num VM Ops: 2
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: u32
    %i9: u32
    %i10: field
    %i11: u32
    %i12: u32
    %i13: u32
    %i14: u32
    %i16: u32
    %i17: field
    %i18: field
    %i19: u32
    %i20: field
    %i21: field
    %i22: field
    %i23: field
    %i24: u32
    %i25: u32
    %i26: field
    %i27: field
    %i28: field
    %i29: u32
    %i30: field
    %i31: u32
    %i32: field
    %i33: field
    %i34: field
    %i35: bool
    %i36: u32
    %i37: u32
    %i38: field
    %i39: u32
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: u32
    %o9: u32
    %o10: field
    %o11: u32
    %o12: u32
    %o13: u32
    %o14: u32
    %o15: u32
    %o16: field
    %o17: field
    %o18: u32
    %o19: field
    %o20: field
    %o21: field
    %o22: u32
    %o23: u32
    %o24: field
    %o25: field
    %o26: field
    %o27: u32
    %o28: field
    %o29: u32
    %o30: field
    %o31: field
    %o32: field
    %o33: bool
    %o34: u32
    %o35: u32
    %o36: field
    %o37: u32
Instructions:
    assert %i1(BN) == 26 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    u32 %w174 = %i8
    u32 %w175 = %i9
    field %w170 = %i10
    u32 %w69 = %i11
    u32 %w60 = %i12
    u32 %w196 = %i13
    u32 %w64 = %i14
    u32 %w62 = %i16
    field %w72 = %i17
    field %w73 = %i18
    u32 %w61 = %i19
    field %w91 = %i20
    field %w75 = %i21
    field %w176 = %i22
    field %w198 = %i23
    u32 %w78 = %i24
    u32 %w99 = %i25
    field %w63 = %i26
    field %w177 = %i27
    field %w54 = %i28
    u32 %w55 = %i29
    field %w56 = %i30
    u32 %w57 = %i31
    field %w58 = %i32
    field %w59 = %i33
    field %w190 = %i34
    bool %w191 = %i35
    u32 %w192 = %i36
    u32 %w193 = %i37
    field %w194 = %i38
    u32 %w195 = %i39
    field %w202 = %w190
    bool %w203 = %w191
    u32 %w204 = %w192
    u32 %w205 = %w193
    field %w206 = %w194
    u32 %w207 = %w195
    field %w208 = %w198
    field %w209 = %w177
    assert !%w203
    field %w210 = %w209
    %w202[%w207 - 1 <U32>] = %w210 <field>
    %w206[%w207 - 1 <U32>] = %w208 <field>
    if %w207 == %w205:
        %w203 = true
    else:
        %w207 = %w207 + 1 <U32>
    field %w211 = %w202
    bool %w212 = %w203
    u32 %w213 = %w204
    u32 %w214 = %w205
    field %w215 = %w206
    u32 %w216 = %w207
    field %w217 = %w211
    bool %w218 = %w212
    u32 %w219 = %w213
    u32 %w220 = %w214
    field %w221 = %w215
    u32 %w222 = %w216
    %w190 = %w217
    %w191 = %w218
    %w192 = %w219
    %w193 = %w220
    %w194 = %w221
    %w195 = %w222
    %w196 = %w196 + 1 <U32>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w68
    assert %o8 == %w174
    assert %o9 == %w175
    assert %o10 == %w170
    assert %o11 == %w69
    assert %o12 == %w60
    assert %o13 == %w196
    assert %o14 == %w64
    assert %o15 == %w62
    assert %o16 == %w72
    assert %o17 == %w73
    assert %o18 == %w61
    assert %o19 == %w91
    assert %o20 == %w75
    assert %o21 == %w176
    assert %o22 == %w78
    assert %o23 == %w99
    assert %o24 == %w63
    assert %o25 == %w177
    assert %o26 == %w54
    assert %o27 == %w55
    assert %o28 == %w56
    assert %o29 == %w57
    assert %o30 == %w58
    assert %o31 == %w59
    assert %o32 == %w190
    assert %o33 == %w191
    assert %o34 == %w192
    assert %o35 == %w193
    assert %o36 == %w194
    assert %o37 == %w195
    assert %o1(BN) == %w196 != %w175 ? 23 <Field> : 27 <Field>
Transition:
    %w196 != %w175 ? -> 23 : -> 27

Block 27:
Func: main, Scope: 6
Exec Bound: 1, While Loop: false, Num VM Ops: 1
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i10: field
    %i11: u32
    %i12: u32
    %i14: u32
    %i15: u32
    %i16: field
    %i17: field
    %i18: u32
    %i19: field
    %i20: field
    %i22: u32
    %i23: u32
    %i24: field
    %i26: field
    %i27: u32
    %i28: field
    %i29: u32
    %i30: field
    %i31: field
    %i32: field
    %i33: bool
    %i34: u32
    %i35: u32
    %i36: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: u32
    %o9: u32
    %o10: field
    %o11: u32
    %o12: u32
    %o13: u32
    %o14: field
    %o15: field
    %o16: u32
    %o17: field
    %o18: field
    %o19: u32
    %o20: u32
    %o21: field
    %o22: u32
    %o23: u32
    %o24: field
    %o25: field
    %o26: field
    %o27: u32
    %o28: field
    %o29: u32
    %o30: field
    %o31: field
Instructions:
    assert %i1(BN) == 27 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    field %w170 = %i10
    u32 %w69 = %i11
    u32 %w60 = %i12
    u32 %w64 = %i14
    u32 %w62 = %i15
    field %w72 = %i16
    field %w73 = %i17
    u32 %w61 = %i18
    field %w91 = %i19
    field %w75 = %i20
    u32 %w78 = %i22
    u32 %w99 = %i23
    field %w63 = %i24
    field %w54 = %i26
    u32 %w55 = %i27
    field %w56 = %i28
    u32 %w57 = %i29
    field %w58 = %i30
    field %w59 = %i31
    field %w190 = %i32
    bool %w191 = %i33
    u32 %w192 = %i34
    u32 %w193 = %i35
    field %w194 = %i36
    field %w135 = %w190
    bool %w223 = %w191
    u32 %w136 = %w192
    u32 %w137 = %w193
    field %w138 = %w194
    field %w224 = %w170
    assert %w223
    field[%w137 + 1 <U32>] %w133
    %w133[0 <Field>] = %w224 <field>
    u32 %w134 = 0 <U32>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w68
    assert %o8 == %w69
    assert %o9 == %w60
    assert %o10 == %w133
    assert %o11 == %w134
    assert %o12 == %w64
    assert %o13 == %w62
    assert %o14 == %w72
    assert %o15 == %w73
    assert %o16 == %w61
    assert %o17 == %w91
    assert %o18 == %w75
    assert %o19 == %w78
    assert %o20 == %w99
    assert %o21 == %w135
    assert %o22 == %w136
    assert %o23 == %w137
    assert %o24 == %w138
    assert %o25 == %w63
    assert %o26 == %w54
    assert %o27 == %w55
    assert %o28 == %w56
    assert %o29 == %w57
    assert %o30 == %w58
    assert %o31 == %w59
    assert %o1(BN) == %w134 != %w137 ? 13 <Field> : 14 <Field>
Transition:
    %w134 != %w137 ? -> 13 : -> 14

Block 28:
Func: main, Scope: 1
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i7(BP): field
    %i5(RP): field
    %i3(TS): field
    %i9: field
    %i10: u32
    %i11: field
    %i12: u32
    %i15: u32
    %i18: u32
    %i28: field
    %i29: u32
    %i30: field
    %i31: u32
    %i32: field
    %i33: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: field
    %o9: u32
    %o10: u32
    %o11: field
    %o12: u32
    %o13: field
    %o14: u32
    %o15: u32
    %o16: u32
    %o17: field
    %o18: field
    %o19: field
    %o20: u32
    %o21: field
    %o22: u32
    %o23: field
    %o24: field
Instructions:
    assert %i1(BN) == 28 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w200 = %i7(BP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w53 = %i9
    u32 %w65 = %i10
    field %w52 = %i11
    u32 %w64 = %i12
    u32 %w62 = %i15
    u32 %w61 = %i18
    field %w54 = %i28
    u32 %w55 = %i29
    field %w56 = %i30
    u32 %w57 = %i31
    field %w58 = %i32
    field %w59 = %i33
    u32 %w60 = %PHY[%BP + 1]
    field %w4(SP) = %PHY[%BP + 0]
    field %w225 = %w200
    field %w63 = %w225
    field %w226 = %w63
    field[%w64 + %w65 * 2 <U32>] %w68
    field %w227 = 1 <Field>
    u32 %w228 = 0 <U32>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w226
    assert %o8 == %w68
    assert %o9 == %w60
    assert %o10 == %w228
    assert %o11 == %w53
    assert %o12 == %w65
    assert %o13 == %w52
    assert %o14 == %w64
    assert %o15 == %w62
    assert %o16 == %w61
    assert %o17 == %w227
    assert %o18 == %w63
    assert %o19 == %w54
    assert %o20 == %w55
    assert %o21 == %w56
    assert %o22 == %w57
    assert %o23 == %w58
    assert %o24 == %w59
    assert %o1(BN) == %w228 != %w64 + %w65 * 2 <U32> ? 29 <Field> : 30 <Field>
Transition:
    %w228 != %w64 + %w65 * 2 <U32> ? -> 29 : -> 30

Block 29:
Func: main, Scope: 3
Exec Bound: 1, While Loop: true, Num VM Ops: 1
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: field
    %i9: u32
    %i10: u32
    %i11: field
    %i12: u32
    %i13: field
    %i14: u32
    %i15: u32
    %i16: u32
    %i17: field
    %i18: field
    %i19: field
    %i20: u32
    %i21: field
    %i22: u32
    %i23: field
    %i24: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: field
    %o9: u32
    %o10: u32
    %o11: field
    %o12: u32
    %o13: field
    %o14: u32
    %o15: u32
    %o16: u32
    %o17: field
    %o18: field
    %o19: field
    %o20: u32
    %o21: field
    %o22: u32
    %o23: field
    %o24: field
Instructions:
    assert %i1(BN) == 29 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w226 = %i7(BP)
    field %w68 = %i8
    u32 %w60 = %i9
    u32 %w228 = %i10
    field %w53 = %i11
    u32 %w65 = %i12
    field %w52 = %i13
    u32 %w64 = %i14
    u32 %w62 = %i15
    u32 %w61 = %i16
    field %w227 = %i17
    field %w63 = %i18
    field %w54 = %i19
    u32 %w55 = %i20
    field %w56 = %i21
    u32 %w57 = %i22
    field %w58 = %i23
    field %w59 = %i24
    %w68[%w228] = %w227 <field>
    %w227 = %w227 * %w226
    %w228 = %w228 + 1 <U32>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w226
    assert %o8 == %w68
    assert %o9 == %w60
    assert %o10 == %w228
    assert %o11 == %w53
    assert %o12 == %w65
    assert %o13 == %w52
    assert %o14 == %w64
    assert %o15 == %w62
    assert %o16 == %w61
    assert %o17 == %w227
    assert %o18 == %w63
    assert %o19 == %w54
    assert %o20 == %w55
    assert %o21 == %w56
    assert %o22 == %w57
    assert %o23 == %w58
    assert %o24 == %w59
    assert %o1(BN) == %w228 != %w64 + %w65 * 2 <U32> ? 29 <Field> : 30 <Field>
Transition:
    %w228 != %w64 + %w65 * 2 <U32> ? -> 29 : -> 30

Block 30:
Func: main, Scope: 2
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i8: field
    %i9: u32
    %i11: field
    %i12: u32
    %i13: field
    %i14: u32
    %i15: u32
    %i16: u32
    %i18: field
    %i19: field
    %i20: u32
    %i21: field
    %i22: u32
    %i23: field
    %i24: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: u32
    %o9: u32
    %o10: field
    %o11: u32
    %o12: field
    %o13: u32
    %o14: field
    %o15: u32
    %o16: u32
    %o17: field
    %o18: field
    %o19: u32
    %o20: field
    %o21: u32
    %o22: field
    %o23: field
Instructions:
    assert %i1(BN) == 30 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i8
    u32 %w60 = %i9
    field %w53 = %i11
    u32 %w65 = %i12
    field %w52 = %i13
    u32 %w64 = %i14
    u32 %w62 = %i15
    u32 %w61 = %i16
    field %w63 = %i18
    field %w54 = %i19
    u32 %w55 = %i20
    field %w56 = %i21
    u32 %w57 = %i22
    field %w58 = %i23
    field %w59 = %i24
    field[%w62] %w118
    u32 %w229 = 0 <U32>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w68
    assert %o8 == %w60
    assert %o9 == %w229
    assert %o10 == %w53
    assert %o11 == %w65
    assert %o12 == %w52
    assert %o13 == %w64
    assert %o14 == %w118
    assert %o15 == %w62
    assert %o16 == %w61
    assert %o17 == %w63
    assert %o18 == %w54
    assert %o19 == %w55
    assert %o20 == %w56
    assert %o21 == %w57
    assert %o22 == %w58
    assert %o23 == %w59
    assert %o1(BN) == %w229 != %w62 ? 31 <Field> : 33 <Field>
Transition:
    %w229 != %w62 ? -> 31 : -> 33

Block 31:
Func: main, Scope: 3
Exec Bound: 1, While Loop: true, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: u32
    %i9: u32
    %i10: field
    %i11: u32
    %i12: field
    %i13: u32
    %i14: field
    %i15: u32
    %i16: u32
    %i17: field
    %i18: field
    %i19: u32
    %i20: field
    %i21: u32
    %i22: field
    %i23: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: u32
    %o9: field
    %o10: u32
    %o22: field
    %o11: u32
    %o12: u32
    %o13: field
    %o14: field
    %o15: field
    %o16: u32
    %o17: field
    %o18: u32
    %o19: field
    %o20: field
Instructions:
    assert %i1(BN) == 31 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    u32 %w60 = %i8
    u32 %w229 = %i9
    field %w53 = %i10
    u32 %w65 = %i11
    field %w52 = %i12
    u32 %w64 = %i13
    field %w118 = %i14
    u32 %w62 = %i15
    u32 %w61 = %i16
    field %w63 = %i17
    field %w54 = %i18
    u32 %w55 = %i19
    field %w56 = %i20
    u32 %w57 = %i21
    field %w58 = %i22
    field %w59 = %i23
    field %w66 = %w63
    %PHY[%SP + 0] = %w4(SP) <field>
    %w4(SP) = %w3(RP)
    %PHY[%SP + 1] = %w68 <field>
    %PHY[%SP + 2] = %w60 <u32>
    %PHY[%SP + 3] = %w229 <u32>
    field %w67 = 32 <Field>
    %w3(RP) = %w3(RP) + 4 <Field>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w53
    assert %o8 == %w65
    assert %o9 == %w52
    assert %o10 == %w64
    assert %o22 == %w118
    assert %o11 == %w62
    assert %o12 == %w61
    assert %o13 == %w67
    assert %o14 == %w66
    assert %o15 == %w54
    assert %o16 == %w55
    assert %o17 == %w56
    assert %o18 == %w57
    assert %o19 == %w58
    assert %o20 == %w59
    assert %o1(BN) == 70 <Field>
Transition: -> 70

Block 32:
Func: main, Scope: 4
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i7(BP): field
    %i5(RP): field
    %i3(TS): field
    %i9: field
    %i10: u32
    %i11: field
    %i12: u32
    %i13: field
    %i15: u32
    %i18: u32
    %i28: field
    %i29: u32
    %i30: field
    %i31: u32
    %i32: field
    %i33: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: u32
    %o9: u32
    %o10: field
    %o11: u32
    %o12: field
    %o13: u32
    %o14: field
    %o15: u32
    %o16: u32
    %o17: field
    %o18: field
    %o19: u32
    %o20: field
    %o21: u32
    %o22: field
    %o23: field
Instructions:
    assert %i1(BN) == 32 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w200 = %i7(BP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w53 = %i9
    u32 %w65 = %i10
    field %w52 = %i11
    u32 %w64 = %i12
    field %w118 = %i13
    u32 %w62 = %i15
    u32 %w61 = %i18
    field %w54 = %i28
    u32 %w55 = %i29
    field %w56 = %i30
    u32 %w57 = %i31
    field %w58 = %i32
    field %w59 = %i33
    u32 %w229 = %PHY[%BP + 3]
    u32 %w60 = %PHY[%BP + 2]
    field %w68 = %PHY[%BP + 1]
    field %w4(SP) = %PHY[%BP + 0]
    field %w230 = %w200
    field %w63 = %w230
    %w229 = %w229 + 1 <U32>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w68
    assert %o8 == %w60
    assert %o9 == %w229
    assert %o10 == %w53
    assert %o11 == %w65
    assert %o12 == %w52
    assert %o13 == %w64
    assert %o14 == %w118
    assert %o15 == %w62
    assert %o16 == %w61
    assert %o17 == %w63
    assert %o18 == %w54
    assert %o19 == %w55
    assert %o20 == %w56
    assert %o21 == %w57
    assert %o22 == %w58
    assert %o23 == %w59
    assert %o1(BN) == %w229 != %w62 ? 31 <Field> : 33 <Field>
Transition:
    %w229 != %w62 ? -> 31 : -> 33

Block 33:
Func: main, Scope: 2
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: u32
    %i10: field
    %i11: u32
    %i12: field
    %i13: u32
    %i14: field
    %i15: u32
    %i16: u32
    %i17: field
    %i18: field
    %i19: u32
    %i20: field
    %i21: u32
    %i22: field
    %i23: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: u32
    %o9: u32
    %o10: field
    %o11: field
    %o12: u32
    %o13: field
    %o14: u32
    %o15: field
    %o16: u32
    %o17: u32
    %o18: field
    %o19: field
    %o20: u32
    %o21: field
    %o22: u32
    %o23: field
    %o24: field
Instructions:
    assert %i1(BN) == 33 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    u32 %w60 = %i8
    field %w53 = %i10
    u32 %w65 = %i11
    field %w52 = %i12
    u32 %w64 = %i13
    field %w118 = %i14
    u32 %w62 = %i15
    u32 %w61 = %i16
    field %w63 = %i17
    field %w54 = %i18
    u32 %w55 = %i19
    field %w56 = %i20
    u32 %w57 = %i21
    field %w58 = %i22
    field %w59 = %i23
    field %w117 = 0 <Field>
    u32 %w115 = 0 <U32>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w68
    assert %o8 == %w60
    assert %o9 == %w115
    assert %o10 == %w117
    assert %o11 == %w53
    assert %o12 == %w65
    assert %o13 == %w52
    assert %o14 == %w64
    assert %o15 == %w118
    assert %o16 == %w62
    assert %o17 == %w61
    assert %o18 == %w63
    assert %o19 == %w54
    assert %o20 == %w55
    assert %o21 == %w56
    assert %o22 == %w57
    assert %o23 == %w58
    assert %o24 == %w59
    assert %o1(BN) == %w115 != %w64 ? 34 <Field> : 36 <Field>
Transition:
    %w115 != %w64 ? -> 34 : -> 36

Block 34:
Func: main, Scope: 3
Exec Bound: 1, While Loop: true, Num VM Ops: 2
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: u32
    %i9: u32
    %i10: field
    %i11: field
    %i12: u32
    %i13: field
    %i14: u32
    %i15: field
    %i16: u32
    %i17: u32
    %i18: field
    %i19: field
    %i20: u32
    %i21: field
    %i22: u32
    %i23: field
    %i24: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: field
    %o9: u32
    %o10: u32
    %o11: field
    %o12: field
    %o13: u32
    %o14: field
    %o15: u32
    %o16: field
    %o17: u32
    %o18: u32
    %o19: u32
    %o20: field
    %o21: u32
    %o22: field
    %o23: field
    %o24: field
    %o25: field
    %o26: u32
    %o27: field
    %o28: u32
    %o29: field
    %o30: field
Instructions:
    assert %i1(BN) == 34 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    u32 %w60 = %i8
    u32 %w115 = %i9
    field %w117 = %i10
    field %w53 = %i11
    u32 %w65 = %i12
    field %w52 = %i13
    u32 %w64 = %i14
    field %w118 = %i15
    u32 %w62 = %i16
    u32 %w61 = %i17
    field %w63 = %i18
    field %w54 = %i19
    u32 %w55 = %i20
    field %w56 = %i21
    u32 %w57 = %i22
    field %w58 = %i23
    field %w59 = %i24
    field %w231 = %w52[%w115]
    field %w232 = %w231
    field %w233 = %w68[%w115]
    field %w112 = %w233
    field %w124 = %w232
    u32 %w120 = %w61
    field %w121 = %w118
    u32 %w122 = %w62
    field %w123 = 35 <Field>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w112
    assert %o8 == %w68
    assert %o9 == %w60
    assert %o10 == %w115
    assert %o11 == %w117
    assert %o12 == %w53
    assert %o13 == %w65
    assert %o14 == %w52
    assert %o15 == %w64
    assert %o16 == %w118
    assert %o17 == %w62
    assert %o18 == %w120
    assert %o19 == %w61
    assert %o20 == %w121
    assert %o21 == %w122
    assert %o22 == %w123
    assert %o23 == %w124
    assert %o24 == %w63
    assert %o25 == %w54
    assert %o26 == %w55
    assert %o27 == %w56
    assert %o28 == %w57
    assert %o29 == %w58
    assert %o30 == %w59
    assert %o1(BN) == 8 <Field>
Transition: -> 8

Block 35:
Func: main, Scope: 4
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i2(RET): field
    %i5(RP): field
    %i3(TS): field
    %i8: field
    %i11: field
    %i12: u32
    %i13: u32
    %i15: field
    %i16: field
    %i17: u32
    %i18: field
    %i19: u32
    %i20: field
    %i21: u32
    %i23: u32
    %i24: field
    %i25: field
    %i26: u32
    %i27: field
    %i28: u32
    %i29: field
    %i30: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: u32
    %o9: u32
    %o10: field
    %o11: field
    %o12: u32
    %o13: field
    %o14: u32
    %o15: field
    %o16: u32
    %o17: u32
    %o18: field
    %o19: field
    %o20: u32
    %o21: field
    %o22: u32
    %o23: field
    %o24: field
Instructions:
    assert %i1(BN) == 35 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w132 = %i2(RET)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w112 = %i8
    field %w68 = %i11
    u32 %w60 = %i12
    u32 %w115 = %i13
    field %w117 = %i15
    field %w53 = %i16
    u32 %w65 = %i17
    field %w52 = %i18
    u32 %w64 = %i19
    field %w118 = %i20
    u32 %w62 = %i21
    u32 %w61 = %i23
    field %w63 = %i24
    field %w54 = %i25
    u32 %w55 = %i26
    field %w56 = %i27
    u32 %w57 = %i28
    field %w58 = %i29
    field %w59 = %i30
    field %w234 = %w132
    %w117 = %w117 + %w234 * %w112
    %w115 = %w115 + 1 <U32>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w68
    assert %o8 == %w60
    assert %o9 == %w115
    assert %o10 == %w117
    assert %o11 == %w53
    assert %o12 == %w65
    assert %o13 == %w52
    assert %o14 == %w64
    assert %o15 == %w118
    assert %o16 == %w62
    assert %o17 == %w61
    assert %o18 == %w63
    assert %o19 == %w54
    assert %o20 == %w55
    assert %o21 == %w56
    assert %o22 == %w57
    assert %o23 == %w58
    assert %o24 == %w59
    assert %o1(BN) == %w115 != %w64 ? 34 <Field> : 36 <Field>
Transition:
    %w115 != %w64 ? -> 34 : -> 36

Block 36:
Func: main, Scope: 2
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: u32
    %i10: field
    %i11: field
    %i12: u32
    %i14: u32
    %i15: field
    %i16: u32
    %i17: u32
    %i18: field
    %i19: field
    %i20: u32
    %i21: field
    %i22: u32
    %i23: field
    %i24: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: u32
    %o9: u32
    %o10: field
    %o11: field
    %o12: u32
    %o13: u32
    %o14: field
    %o15: u32
    %o16: u32
    %o17: field
    %o18: field
    %o19: u32
    %o20: field
    %o21: u32
    %o22: field
    %o23: field
Instructions:
    assert %i1(BN) == 36 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    u32 %w60 = %i8
    field %w117 = %i10
    field %w53 = %i11
    u32 %w65 = %i12
    u32 %w64 = %i14
    field %w118 = %i15
    u32 %w62 = %i16
    u32 %w61 = %i17
    field %w63 = %i18
    field %w54 = %i19
    u32 %w55 = %i20
    field %w56 = %i21
    u32 %w57 = %i22
    field %w58 = %i23
    field %w59 = %i24
    u32 %w116 = 0 <U32>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w68
    assert %o8 == %w60
    assert %o9 == %w116
    assert %o10 == %w117
    assert %o11 == %w53
    assert %o12 == %w65
    assert %o13 == %w64
    assert %o14 == %w118
    assert %o15 == %w62
    assert %o16 == %w61
    assert %o17 == %w63
    assert %o18 == %w54
    assert %o19 == %w55
    assert %o20 == %w56
    assert %o21 == %w57
    assert %o22 == %w58
    assert %o23 == %w59
    assert %o1(BN) == %w116 != %w65 ? 37 <Field> : 40 <Field>
Transition:
    %w116 != %w65 ? -> 37 : -> 40

Block 37:
Func: main, Scope: 3
Exec Bound: 1, While Loop: true, Num VM Ops: 14
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: u32
    %i9: u32
    %i10: field
    %i11: field
    %i12: u32
    %i13: u32
    %i14: field
    %i15: u32
    %i16: u32
    %i17: field
    %i18: field
    %i19: u32
    %i20: field
    %i21: u32
    %i22: field
    %i23: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o31: field
    %o32: field
    %o8: field
    %o9: u32
    %o33: u32
    %o11: field
    %o12: field
    %o13: u32
    %o15: u32
    %o16: field
    %o17: u32
    %o34: field
    %o18: u32
    %o19: u32
    %o20: field
    %o21: u32
    %o22: field
    %o23: field
    %o24: field
    %o25: field
    %o26: u32
    %o27: field
    %o28: u32
    %o29: field
    %o30: field
Instructions:
    assert %i1(BN) == 37 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    u32 %w60 = %i8
    u32 %w116 = %i9
    field %w117 = %i10
    field %w53 = %i11
    u32 %w65 = %i12
    u32 %w64 = %i13
    field %w118 = %i14
    u32 %w62 = %i15
    u32 %w61 = %i16
    field %w63 = %i17
    field %w54 = %i18
    u32 %w55 = %i19
    field %w56 = %i20
    u32 %w57 = %i21
    field %w58 = %i22
    field %w59 = %i23
    field %w235 = %w68[%w64 + 2 <U32> * %w116]
    field %w114 = %w235
    field %w235 = %w68[%w64 + 2 <U32> * %w116 + 1 <U32>]
    field %w113 = %w235
    field[2 <U32>] %w236
    field %w237 = %w53[%w116]
    field %w238 = %w237[0 <Field>]
    field %w239 = %w238
    field %w240 = %w53[%w116]
    field %w241 = %w240[1 <Field>]
    field %w242 = %w241
    %w236[0 <Field>] = %w239 <field>, init
    %w236[1 <Field>] = %w242 <field>, init
    field %w243 = %w236
    field[2 <U32>] %w236
    field %w237 = %w53[%w116]
    field %w238 = %w237[2 <Field>]
    %w239 = %w238
    field %w240 = %w53[%w116]
    field %w241 = %w240[3 <Field>]
    %w242 = %w241
    %w236[0 <Field>] = %w239 <field>, init
    %w236[1 <Field>] = %w242 <field>, init
    field %w119 = %w236
    field %w124 = %w243
    u32 %w120 = %w61
    field %w121 = %w118
    u32 %w122 = %w62
    field %w123 = 38 <Field>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o31 == %w113
    assert %o32 == %w114
    assert %o8 == %w68
    assert %o9 == %w60
    assert %o33 == %w116
    assert %o11 == %w117
    assert %o12 == %w53
    assert %o13 == %w65
    assert %o15 == %w64
    assert %o16 == %w118
    assert %o17 == %w62
    assert %o34 == %w119
    assert %o18 == %w120
    assert %o19 == %w61
    assert %o20 == %w121
    assert %o21 == %w122
    assert %o22 == %w123
    assert %o23 == %w124
    assert %o24 == %w63
    assert %o25 == %w54
    assert %o26 == %w55
    assert %o27 == %w56
    assert %o28 == %w57
    assert %o29 == %w58
    assert %o30 == %w59
    assert %o1(BN) == 8 <Field>
Transition: -> 8

Block 38:
Func: main, Scope: 4
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i2(RET): field
    %i5(RP): field
    %i3(TS): field
    %i9: field
    %i10: field
    %i11: field
    %i12: u32
    %i14: u32
    %i15: field
    %i16: field
    %i17: u32
    %i19: u32
    %i20: field
    %i21: u32
    %i22: field
    %i23: u32
    %i24: field
    %i25: field
    %i26: u32
    %i27: field
    %i28: u32
    %i29: field
    %i30: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o31: field
    %o8: field
    %o9: u32
    %o33: u32
    %o11: field
    %o12: field
    %o13: u32
    %o15: u32
    %o16: field
    %o17: u32
    %o18: u32
    %o19: u32
    %o20: field
    %o21: u32
    %o22: field
    %o23: field
    %o24: field
    %o25: field
    %o26: u32
    %o27: field
    %o28: u32
    %o29: field
    %o30: field
Instructions:
    assert %i1(BN) == 38 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w132 = %i2(RET)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w113 = %i9
    field %w114 = %i10
    field %w68 = %i11
    u32 %w60 = %i12
    u32 %w116 = %i14
    field %w117 = %i15
    field %w53 = %i16
    u32 %w65 = %i17
    u32 %w64 = %i19
    field %w118 = %i20
    u32 %w62 = %i21
    field %w119 = %i22
    u32 %w61 = %i23
    field %w63 = %i24
    field %w54 = %i25
    u32 %w55 = %i26
    field %w56 = %i27
    u32 %w57 = %i28
    field %w58 = %i29
    field %w59 = %i30
    field %w244 = %w132
    %w117 = %w117 + %w244 * %w114
    field %w124 = %w119
    u32 %w120 = %w61
    field %w121 = %w118
    u32 %w122 = %w62
    field %w123 = 39 <Field>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o31 == %w113
    assert %o8 == %w68
    assert %o9 == %w60
    assert %o33 == %w116
    assert %o11 == %w117
    assert %o12 == %w53
    assert %o13 == %w65
    assert %o15 == %w64
    assert %o16 == %w118
    assert %o17 == %w62
    assert %o18 == %w120
    assert %o19 == %w61
    assert %o20 == %w121
    assert %o21 == %w122
    assert %o22 == %w123
    assert %o23 == %w124
    assert %o24 == %w63
    assert %o25 == %w54
    assert %o26 == %w55
    assert %o27 == %w56
    assert %o28 == %w57
    assert %o29 == %w58
    assert %o30 == %w59
    assert %o1(BN) == 8 <Field>
Transition: -> 8

Block 39:
Func: main, Scope: 4
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i2(RET): field
    %i5(RP): field
    %i3(TS): field
    %i9: field
    %i11: field
    %i12: u32
    %i14: u32
    %i15: field
    %i16: field
    %i17: u32
    %i19: u32
    %i20: field
    %i21: u32
    %i23: u32
    %i24: field
    %i25: field
    %i26: u32
    %i27: field
    %i28: u32
    %i29: field
    %i30: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: u32
    %o9: u32
    %o10: field
    %o11: field
    %o12: u32
    %o13: u32
    %o14: field
    %o15: u32
    %o16: u32
    %o17: field
    %o18: field
    %o19: u32
    %o20: field
    %o21: u32
    %o22: field
    %o23: field
Instructions:
    assert %i1(BN) == 39 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w132 = %i2(RET)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w113 = %i9
    field %w68 = %i11
    u32 %w60 = %i12
    u32 %w116 = %i14
    field %w117 = %i15
    field %w53 = %i16
    u32 %w65 = %i17
    u32 %w64 = %i19
    field %w118 = %i20
    u32 %w62 = %i21
    u32 %w61 = %i23
    field %w63 = %i24
    field %w54 = %i25
    u32 %w55 = %i26
    field %w56 = %i27
    u32 %w57 = %i28
    field %w58 = %i29
    field %w59 = %i30
    field %w244 = %w132
    %w117 = %w117 + %w244 * %w113
    %w116 = %w116 + 1 <U32>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w68
    assert %o8 == %w60
    assert %o9 == %w116
    assert %o10 == %w117
    assert %o11 == %w53
    assert %o12 == %w65
    assert %o13 == %w64
    assert %o14 == %w118
    assert %o15 == %w62
    assert %o16 == %w61
    assert %o17 == %w63
    assert %o18 == %w54
    assert %o19 == %w55
    assert %o20 == %w56
    assert %o21 == %w57
    assert %o22 == %w58
    assert %o23 == %w59
    assert %o1(BN) == %w116 != %w65 ? 37 <Field> : 40 <Field>
Transition:
    %w116 != %w65 ? -> 37 : -> 40

Block 40:
Func: main, Scope: 2
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: u32
    %i10: field
    %i13: u32
    %i14: field
    %i15: u32
    %i16: u32
    %i17: field
    %i18: field
    %i19: u32
    %i20: field
    %i21: u32
    %i22: field
    %i23: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: u32
    %o9: u32
    %o10: u32
    %o11: u32
    %o12: field
    %o13: field
    %o14: field
    %o15: field
    %o16: u32
    %o17: field
    %o18: u32
    %o19: field
    %o20: field
    %o21: u32
    %o22: field
    %o23: u32
    %o24: field
    %o25: field
Instructions:
    assert %i1(BN) == 40 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    u32 %w60 = %i8
    field %w117 = %i10
    u32 %w64 = %i13
    field %w118 = %i14
    u32 %w62 = %i15
    u32 %w61 = %i16
    field %w63 = %i17
    field %w54 = %i18
    u32 %w55 = %i19
    field %w56 = %i20
    u32 %w57 = %i21
    field %w58 = %i22
    field %w59 = %i23
    field[%w57] %w75
    field[%w55] %w72
    field[%w55] %w73
    field %w245 = %w118
    field %w246 = %w117
    field %w247 = %w246
    field %w248 = %w245
    u32 %w69 = 1 <U32>
    u32 %w78 = 0 <U32>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w68
    assert %o8 == %w69
    assert %o9 == %w60
    assert %o10 == %w64
    assert %o11 == %w62
    assert %o12 == %w72
    assert %o13 == %w73
    assert %o14 == %w247
    assert %o15 == %w248
    assert %o16 == %w61
    assert %o17 == %w75
    assert %o18 == %w78
    assert %o19 == %w63
    assert %o20 == %w54
    assert %o21 == %w55
    assert %o22 == %w56
    assert %o23 == %w57
    assert %o24 == %w58
    assert %o25 == %w59
    assert %o1(BN) == %w78 != %w60 - 1 <U32> ? 41 <Field> : 69 <Field>
Transition:
    %w78 != %w60 - 1 <U32> ? -> 41 : -> 69

Block 41:
Func: main, Scope: 3
Exec Bound: 1, While Loop: true, Num VM Ops: 1
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: u32
    %i9: u32
    %i10: u32
    %i11: u32
    %i12: field
    %i13: field
    %i14: field
    %i15: field
    %i16: u32
    %i17: field
    %i18: u32
    %i19: field
    %i20: field
    %i21: u32
    %i22: field
    %i23: u32
    %i24: field
    %i25: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: u32
    %o9: u32
    %o10: field
    %o11: u32
    %o12: u32
    %o13: u32
    %o14: u32
    %o15: field
    %o16: field
    %o17: u32
    %o18: field
    %o19: field
    %o20: field
    %o21: u32
    %o22: u32
    %o23: field
    %o24: field
    %o25: field
    %o26: u32
    %o27: field
    %o28: u32
    %o29: field
    %o30: field
Instructions:
    assert %i1(BN) == 41 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    u32 %w69 = %i8
    u32 %w60 = %i9
    u32 %w64 = %i10
    u32 %w62 = %i11
    field %w72 = %i12
    field %w73 = %i13
    field %w247 = %i14
    field %w248 = %i15
    u32 %w61 = %i16
    field %w75 = %i17
    u32 %w78 = %i18
    field %w63 = %i19
    field %w54 = %i20
    u32 %w55 = %i21
    field %w56 = %i22
    u32 %w57 = %i23
    field %w58 = %i24
    field %w59 = %i25
    field %w91 = %w248
    field %w249 = %w247
    u32 %w99 = %w78 + 1 <U32> * %w62
    field[0 <U32>] %w250
    field %w251 = %w59[%w78]
    field %w252 = %w251
    u32 %w253 = %w61 + 1 <U32>
    u32 %w254 = %w99
    field %w170 = %w249
    field %w176 = %w252
    u32 %w174 = %w253
    u32 %w175 = %w254
    field %w177 = %w63
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w68
    assert %o8 == %w174
    assert %o9 == %w175
    assert %o10 == %w170
    assert %o11 == %w69
    assert %o12 == %w60
    assert %o13 == %w64
    assert %o14 == %w62
    assert %o15 == %w72
    assert %o16 == %w73
    assert %o17 == %w61
    assert %o18 == %w91
    assert %o19 == %w75
    assert %o20 == %w176
    assert %o21 == %w78
    assert %o22 == %w99
    assert %o23 == %w63
    assert %o24 == %w177
    assert %o25 == %w54
    assert %o26 == %w55
    assert %o27 == %w56
    assert %o28 == %w57
    assert %o29 == %w58
    assert %o30 == %w59
    assert %o1(BN) == %w175 == 0 <U32> ? 19 <Field> : 20 <Field>
Transition:
    %w175 == 0 <U32> ? -> 19 : -> 20

Block 42:
Func: main, Scope: 4
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i7(BP): field
    %i8: field
    %i5(RP): field
    %i3(TS): field
    %i9: field
    %i10: u32
    %i11: u32
    %i12: u32
    %i13: u32
    %i14: field
    %i15: field
    %i16: u32
    %i17: field
    %i18: field
    %i19: u32
    %i20: u32
    %i21: field
    %i22: field
    %i23: u32
    %i24: field
    %i25: u32
    %i26: field
    %i27: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: u32
    %o9: field
    %o10: u32
    %o11: u32
    %o12: u32
    %o13: field
    %o14: field
    %o15: u32
    %o16: field
    %o17: field
    %o18: u32
    %o19: field
    %o20: u32
    %o21: u32
    %o22: field
    %o23: field
    %o24: field
    %o25: u32
    %o26: field
    %o27: u32
    %o28: field
    %o29: field
Instructions:
    assert %i1(BN) == 42 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w155 = %i7(BP)
    field %w156 = %i8
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i9
    u32 %w69 = %i10
    u32 %w60 = %i11
    u32 %w64 = %i12
    u32 %w62 = %i13
    field %w72 = %i14
    field %w73 = %i15
    u32 %w61 = %i16
    field %w91 = %i17
    field %w75 = %i18
    u32 %w78 = %i19
    u32 %w99 = %i20
    field %w63 = %i21
    field %w54 = %i22
    u32 %w55 = %i23
    field %w56 = %i24
    u32 %w57 = %i25
    field %w58 = %i26
    field %w59 = %i27
    field %w255 = %w155
    field %w256 = %w156
    field %w102 = %w255
    field %w257 = %w256
    field %w98 = %w257
    field %w89 = 0 <Field>
    u32 %w100 = 0 <U32>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w68
    assert %o8 == %w69
    assert %o9 == %w89
    assert %o10 == %w60
    assert %o11 == %w64
    assert %o12 == %w62
    assert %o13 == %w72
    assert %o14 == %w73
    assert %o15 == %w61
    assert %o16 == %w91
    assert %o17 == %w75
    assert %o18 == %w78
    assert %o19 == %w98
    assert %o20 == %w99
    assert %o21 == %w100
    assert %o22 == %w102
    assert %o23 == %w63
    assert %o24 == %w54
    assert %o25 == %w55
    assert %o26 == %w56
    assert %o27 == %w57
    assert %o28 == %w58
    assert %o29 == %w59
    assert %o1(BN) == %w100 != %w57 ? 43 <Field> : 49 <Field>
Transition:
    %w100 != %w57 ? -> 43 : -> 49

Block 43:
Func: main, Scope: 6
Exec Bound: 1, While Loop: true, Num VM Ops: 1
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: u32
    %i9: field
    %i10: u32
    %i11: u32
    %i12: u32
    %i13: field
    %i14: field
    %i15: u32
    %i16: field
    %i17: field
    %i18: u32
    %i19: field
    %i20: u32
    %i21: u32
    %i22: field
    %i23: field
    %i24: field
    %i25: u32
    %i26: field
    %i27: u32
    %i28: field
    %i29: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: u32
    %o9: field
    %o10: u32
    %o11: u32
    %o12: u32
    %o13: field
    %o14: field
    %o15: u32
    %o16: field
    %o17: field
    %o18: u32
    %o19: field
    %o20: u32
    %o21: u32
    %o22: field
    %o23: field
    %o24: field
    %o25: u32
    %o26: field
    %o27: u32
    %o28: field
    %o29: field
Instructions:
    assert %i1(BN) == 43 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    u32 %w69 = %i8
    field %w89 = %i9
    u32 %w60 = %i10
    u32 %w64 = %i11
    u32 %w62 = %i12
    field %w72 = %i13
    field %w73 = %i14
    u32 %w61 = %i15
    field %w91 = %i16
    field %w75 = %i17
    u32 %w78 = %i18
    field %w98 = %i19
    u32 %w99 = %i20
    u32 %w100 = %i21
    field %w102 = %i22
    field %w63 = %i23
    field %w54 = %i24
    u32 %w55 = %i25
    field %w56 = %i26
    u32 %w57 = %i27
    field %w58 = %i28
    field %w59 = %i29
    u32 %w258 = %w54[%w100]
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w68
    assert %o8 == %w69
    assert %o9 == %w89
    assert %o10 == %w60
    assert %o11 == %w64
    assert %o12 == %w62
    assert %o13 == %w72
    assert %o14 == %w73
    assert %o15 == %w61
    assert %o16 == %w91
    assert %o17 == %w75
    assert %o18 == %w78
    assert %o19 == %w98
    assert %o20 == %w99
    assert %o21 == %w100
    assert %o22 == %w102
    assert %o23 == %w63
    assert %o24 == %w54
    assert %o25 == %w55
    assert %o26 == %w56
    assert %o27 == %w57
    assert %o28 == %w58
    assert %o29 == %w59
    assert %o1(BN) == %w258 < %w78 ? 44 <Field> : 48 <Field>
Transition:
    %w258 < %w78 ? -> 44 : -> 48

Block 44:
Func: main, Scope: 8
Exec Bound: 1, While Loop: false, Num VM Ops: 1
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: u32
    %i9: field
    %i10: u32
    %i11: u32
    %i12: u32
    %i13: field
    %i14: field
    %i15: u32
    %i16: field
    %i17: field
    %i18: u32
    %i19: field
    %i20: u32
    %i21: u32
    %i22: field
    %i23: field
    %i24: field
    %i25: u32
    %i26: field
    %i27: u32
    %i28: field
    %i29: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: field
    %o9: u32
    %o10: field
    %o11: u32
    %o12: u32
    %o13: u32
    %o14: u32
    %o15: field
    %o16: field
    %o17: u32
    %o18: field
    %o19: field
    %o20: field
    %o21: u32
    %o22: field
    %o23: u32
    %o24: u32
    %o25: field
    %o26: field
    %o27: field
    %o28: u32
    %o29: field
    %o30: u32
    %o31: field
    %o32: field
Instructions:
    assert %i1(BN) == 44 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    u32 %w69 = %i8
    field %w89 = %i9
    u32 %w60 = %i10
    u32 %w64 = %i11
    u32 %w62 = %i12
    field %w72 = %i13
    field %w73 = %i14
    u32 %w61 = %i15
    field %w91 = %i16
    field %w75 = %i17
    u32 %w78 = %i18
    field %w98 = %i19
    u32 %w99 = %i20
    u32 %w100 = %i21
    field %w102 = %i22
    field %w63 = %i23
    field %w54 = %i24
    u32 %w55 = %i25
    field %w56 = %i26
    u32 %w57 = %i27
    field %w58 = %i28
    field %w59 = %i29
    field %w259 = %w68[%w100]
    field %w260 = %w259
    field %w94 = 1 <Field>
    u32 %w261 = 0 <U32>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w260
    assert %o8 == %w68
    assert %o9 == %w69
    assert %o10 == %w89
    assert %o11 == %w60
    assert %o12 == %w261
    assert %o13 == %w64
    assert %o14 == %w62
    assert %o15 == %w72
    assert %o16 == %w73
    assert %o17 == %w61
    assert %o18 == %w91
    assert %o19 == %w94
    assert %o20 == %w75
    assert %o21 == %w78
    assert %o22 == %w98
    assert %o23 == %w99
    assert %o24 == %w100
    assert %o25 == %w102
    assert %o26 == %w63
    assert %o27 == %w54
    assert %o28 == %w55
    assert %o29 == %w56
    assert %o30 == %w57
    assert %o31 == %w58
    assert %o32 == %w59
    assert %o1(BN) == %w261 != %w69 ? 45 <Field> : 46 <Field>
Transition:
    %w261 != %w69 ? -> 45 : -> 46

Block 45:
Func: main, Scope: 10
Exec Bound: 1, While Loop: true, Num VM Ops: 3
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: field
    %i9: u32
    %i10: field
    %i11: u32
    %i12: u32
    %i13: u32
    %i14: u32
    %i15: field
    %i16: field
    %i17: u32
    %i18: field
    %i19: field
    %i20: field
    %i21: u32
    %i22: field
    %i23: u32
    %i24: u32
    %i25: field
    %i26: field
    %i27: field
    %i28: u32
    %i29: field
    %i30: u32
    %i31: field
    %i32: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: field
    %o9: u32
    %o10: field
    %o11: u32
    %o12: u32
    %o13: u32
    %o14: u32
    %o15: field
    %o16: field
    %o17: u32
    %o18: field
    %o19: field
    %o20: field
    %o21: u32
    %o22: field
    %o23: u32
    %o24: u32
    %o25: field
    %o26: field
    %o27: field
    %o28: u32
    %o29: field
    %o30: u32
    %o31: field
    %o32: field
Instructions:
    assert %i1(BN) == 45 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w260 = %i7(BP)
    field %w68 = %i8
    u32 %w69 = %i9
    field %w89 = %i10
    u32 %w60 = %i11
    u32 %w261 = %i12
    u32 %w64 = %i13
    u32 %w62 = %i14
    field %w72 = %i15
    field %w73 = %i16
    u32 %w61 = %i17
    field %w91 = %i18
    field %w94 = %i19
    field %w75 = %i20
    u32 %w78 = %i21
    field %w98 = %i22
    u32 %w99 = %i23
    u32 %w100 = %i24
    field %w102 = %i25
    field %w63 = %i26
    field %w54 = %i27
    u32 %w55 = %i28
    field %w56 = %i29
    u32 %w57 = %i30
    field %w58 = %i31
    field %w59 = %i32
    field %w262 = %w58[%w100]
    field %w263 = %w262[%w78]
    field %w264 = %w263[%w261]
    %w94 = %w94 * %w264
    %w261 = %w261 + 1 <U32>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w260
    assert %o8 == %w68
    assert %o9 == %w69
    assert %o10 == %w89
    assert %o11 == %w60
    assert %o12 == %w261
    assert %o13 == %w64
    assert %o14 == %w62
    assert %o15 == %w72
    assert %o16 == %w73
    assert %o17 == %w61
    assert %o18 == %w91
    assert %o19 == %w94
    assert %o20 == %w75
    assert %o21 == %w78
    assert %o22 == %w98
    assert %o23 == %w99
    assert %o24 == %w100
    assert %o25 == %w102
    assert %o26 == %w63
    assert %o27 == %w54
    assert %o28 == %w55
    assert %o29 == %w56
    assert %o30 == %w57
    assert %o31 == %w58
    assert %o32 == %w59
    assert %o1(BN) == %w261 != %w69 ? 45 <Field> : 46 <Field>
Transition:
    %w261 != %w69 ? -> 45 : -> 46

Block 46:
Func: main, Scope: 9
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: field
    %i9: u32
    %i10: field
    %i11: u32
    %i13: u32
    %i14: u32
    %i15: field
    %i16: field
    %i17: u32
    %i18: field
    %i19: field
    %i20: field
    %i21: u32
    %i22: field
    %i23: u32
    %i24: u32
    %i25: field
    %i26: field
    %i27: field
    %i28: u32
    %i29: field
    %i30: u32
    %i31: field
    %i32: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): u32
    %o8: field
    %o9: u32
    %o10: u32
    %o11: u32
    %o12: u32
    %o13: field
    %o14: field
    %o15: u32
    %o16: field
    %o17: field
    %o18: field
    %o19: u32
    %o20: field
    %o21: field
    %o22: u32
    %o23: u32
    %o24: field
    %o25: field
    %o26: field
    %o27: u32
    %o28: field
    %o29: u32
    %o30: field
    %o31: field
    %o32: field
    %o33: field
Instructions:
    assert %i1(BN) == 46 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w260 = %i7(BP)
    field %w68 = %i8
    u32 %w69 = %i9
    field %w89 = %i10
    u32 %w60 = %i11
    u32 %w64 = %i13
    u32 %w62 = %i14
    field %w72 = %i15
    field %w73 = %i16
    u32 %w61 = %i17
    field %w91 = %i18
    field %w94 = %i19
    field %w75 = %i20
    u32 %w78 = %i21
    field %w98 = %i22
    u32 %w99 = %i23
    u32 %w100 = %i24
    field %w102 = %i25
    field %w63 = %i26
    field %w54 = %i27
    u32 %w55 = %i28
    field %w56 = %i29
    u32 %w57 = %i30
    field %w58 = %i31
    field %w59 = %i32
    u32 %w90 = %w99
    field %w103 = %w91
    field %w104 = %w98
    %PHY[%SP + 0] = %w4(SP) <field>
    %w4(SP) = %w3(RP)
    %PHY[%SP + 1] = %w260 <field>
    %PHY[%SP + 2] = %w68 <field>
    field %w97 = 47 <Field>
    %w3(RP) = %w3(RP) + 3 <Field>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w69
    assert %o8 == %w89
    assert %o9 == %w60
    assert %o10 == %w64
    assert %o11 == %w90
    assert %o12 == %w62
    assert %o13 == %w72
    assert %o14 == %w73
    assert %o15 == %w61
    assert %o16 == %w91
    assert %o17 == %w94
    assert %o18 == %w75
    assert %o19 == %w78
    assert %o20 == %w97
    assert %o21 == %w98
    assert %o22 == %w99
    assert %o23 == %w100
    assert %o24 == %w102
    assert %o25 == %w63
    assert %o26 == %w54
    assert %o27 == %w55
    assert %o28 == %w56
    assert %o29 == %w57
    assert %o30 == %w58
    assert %o31 == %w59
    assert %o32 == %w103
    assert %o33 == %w104
    assert %o1(BN) == 5 <Field>
Transition: -> 5

Block 47:
Func: main, Scope: 8
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i2(RET): field
    %i5(RP): field
    %i3(TS): field
    %i8: u32
    %i9: field
    %i10: u32
    %i11: u32
    %i12: u32
    %i13: field
    %i14: field
    %i15: u32
    %i16: field
    %i19: field
    %i20: field
    %i23: u32
    %i24: field
    %i25: u32
    %i26: u32
    %i28: field
    %i29: field
    %i30: field
    %i31: u32
    %i32: field
    %i33: u32
    %i34: field
    %i35: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: u32
    %o9: field
    %o10: u32
    %o11: u32
    %o12: u32
    %o13: field
    %o14: field
    %o15: u32
    %o16: field
    %o17: field
    %o18: u32
    %o19: field
    %o20: u32
    %o21: u32
    %o22: field
    %o23: field
    %o24: field
    %o25: u32
    %o26: field
    %o27: u32
    %o28: field
    %o29: field
Instructions:
    assert %i1(BN) == 47 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w111 = %i2(RET)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    u32 %w69 = %i8
    field %w89 = %i9
    u32 %w60 = %i10
    u32 %w64 = %i11
    u32 %w62 = %i12
    field %w72 = %i13
    field %w73 = %i14
    u32 %w61 = %i15
    field %w91 = %i16
    field %w94 = %i19
    field %w75 = %i20
    u32 %w78 = %i23
    field %w98 = %i24
    u32 %w99 = %i25
    u32 %w100 = %i26
    field %w102 = %i28
    field %w63 = %i29
    field %w54 = %i30
    u32 %w55 = %i31
    field %w56 = %i32
    u32 %w57 = %i33
    field %w58 = %i34
    field %w59 = %i35
    field %w68 = %PHY[%BP + 2]
    field %w260 = %PHY[%BP + 1]
    field %w4(SP) = %PHY[%BP + 0]
    field %w265 = %w111
    %w89 = %w89 + %w265 * %w260 * %w94
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w68
    assert %o8 == %w69
    assert %o9 == %w89
    assert %o10 == %w60
    assert %o11 == %w64
    assert %o12 == %w62
    assert %o13 == %w72
    assert %o14 == %w73
    assert %o15 == %w61
    assert %o16 == %w91
    assert %o17 == %w75
    assert %o18 == %w78
    assert %o19 == %w98
    assert %o20 == %w99
    assert %o21 == %w100
    assert %o22 == %w102
    assert %o23 == %w63
    assert %o24 == %w54
    assert %o25 == %w55
    assert %o26 == %w56
    assert %o27 == %w57
    assert %o28 == %w58
    assert %o29 == %w59
    assert %o1(BN) == 48 <Field>
Transition: -> 48

Block 48:
Func: main, Scope: 7
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: u32
    %i9: field
    %i10: u32
    %i11: u32
    %i12: u32
    %i13: field
    %i14: field
    %i15: u32
    %i16: field
    %i17: field
    %i18: u32
    %i19: field
    %i20: u32
    %i21: u32
    %i22: field
    %i23: field
    %i24: field
    %i25: u32
    %i26: field
    %i27: u32
    %i28: field
    %i29: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: u32
    %o9: field
    %o10: u32
    %o11: u32
    %o12: u32
    %o13: field
    %o14: field
    %o15: u32
    %o16: field
    %o17: field
    %o18: u32
    %o19: field
    %o20: u32
    %o21: u32
    %o22: field
    %o23: field
    %o24: field
    %o25: u32
    %o26: field
    %o27: u32
    %o28: field
    %o29: field
Instructions:
    assert %i1(BN) == 48 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    u32 %w69 = %i8
    field %w89 = %i9
    u32 %w60 = %i10
    u32 %w64 = %i11
    u32 %w62 = %i12
    field %w72 = %i13
    field %w73 = %i14
    u32 %w61 = %i15
    field %w91 = %i16
    field %w75 = %i17
    u32 %w78 = %i18
    field %w98 = %i19
    u32 %w99 = %i20
    u32 %w100 = %i21
    field %w102 = %i22
    field %w63 = %i23
    field %w54 = %i24
    u32 %w55 = %i25
    field %w56 = %i26
    u32 %w57 = %i27
    field %w58 = %i28
    field %w59 = %i29
    %w100 = %w100 + 1 <U32>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w68
    assert %o8 == %w69
    assert %o9 == %w89
    assert %o10 == %w60
    assert %o11 == %w64
    assert %o12 == %w62
    assert %o13 == %w72
    assert %o14 == %w73
    assert %o15 == %w61
    assert %o16 == %w91
    assert %o17 == %w75
    assert %o18 == %w78
    assert %o19 == %w98
    assert %o20 == %w99
    assert %o21 == %w100
    assert %o22 == %w102
    assert %o23 == %w63
    assert %o24 == %w54
    assert %o25 == %w55
    assert %o26 == %w56
    assert %o27 == %w57
    assert %o28 == %w58
    assert %o29 == %w59
    assert %o1(BN) == %w100 != %w57 ? 43 <Field> : 49 <Field>
Transition:
    %w100 != %w57 ? -> 43 : -> 49

Block 49:
Func: main, Scope: 5
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: u32
    %i9: field
    %i10: u32
    %i11: u32
    %i12: u32
    %i13: field
    %i14: field
    %i15: u32
    %i16: field
    %i17: field
    %i18: u32
    %i19: field
    %i20: u32
    %i22: field
    %i23: field
    %i24: field
    %i25: u32
    %i26: field
    %i27: u32
    %i28: field
    %i29: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: u32
    %o9: field
    %o10: u32
    %o11: u32
    %o12: u32
    %o13: field
    %o14: field
    %o15: u32
    %o16: field
    %o17: field
    %o18: u32
    %o19: field
    %o20: u32
    %o21: u32
    %o22: field
    %o23: field
    %o24: field
    %o25: u32
    %o26: field
    %o27: u32
    %o28: field
    %o29: field
Instructions:
    assert %i1(BN) == 49 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    u32 %w69 = %i8
    field %w89 = %i9
    u32 %w60 = %i10
    u32 %w64 = %i11
    u32 %w62 = %i12
    field %w72 = %i13
    field %w73 = %i14
    u32 %w61 = %i15
    field %w91 = %i16
    field %w75 = %i17
    u32 %w78 = %i18
    field %w98 = %i19
    u32 %w99 = %i20
    field %w102 = %i22
    field %w63 = %i23
    field %w54 = %i24
    u32 %w55 = %i25
    field %w56 = %i26
    u32 %w57 = %i27
    field %w58 = %i28
    field %w59 = %i29
    u32 %w101 = 0 <U32>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w68
    assert %o8 == %w69
    assert %o9 == %w89
    assert %o10 == %w60
    assert %o11 == %w64
    assert %o12 == %w62
    assert %o13 == %w72
    assert %o14 == %w73
    assert %o15 == %w61
    assert %o16 == %w91
    assert %o17 == %w75
    assert %o18 == %w78
    assert %o19 == %w98
    assert %o20 == %w99
    assert %o21 == %w101
    assert %o22 == %w102
    assert %o23 == %w63
    assert %o24 == %w54
    assert %o25 == %w55
    assert %o26 == %w56
    assert %o27 == %w57
    assert %o28 == %w58
    assert %o29 == %w59
    assert %o1(BN) == %w101 != %w55 ? 50 <Field> : 54 <Field>
Transition:
    %w101 != %w55 ? -> 50 : -> 54

Block 50:
Func: main, Scope: 6
Exec Bound: 1, While Loop: true, Num VM Ops: 1
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: u32
    %i9: field
    %i10: u32
    %i11: u32
    %i12: u32
    %i13: field
    %i14: field
    %i15: u32
    %i16: field
    %i17: field
    %i18: u32
    %i19: field
    %i20: u32
    %i21: u32
    %i22: field
    %i23: field
    %i24: field
    %i25: u32
    %i26: field
    %i27: u32
    %i28: field
    %i29: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: u32
    %o9: field
    %o10: u32
    %o11: u32
    %o12: u32
    %o13: field
    %o14: field
    %o15: u32
    %o16: field
    %o17: field
    %o18: u32
    %o19: field
    %o20: u32
    %o21: u32
    %o22: field
    %o23: field
    %o24: field
    %o25: u32
    %o26: field
    %o27: u32
    %o28: field
    %o29: field
Instructions:
    assert %i1(BN) == 50 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    u32 %w69 = %i8
    field %w89 = %i9
    u32 %w60 = %i10
    u32 %w64 = %i11
    u32 %w62 = %i12
    field %w72 = %i13
    field %w73 = %i14
    u32 %w61 = %i15
    field %w91 = %i16
    field %w75 = %i17
    u32 %w78 = %i18
    field %w98 = %i19
    u32 %w99 = %i20
    u32 %w101 = %i21
    field %w102 = %i22
    field %w63 = %i23
    field %w54 = %i24
    u32 %w55 = %i25
    field %w56 = %i26
    u32 %w57 = %i27
    field %w58 = %i28
    field %w59 = %i29
    u32 %w266 = %w54[%w101]
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w68
    assert %o8 == %w69
    assert %o9 == %w89
    assert %o10 == %w60
    assert %o11 == %w64
    assert %o12 == %w62
    assert %o13 == %w72
    assert %o14 == %w73
    assert %o15 == %w61
    assert %o16 == %w91
    assert %o17 == %w75
    assert %o18 == %w78
    assert %o19 == %w98
    assert %o20 == %w99
    assert %o21 == %w101
    assert %o22 == %w102
    assert %o23 == %w63
    assert %o24 == %w54
    assert %o25 == %w55
    assert %o26 == %w56
    assert %o27 == %w57
    assert %o28 == %w58
    assert %o29 == %w59
    assert %o1(BN) == %w266 < %w78 ? 51 <Field> : 53 <Field>
Transition:
    %w266 < %w78 ? -> 51 : -> 53

Block 51:
Func: main, Scope: 8
Exec Bound: 1, While Loop: false, Num VM Ops: 14
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: u32
    %i9: field
    %i10: u32
    %i11: u32
    %i12: u32
    %i13: field
    %i14: field
    %i15: u32
    %i16: field
    %i17: field
    %i18: u32
    %i19: field
    %i20: u32
    %i21: u32
    %i22: field
    %i23: field
    %i24: field
    %i25: u32
    %i26: field
    %i27: u32
    %i28: field
    %i29: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): u32
    %o8: field
    %o9: u32
    %o10: u32
    %o11: u32
    %o12: u32
    %o13: field
    %o14: field
    %o15: u32
    %o16: field
    %o34: field
    %o35: field
    %o18: field
    %o36: field
    %o37: field
    %o19: u32
    %o20: field
    %o21: field
    %o22: u32
    %o38: u32
    %o24: field
    %o25: field
    %o26: field
    %o27: u32
    %o28: field
    %o29: u32
    %o30: field
    %o31: field
    %o32: field
    %o33: field
Instructions:
    assert %i1(BN) == 51 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    u32 %w69 = %i8
    field %w89 = %i9
    u32 %w60 = %i10
    u32 %w64 = %i11
    u32 %w62 = %i12
    field %w72 = %i13
    field %w73 = %i14
    u32 %w61 = %i15
    field %w91 = %i16
    field %w75 = %i17
    u32 %w78 = %i18
    field %w98 = %i19
    u32 %w99 = %i20
    u32 %w101 = %i21
    field %w102 = %i22
    field %w63 = %i23
    field %w54 = %i24
    u32 %w55 = %i25
    field %w56 = %i26
    u32 %w57 = %i27
    field %w58 = %i28
    field %w59 = %i29
    field %w267 = %w68[%w64 + 2 <U32> * %w101]
    field %w268 = %w267
    field %w267 = %w68[%w64 + 2 <U32> * %w101 + 1 <U32>]
    field %w269 = %w267
    field %w270 = %w56[%w101]
    field %w271 = %w270[%w78]
    field %w272 = %w271[0 <Field>]
    field %w92 = %w272
    field %w270 = %w56[%w101]
    field %w271 = %w270[%w78]
    field %w272 = %w271[1 <Field>]
    field %w93 = %w272
    field %w270 = %w56[%w101]
    field %w271 = %w270[%w78]
    field %w272 = %w271[2 <Field>]
    field %w95 = %w272
    field %w270 = %w56[%w101]
    field %w271 = %w270[%w78]
    field %w272 = %w271[3 <Field>]
    field %w96 = %w272
    u32 %w90 = %w99
    field %w103 = %w91
    field %w104 = %w98
    %PHY[%SP + 0] = %w4(SP) <field>
    %w4(SP) = %w3(RP)
    %PHY[%SP + 1] = %w269 <field>
    %PHY[%SP + 2] = %w268 <field>
    %PHY[%SP + 3] = %w68 <field>
    field %w97 = 52 <Field>
    %w3(RP) = %w3(RP) + 4 <Field>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w69
    assert %o8 == %w89
    assert %o9 == %w60
    assert %o10 == %w64
    assert %o11 == %w90
    assert %o12 == %w62
    assert %o13 == %w72
    assert %o14 == %w73
    assert %o15 == %w61
    assert %o16 == %w91
    assert %o34 == %w92
    assert %o35 == %w93
    assert %o18 == %w75
    assert %o36 == %w95
    assert %o37 == %w96
    assert %o19 == %w78
    assert %o20 == %w97
    assert %o21 == %w98
    assert %o22 == %w99
    assert %o38 == %w101
    assert %o24 == %w102
    assert %o25 == %w63
    assert %o26 == %w54
    assert %o27 == %w55
    assert %o28 == %w56
    assert %o29 == %w57
    assert %o30 == %w58
    assert %o31 == %w59
    assert %o32 == %w103
    assert %o33 == %w104
    assert %o1(BN) == 5 <Field>
Transition: -> 5

Block 52:
Func: main, Scope: 8
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i2(RET): field
    %i5(RP): field
    %i3(TS): field
    %i8: u32
    %i9: field
    %i10: u32
    %i11: u32
    %i12: u32
    %i13: field
    %i14: field
    %i15: u32
    %i16: field
    %i17: field
    %i18: field
    %i20: field
    %i21: field
    %i22: field
    %i23: u32
    %i24: field
    %i25: u32
    %i27: u32
    %i28: field
    %i29: field
    %i30: field
    %i31: u32
    %i32: field
    %i33: u32
    %i34: field
    %i35: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: u32
    %o9: field
    %o10: u32
    %o11: u32
    %o12: u32
    %o13: field
    %o14: field
    %o15: u32
    %o16: field
    %o17: field
    %o18: u32
    %o19: field
    %o20: u32
    %o21: u32
    %o22: field
    %o23: field
    %o24: field
    %o25: u32
    %o26: field
    %o27: u32
    %o28: field
    %o29: field
Instructions:
    assert %i1(BN) == 52 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w111 = %i2(RET)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    u32 %w69 = %i8
    field %w89 = %i9
    u32 %w60 = %i10
    u32 %w64 = %i11
    u32 %w62 = %i12
    field %w72 = %i13
    field %w73 = %i14
    u32 %w61 = %i15
    field %w91 = %i16
    field %w92 = %i17
    field %w93 = %i18
    field %w75 = %i20
    field %w95 = %i21
    field %w96 = %i22
    u32 %w78 = %i23
    field %w98 = %i24
    u32 %w99 = %i25
    u32 %w101 = %i27
    field %w102 = %i28
    field %w63 = %i29
    field %w54 = %i30
    u32 %w55 = %i31
    field %w56 = %i32
    u32 %w57 = %i33
    field %w58 = %i34
    field %w59 = %i35
    field %w68 = %PHY[%BP + 3]
    field %w268 = %PHY[%BP + 2]
    field %w269 = %PHY[%BP + 1]
    field %w4(SP) = %PHY[%BP + 0]
    field %w273 = %w111
    %w89 = %w89 + %w273 * %w268 * %w92 * %w96 + %w93 * %w95 + %w269 * %w95 * %w96
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w68
    assert %o8 == %w69
    assert %o9 == %w89
    assert %o10 == %w60
    assert %o11 == %w64
    assert %o12 == %w62
    assert %o13 == %w72
    assert %o14 == %w73
    assert %o15 == %w61
    assert %o16 == %w91
    assert %o17 == %w75
    assert %o18 == %w78
    assert %o19 == %w98
    assert %o20 == %w99
    assert %o21 == %w101
    assert %o22 == %w102
    assert %o23 == %w63
    assert %o24 == %w54
    assert %o25 == %w55
    assert %o26 == %w56
    assert %o27 == %w57
    assert %o28 == %w58
    assert %o29 == %w59
    assert %o1(BN) == 53 <Field>
Transition: -> 53

Block 53:
Func: main, Scope: 7
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: u32
    %i9: field
    %i10: u32
    %i11: u32
    %i12: u32
    %i13: field
    %i14: field
    %i15: u32
    %i16: field
    %i17: field
    %i18: u32
    %i19: field
    %i20: u32
    %i21: u32
    %i22: field
    %i23: field
    %i24: field
    %i25: u32
    %i26: field
    %i27: u32
    %i28: field
    %i29: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: u32
    %o9: field
    %o10: u32
    %o11: u32
    %o12: u32
    %o13: field
    %o14: field
    %o15: u32
    %o16: field
    %o17: field
    %o18: u32
    %o19: field
    %o20: u32
    %o21: u32
    %o22: field
    %o23: field
    %o24: field
    %o25: u32
    %o26: field
    %o27: u32
    %o28: field
    %o29: field
Instructions:
    assert %i1(BN) == 53 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    u32 %w69 = %i8
    field %w89 = %i9
    u32 %w60 = %i10
    u32 %w64 = %i11
    u32 %w62 = %i12
    field %w72 = %i13
    field %w73 = %i14
    u32 %w61 = %i15
    field %w91 = %i16
    field %w75 = %i17
    u32 %w78 = %i18
    field %w98 = %i19
    u32 %w99 = %i20
    u32 %w101 = %i21
    field %w102 = %i22
    field %w63 = %i23
    field %w54 = %i24
    u32 %w55 = %i25
    field %w56 = %i26
    u32 %w57 = %i27
    field %w58 = %i28
    field %w59 = %i29
    %w101 = %w101 + 1 <U32>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w68
    assert %o8 == %w69
    assert %o9 == %w89
    assert %o10 == %w60
    assert %o11 == %w64
    assert %o12 == %w62
    assert %o13 == %w72
    assert %o14 == %w73
    assert %o15 == %w61
    assert %o16 == %w91
    assert %o17 == %w75
    assert %o18 == %w78
    assert %o19 == %w98
    assert %o20 == %w99
    assert %o21 == %w101
    assert %o22 == %w102
    assert %o23 == %w63
    assert %o24 == %w54
    assert %o25 == %w55
    assert %o26 == %w56
    assert %o27 == %w57
    assert %o28 == %w58
    assert %o29 == %w59
    assert %o1(BN) == %w101 != %w55 ? 50 <Field> : 54 <Field>
Transition:
    %w101 != %w55 ? -> 50 : -> 54

Block 54:
Func: main, Scope: 5
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: u32
    %i9: field
    %i10: u32
    %i11: u32
    %i12: u32
    %i13: field
    %i14: field
    %i15: u32
    %i17: field
    %i18: u32
    %i19: field
    %i20: u32
    %i22: field
    %i23: field
    %i24: field
    %i25: u32
    %i26: field
    %i27: u32
    %i28: field
    %i29: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: u32
    %o9: u32
    %o10: u32
    %o11: u32
    %o12: u32
    %o13: field
    %o14: field
    %o15: u32
    %o16: field
    %o17: field
    %o18: u32
    %o19: field
    %o20: u32
    %o21: field
    %o22: field
    %o23: field
    %o24: u32
    %o25: field
    %o26: u32
    %o27: field
    %o28: field
Instructions:
    assert %i1(BN) == 54 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    u32 %w69 = %i8
    field %w89 = %i9
    u32 %w60 = %i10
    u32 %w64 = %i11
    u32 %w62 = %i12
    field %w72 = %i13
    field %w73 = %i14
    u32 %w61 = %i15
    field %w75 = %i17
    u32 %w78 = %i18
    field %w98 = %i19
    u32 %w99 = %i20
    field %w102 = %i22
    field %w63 = %i23
    field %w54 = %i24
    u32 %w55 = %i25
    field %w56 = %i26
    u32 %w57 = %i27
    field %w58 = %i28
    field %w59 = %i29
    assert %w89 == %w102
    field[%w62] %w274
    field[%w99 + %w62] %w79
    u32 %w275 = 0 <U32>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w68
    assert %o8 == %w69
    assert %o9 == %w60
    assert %o10 == %w275
    assert %o11 == %w64
    assert %o12 == %w62
    assert %o13 == %w72
    assert %o14 == %w73
    assert %o15 == %w61
    assert %o16 == %w75
    assert %o17 == %w274
    assert %o18 == %w78
    assert %o19 == %w98
    assert %o20 == %w99
    assert %o21 == %w79
    assert %o22 == %w63
    assert %o23 == %w54
    assert %o24 == %w55
    assert %o25 == %w56
    assert %o26 == %w57
    assert %o27 == %w58
    assert %o28 == %w59
    assert %o1(BN) == %w275 != %w99 ? 55 <Field> : 56 <Field>
Transition:
    %w275 != %w99 ? -> 55 : -> 56

Block 55:
Func: main, Scope: 6
Exec Bound: 1, While Loop: true, Num VM Ops: 2
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: u32
    %i9: u32
    %i10: u32
    %i11: u32
    %i12: u32
    %i13: field
    %i14: field
    %i15: u32
    %i16: field
    %i17: field
    %i18: u32
    %i19: field
    %i20: u32
    %i21: field
    %i22: field
    %i23: field
    %i24: u32
    %i25: field
    %i26: u32
    %i27: field
    %i28: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: u32
    %o9: u32
    %o10: u32
    %o11: u32
    %o12: u32
    %o13: field
    %o14: field
    %o15: u32
    %o16: field
    %o17: field
    %o18: u32
    %o19: field
    %o20: u32
    %o21: field
    %o22: field
    %o23: field
    %o24: u32
    %o25: field
    %o26: u32
    %o27: field
    %o28: field
Instructions:
    assert %i1(BN) == 55 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    u32 %w69 = %i8
    u32 %w60 = %i9
    u32 %w275 = %i10
    u32 %w64 = %i11
    u32 %w62 = %i12
    field %w72 = %i13
    field %w73 = %i14
    u32 %w61 = %i15
    field %w75 = %i16
    field %w274 = %i17
    u32 %w78 = %i18
    field %w98 = %i19
    u32 %w99 = %i20
    field %w79 = %i21
    field %w63 = %i22
    field %w54 = %i23
    u32 %w55 = %i24
    field %w56 = %i25
    u32 %w57 = %i26
    field %w58 = %i27
    field %w59 = %i28
    field %w276 = %w98[%w275]
    %w79[%w275] = %w276 <field>
    %w275 = %w275 + 1 <U32>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w68
    assert %o8 == %w69
    assert %o9 == %w60
    assert %o10 == %w275
    assert %o11 == %w64
    assert %o12 == %w62
    assert %o13 == %w72
    assert %o14 == %w73
    assert %o15 == %w61
    assert %o16 == %w75
    assert %o17 == %w274
    assert %o18 == %w78
    assert %o19 == %w98
    assert %o20 == %w99
    assert %o21 == %w79
    assert %o22 == %w63
    assert %o23 == %w54
    assert %o24 == %w55
    assert %o25 == %w56
    assert %o26 == %w57
    assert %o27 == %w58
    assert %o28 == %w59
    assert %o1(BN) == %w275 != %w99 ? 55 <Field> : 56 <Field>
Transition:
    %w275 != %w99 ? -> 55 : -> 56

Block 56:
Func: main, Scope: 5
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: u32
    %i9: u32
    %i11: u32
    %i12: u32
    %i13: field
    %i14: field
    %i15: u32
    %i16: field
    %i17: field
    %i18: u32
    %i20: u32
    %i21: field
    %i22: field
    %i23: field
    %i24: u32
    %i25: field
    %i26: u32
    %i27: field
    %i28: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: u32
    %o9: u32
    %o10: u32
    %o11: u32
    %o12: u32
    %o13: field
    %o14: field
    %o15: u32
    %o16: field
    %o17: field
    %o18: u32
    %o19: u32
    %o20: field
    %o21: field
    %o22: field
    %o23: u32
    %o24: field
    %o25: u32
    %o26: field
    %o27: field
Instructions:
    assert %i1(BN) == 56 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    u32 %w69 = %i8
    u32 %w60 = %i9
    u32 %w64 = %i11
    u32 %w62 = %i12
    field %w72 = %i13
    field %w73 = %i14
    u32 %w61 = %i15
    field %w75 = %i16
    field %w274 = %i17
    u32 %w78 = %i18
    u32 %w99 = %i20
    field %w79 = %i21
    field %w63 = %i22
    field %w54 = %i23
    u32 %w55 = %i24
    field %w56 = %i25
    u32 %w57 = %i26
    field %w58 = %i27
    field %w59 = %i28
    u32 %w277 = 0 <U32>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w68
    assert %o8 == %w69
    assert %o9 == %w60
    assert %o10 == %w277
    assert %o11 == %w64
    assert %o12 == %w62
    assert %o13 == %w72
    assert %o14 == %w73
    assert %o15 == %w61
    assert %o16 == %w75
    assert %o17 == %w274
    assert %o18 == %w78
    assert %o19 == %w99
    assert %o20 == %w79
    assert %o21 == %w63
    assert %o22 == %w54
    assert %o23 == %w55
    assert %o24 == %w56
    assert %o25 == %w57
    assert %o26 == %w58
    assert %o27 == %w59
    assert %o1(BN) == %w277 != %w62 ? 57 <Field> : 59 <Field>
Transition:
    %w277 != %w62 ? -> 57 : -> 59

Block 57:
Func: main, Scope: 6
Exec Bound: 1, While Loop: true, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: u32
    %i9: u32
    %i10: u32
    %i11: u32
    %i12: u32
    %i13: field
    %i14: field
    %i15: u32
    %i16: field
    %i17: field
    %i18: u32
    %i19: u32
    %i20: field
    %i21: field
    %i22: field
    %i23: u32
    %i24: field
    %i25: u32
    %i26: field
    %i27: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o10: u32
    %o11: u32
    %o24: field
    %o25: field
    %o12: u32
    %o27: field
    %o30: field
    %o31: u32
    %o13: field
    %o32: u32
    %o33: field
    %o14: field
    %o15: field
    %o16: u32
    %o17: field
    %o18: u32
    %o19: field
    %o20: field
Instructions:
    assert %i1(BN) == 57 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    u32 %w69 = %i8
    u32 %w60 = %i9
    u32 %w277 = %i10
    u32 %w64 = %i11
    u32 %w62 = %i12
    field %w72 = %i13
    field %w73 = %i14
    u32 %w61 = %i15
    field %w75 = %i16
    field %w274 = %i17
    u32 %w78 = %i18
    u32 %w99 = %i19
    field %w79 = %i20
    field %w63 = %i21
    field %w54 = %i22
    u32 %w55 = %i23
    field %w56 = %i24
    u32 %w57 = %i25
    field %w58 = %i26
    field %w59 = %i27
    field %w66 = %w63
    %PHY[%SP + 0] = %w4(SP) <field>
    %w4(SP) = %w3(RP)
    %PHY[%SP + 1] = %w68 <field>
    %PHY[%SP + 2] = %w69 <u32>
    %PHY[%SP + 3] = %w60 <u32>
    %PHY[%SP + 4] = %w277 <u32>
    field %w67 = 58 <Field>
    %w3(RP) = %w3(RP) + 5 <Field>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o10 == %w64
    assert %o11 == %w62
    assert %o24 == %w72
    assert %o25 == %w73
    assert %o12 == %w61
    assert %o27 == %w75
    assert %o30 == %w274
    assert %o31 == %w78
    assert %o13 == %w67
    assert %o32 == %w99
    assert %o33 == %w79
    assert %o14 == %w66
    assert %o15 == %w54
    assert %o16 == %w55
    assert %o17 == %w56
    assert %o18 == %w57
    assert %o19 == %w58
    assert %o20 == %w59
    assert %o1(BN) == 70 <Field>
Transition: -> 70

Block 58:
Func: main, Scope: 7
Exec Bound: 1, While Loop: false, Num VM Ops: 2
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i7(BP): field
    %i5(RP): field
    %i3(TS): field
    %i12: u32
    %i15: u32
    %i16: field
    %i17: field
    %i18: u32
    %i20: field
    %i23: field
    %i24: u32
    %i25: u32
    %i26: field
    %i28: field
    %i29: u32
    %i30: field
    %i31: u32
    %i32: field
    %i33: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: u32
    %o9: u32
    %o10: u32
    %o11: u32
    %o12: u32
    %o13: field
    %o14: field
    %o15: u32
    %o16: field
    %o17: field
    %o18: u32
    %o19: u32
    %o20: field
    %o21: field
    %o22: field
    %o23: u32
    %o24: field
    %o25: u32
    %o26: field
    %o27: field
Instructions:
    assert %i1(BN) == 58 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w200 = %i7(BP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    u32 %w64 = %i12
    u32 %w62 = %i15
    field %w72 = %i16
    field %w73 = %i17
    u32 %w61 = %i18
    field %w75 = %i20
    field %w274 = %i23
    u32 %w78 = %i24
    u32 %w99 = %i25
    field %w79 = %i26
    field %w54 = %i28
    u32 %w55 = %i29
    field %w56 = %i30
    u32 %w57 = %i31
    field %w58 = %i32
    field %w59 = %i33
    u32 %w277 = %PHY[%BP + 4]
    u32 %w60 = %PHY[%BP + 3]
    u32 %w69 = %PHY[%BP + 2]
    field %w68 = %PHY[%BP + 1]
    field %w4(SP) = %PHY[%BP + 0]
    field %w278 = %w200
    field %w63 = %w278
    %w274[%w277] = %w63 <field>
    %w79[%w99 + %w277] = %w63 <field>
    %w277 = %w277 + 1 <U32>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w68
    assert %o8 == %w69
    assert %o9 == %w60
    assert %o10 == %w277
    assert %o11 == %w64
    assert %o12 == %w62
    assert %o13 == %w72
    assert %o14 == %w73
    assert %o15 == %w61
    assert %o16 == %w75
    assert %o17 == %w274
    assert %o18 == %w78
    assert %o19 == %w99
    assert %o20 == %w79
    assert %o21 == %w63
    assert %o22 == %w54
    assert %o23 == %w55
    assert %o24 == %w56
    assert %o25 == %w57
    assert %o26 == %w58
    assert %o27 == %w59
    assert %o1(BN) == %w277 != %w62 ? 57 <Field> : 59 <Field>
Transition:
    %w277 != %w62 ? -> 57 : -> 59

Block 59:
Func: main, Scope: 5
Exec Bound: 1, While Loop: false, Num VM Ops: 1
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: u32
    %i9: u32
    %i11: u32
    %i12: u32
    %i13: field
    %i14: field
    %i15: u32
    %i16: field
    %i17: field
    %i18: u32
    %i20: field
    %i21: field
    %i22: field
    %i23: u32
    %i24: field
    %i25: u32
    %i26: field
    %i27: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: u32
    %o9: field
    %o10: u32
    %o11: u32
    %o12: u32
    %o13: u32
    %o14: field
    %o15: field
    %o16: u32
    %o17: u32
    %o18: field
    %o19: field
    %o20: u32
    %o21: u32
    %o22: field
    %o23: field
    %o24: field
    %o25: u32
    %o26: field
    %o27: u32
    %o28: field
    %o29: field
Instructions:
    assert %i1(BN) == 59 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    u32 %w69 = %i8
    u32 %w60 = %i9
    u32 %w64 = %i11
    u32 %w62 = %i12
    field %w72 = %i13
    field %w73 = %i14
    u32 %w61 = %i15
    field %w75 = %i16
    field %w274 = %i17
    u32 %w78 = %i18
    field %w79 = %i20
    field %w63 = %i21
    field %w54 = %i22
    u32 %w55 = %i23
    field %w56 = %i24
    u32 %w57 = %i25
    field %w58 = %i26
    field %w59 = %i27
    u32 %w77 = %w62
    u32 %w279 = %w61
    field %w76 = %w274
    field[%w279] %w70
    %w70[0 <Field>] = 1 <Field> <field>
    u32 %w74 = 1 <U32>
    u32 %w71 = 0 <U32>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w68
    assert %o8 == %w69
    assert %o9 == %w70
    assert %o10 == %w60
    assert %o11 == %w71
    assert %o12 == %w64
    assert %o13 == %w62
    assert %o14 == %w72
    assert %o15 == %w73
    assert %o16 == %w74
    assert %o17 == %w61
    assert %o18 == %w75
    assert %o19 == %w76
    assert %o20 == %w77
    assert %o21 == %w78
    assert %o22 == %w79
    assert %o23 == %w63
    assert %o24 == %w54
    assert %o25 == %w55
    assert %o26 == %w56
    assert %o27 == %w57
    assert %o28 == %w58
    assert %o29 == %w59
    assert %o1(BN) == %w71 != %w77 ? 1 <Field> : 4 <Field>
Transition:
    %w71 != %w77 ? -> 1 : -> 4

Block 60:
Func: main, Scope: 6
Exec Bound: 1, While Loop: true, Num VM Ops: 1
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: field
    %i9: u32
    %i10: u32
    %i11: u32
    %i12: u32
    %i13: field
    %i14: field
    %i15: u32
    %i16: field
    %i17: field
    %i18: u32
    %i19: field
    %i20: u32
    %i21: field
    %i22: field
    %i23: u32
    %i24: field
    %i25: u32
    %i26: field
    %i27: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: field
    %o9: u32
    %o10: u32
    %o11: u32
    %o12: u32
    %o13: field
    %o14: field
    %o15: u32
    %o16: field
    %o17: field
    %o18: u32
    %o19: field
    %o20: u32
    %o21: field
    %o22: field
    %o23: u32
    %o24: field
    %o25: u32
    %o26: field
    %o27: field
Instructions:
    assert %i1(BN) == 60 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    field %w86 = %i8
    u32 %w69 = %i9
    u32 %w60 = %i10
    u32 %w64 = %i11
    u32 %w62 = %i12
    field %w72 = %i13
    field %w73 = %i14
    u32 %w61 = %i15
    field %w87 = %i16
    field %w75 = %i17
    u32 %w78 = %i18
    field %w79 = %i19
    u32 %w88 = %i20
    field %w63 = %i21
    field %w54 = %i22
    u32 %w55 = %i23
    field %w56 = %i24
    u32 %w57 = %i25
    field %w58 = %i26
    field %w59 = %i27
    u32 %w280 = %w54[%w88]
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w68
    assert %o8 == %w86
    assert %o9 == %w69
    assert %o10 == %w60
    assert %o11 == %w64
    assert %o12 == %w62
    assert %o13 == %w72
    assert %o14 == %w73
    assert %o15 == %w61
    assert %o16 == %w87
    assert %o17 == %w75
    assert %o18 == %w78
    assert %o19 == %w79
    assert %o20 == %w88
    assert %o21 == %w63
    assert %o22 == %w54
    assert %o23 == %w55
    assert %o24 == %w56
    assert %o25 == %w57
    assert %o26 == %w58
    assert %o27 == %w59
    assert %o1(BN) == %w280 < %w78 ? 61 <Field> : 64 <Field>
Transition:
    %w280 < %w78 ? -> 61 : -> 64

Block 61:
Func: main, Scope: 8
Exec Bound: 1, While Loop: false, Num VM Ops: 1
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: field
    %i9: u32
    %i10: u32
    %i11: u32
    %i12: u32
    %i13: field
    %i14: field
    %i15: u32
    %i16: field
    %i17: field
    %i18: u32
    %i19: field
    %i20: u32
    %i21: field
    %i22: field
    %i23: u32
    %i24: field
    %i25: u32
    %i26: field
    %i27: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: field
    %o9: field
    %o10: u32
    %o11: field
    %o12: u32
    %o13: u32
    %o14: u32
    %o15: u32
    %o16: field
    %o17: field
    %o18: u32
    %o19: field
    %o20: field
    %o21: u32
    %o22: field
    %o23: u32
    %o24: field
    %o25: field
    %o26: u32
    %o27: field
    %o28: u32
    %o29: field
    %o30: field
Instructions:
    assert %i1(BN) == 61 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    field %w86 = %i8
    u32 %w69 = %i9
    u32 %w60 = %i10
    u32 %w64 = %i11
    u32 %w62 = %i12
    field %w72 = %i13
    field %w73 = %i14
    u32 %w61 = %i15
    field %w87 = %i16
    field %w75 = %i17
    u32 %w78 = %i18
    field %w79 = %i19
    u32 %w88 = %i20
    field %w63 = %i21
    field %w54 = %i22
    u32 %w55 = %i23
    field %w56 = %i24
    u32 %w57 = %i25
    field %w58 = %i26
    field %w59 = %i27
    field %w281 = %w68[%w88]
    field %w282 = %w281
    field %w283 = 0 <Field>
    u32 %w284 = 0 <U32>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w282
    assert %o8 == %w68
    assert %o9 == %w86
    assert %o10 == %w69
    assert %o11 == %w283
    assert %o12 == %w60
    assert %o13 == %w284
    assert %o14 == %w64
    assert %o15 == %w62
    assert %o16 == %w72
    assert %o17 == %w73
    assert %o18 == %w61
    assert %o19 == %w87
    assert %o20 == %w75
    assert %o21 == %w78
    assert %o22 == %w79
    assert %o23 == %w88
    assert %o24 == %w63
    assert %o25 == %w54
    assert %o26 == %w55
    assert %o27 == %w56
    assert %o28 == %w57
    assert %o29 == %w58
    assert %o30 == %w59
    assert %o1(BN) == %w284 != %w69 ? 62 <Field> : 63 <Field>
Transition:
    %w284 != %w69 ? -> 62 : -> 63

Block 62:
Func: main, Scope: 10
Exec Bound: 1, While Loop: true, Num VM Ops: 4
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: field
    %i9: field
    %i10: u32
    %i11: field
    %i12: u32
    %i13: u32
    %i14: u32
    %i15: u32
    %i16: field
    %i17: field
    %i18: u32
    %i19: field
    %i20: field
    %i21: u32
    %i22: field
    %i23: u32
    %i24: field
    %i25: field
    %i26: u32
    %i27: field
    %i28: u32
    %i29: field
    %i30: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: field
    %o9: field
    %o10: u32
    %o11: field
    %o12: u32
    %o13: u32
    %o14: u32
    %o15: u32
    %o16: field
    %o17: field
    %o18: u32
    %o19: field
    %o20: field
    %o21: u32
    %o22: field
    %o23: u32
    %o24: field
    %o25: field
    %o26: u32
    %o27: field
    %o28: u32
    %o29: field
    %o30: field
Instructions:
    assert %i1(BN) == 62 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w282 = %i7(BP)
    field %w68 = %i8
    field %w86 = %i9
    u32 %w69 = %i10
    field %w283 = %i11
    u32 %w60 = %i12
    u32 %w284 = %i13
    u32 %w64 = %i14
    u32 %w62 = %i15
    field %w72 = %i16
    field %w73 = %i17
    u32 %w61 = %i18
    field %w87 = %i19
    field %w75 = %i20
    u32 %w78 = %i21
    field %w79 = %i22
    u32 %w88 = %i23
    field %w63 = %i24
    field %w54 = %i25
    u32 %w55 = %i26
    field %w56 = %i27
    u32 %w57 = %i28
    field %w58 = %i29
    field %w59 = %i30
    field %w285 = %w58[%w88]
    field %w286 = %w285[%w78]
    field %w287 = %w286[%w284]
    field %w288 = %w86[%w284]
    %w283 = %w283 + %w287 * %w288
    %w284 = %w284 + 1 <U32>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w282
    assert %o8 == %w68
    assert %o9 == %w86
    assert %o10 == %w69
    assert %o11 == %w283
    assert %o12 == %w60
    assert %o13 == %w284
    assert %o14 == %w64
    assert %o15 == %w62
    assert %o16 == %w72
    assert %o17 == %w73
    assert %o18 == %w61
    assert %o19 == %w87
    assert %o20 == %w75
    assert %o21 == %w78
    assert %o22 == %w79
    assert %o23 == %w88
    assert %o24 == %w63
    assert %o25 == %w54
    assert %o26 == %w55
    assert %o27 == %w56
    assert %o28 == %w57
    assert %o29 == %w58
    assert %o30 == %w59
    assert %o1(BN) == %w284 != %w69 ? 62 <Field> : 63 <Field>
Transition:
    %w284 != %w69 ? -> 62 : -> 63

Block 63:
Func: main, Scope: 9
Exec Bound: 1, While Loop: false, Num VM Ops: 1
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: field
    %i9: field
    %i10: u32
    %i11: field
    %i12: u32
    %i14: u32
    %i15: u32
    %i16: field
    %i17: field
    %i18: u32
    %i19: field
    %i20: field
    %i21: u32
    %i22: field
    %i23: u32
    %i24: field
    %i25: field
    %i26: u32
    %i27: field
    %i28: u32
    %i29: field
    %i30: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: field
    %o9: u32
    %o10: u32
    %o11: u32
    %o12: u32
    %o13: field
    %o14: field
    %o15: u32
    %o16: field
    %o17: field
    %o18: u32
    %o19: field
    %o20: u32
    %o21: field
    %o22: field
    %o23: u32
    %o24: field
    %o25: u32
    %o26: field
    %o27: field
Instructions:
    assert %i1(BN) == 63 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w282 = %i7(BP)
    field %w68 = %i8
    field %w86 = %i9
    u32 %w69 = %i10
    field %w283 = %i11
    u32 %w60 = %i12
    u32 %w64 = %i14
    u32 %w62 = %i15
    field %w72 = %i16
    field %w73 = %i17
    u32 %w61 = %i18
    field %w87 = %i19
    field %w75 = %i20
    u32 %w78 = %i21
    field %w79 = %i22
    u32 %w88 = %i23
    field %w63 = %i24
    field %w54 = %i25
    u32 %w55 = %i26
    field %w56 = %i27
    u32 %w57 = %i28
    field %w58 = %i29
    field %w59 = %i30
    %w75[%w88] = %w283 <field>
    %w87 = %w87 + %w282 * %w283
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w68
    assert %o8 == %w86
    assert %o9 == %w69
    assert %o10 == %w60
    assert %o11 == %w64
    assert %o12 == %w62
    assert %o13 == %w72
    assert %o14 == %w73
    assert %o15 == %w61
    assert %o16 == %w87
    assert %o17 == %w75
    assert %o18 == %w78
    assert %o19 == %w79
    assert %o20 == %w88
    assert %o21 == %w63
    assert %o22 == %w54
    assert %o23 == %w55
    assert %o24 == %w56
    assert %o25 == %w57
    assert %o26 == %w58
    assert %o27 == %w59
    assert %o1(BN) == 65 <Field>
Transition: -> 65

Block 64:
Func: main, Scope: 8
Exec Bound: 1, While Loop: false, Num VM Ops: 1
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: field
    %i9: u32
    %i10: u32
    %i11: u32
    %i12: u32
    %i13: field
    %i14: field
    %i15: u32
    %i16: field
    %i17: field
    %i18: u32
    %i19: field
    %i20: u32
    %i21: field
    %i22: field
    %i23: u32
    %i24: field
    %i25: u32
    %i26: field
    %i27: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: field
    %o9: u32
    %o10: u32
    %o11: u32
    %o12: u32
    %o13: field
    %o14: field
    %o15: u32
    %o16: field
    %o17: field
    %o18: u32
    %o19: field
    %o20: u32
    %o21: field
    %o22: field
    %o23: u32
    %o24: field
    %o25: u32
    %o26: field
    %o27: field
Instructions:
    assert %i1(BN) == 64 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    field %w86 = %i8
    u32 %w69 = %i9
    u32 %w60 = %i10
    u32 %w64 = %i11
    u32 %w62 = %i12
    field %w72 = %i13
    field %w73 = %i14
    u32 %w61 = %i15
    field %w87 = %i16
    field %w75 = %i17
    u32 %w78 = %i18
    field %w79 = %i19
    u32 %w88 = %i20
    field %w63 = %i21
    field %w54 = %i22
    u32 %w55 = %i23
    field %w56 = %i24
    u32 %w57 = %i25
    field %w58 = %i26
    field %w59 = %i27
    %w75[%w88] = 0 <Field> <field>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w68
    assert %o8 == %w86
    assert %o9 == %w69
    assert %o10 == %w60
    assert %o11 == %w64
    assert %o12 == %w62
    assert %o13 == %w72
    assert %o14 == %w73
    assert %o15 == %w61
    assert %o16 == %w87
    assert %o17 == %w75
    assert %o18 == %w78
    assert %o19 == %w79
    assert %o20 == %w88
    assert %o21 == %w63
    assert %o22 == %w54
    assert %o23 == %w55
    assert %o24 == %w56
    assert %o25 == %w57
    assert %o26 == %w58
    assert %o27 == %w59
    assert %o1(BN) == 65 <Field>
Transition: -> 65

Block 65:
Func: main, Scope: 7
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: field
    %i9: u32
    %i10: u32
    %i11: u32
    %i12: u32
    %i13: field
    %i14: field
    %i15: u32
    %i16: field
    %i17: field
    %i18: u32
    %i19: field
    %i20: u32
    %i21: field
    %i22: field
    %i23: u32
    %i24: field
    %i25: u32
    %i26: field
    %i27: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: field
    %o9: u32
    %o10: u32
    %o11: u32
    %o12: u32
    %o13: field
    %o14: field
    %o15: u32
    %o16: field
    %o17: field
    %o18: u32
    %o19: field
    %o20: u32
    %o21: field
    %o22: field
    %o23: u32
    %o24: field
    %o25: u32
    %o26: field
    %o27: field
Instructions:
    assert %i1(BN) == 65 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    field %w86 = %i8
    u32 %w69 = %i9
    u32 %w60 = %i10
    u32 %w64 = %i11
    u32 %w62 = %i12
    field %w72 = %i13
    field %w73 = %i14
    u32 %w61 = %i15
    field %w87 = %i16
    field %w75 = %i17
    u32 %w78 = %i18
    field %w79 = %i19
    u32 %w88 = %i20
    field %w63 = %i21
    field %w54 = %i22
    u32 %w55 = %i23
    field %w56 = %i24
    u32 %w57 = %i25
    field %w58 = %i26
    field %w59 = %i27
    %w88 = %w88 + 1 <U32>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w68
    assert %o8 == %w86
    assert %o9 == %w69
    assert %o10 == %w60
    assert %o11 == %w64
    assert %o12 == %w62
    assert %o13 == %w72
    assert %o14 == %w73
    assert %o15 == %w61
    assert %o16 == %w87
    assert %o17 == %w75
    assert %o18 == %w78
    assert %o19 == %w79
    assert %o20 == %w88
    assert %o21 == %w63
    assert %o22 == %w54
    assert %o23 == %w55
    assert %o24 == %w56
    assert %o25 == %w57
    assert %o26 == %w58
    assert %o27 == %w59
    assert %o1(BN) == %w88 != %w57 ? 60 <Field> : 66 <Field>
Transition:
    %w88 != %w57 ? -> 60 : -> 66

Block 66:
Func: main, Scope: 5
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: field
    %i9: u32
    %i10: u32
    %i11: u32
    %i12: u32
    %i13: field
    %i14: field
    %i15: u32
    %i16: field
    %i17: field
    %i18: u32
    %i19: field
    %i21: field
    %i22: field
    %i23: u32
    %i24: field
    %i25: u32
    %i26: field
    %i27: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: field
    %o9: u32
    %o10: u32
    %o11: u32
    %o12: u32
    %o13: field
    %o14: field
    %o15: field
    %o16: u32
    %o17: field
    %o18: field
    %o19: u32
    %o20: field
    %o21: u32
    %o22: field
    %o23: field
    %o24: u32
    %o25: field
    %o26: u32
    %o27: field
    %o28: field
Instructions:
    assert %i1(BN) == 66 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    field %w86 = %i8
    u32 %w69 = %i9
    u32 %w60 = %i10
    u32 %w64 = %i11
    u32 %w62 = %i12
    field %w72 = %i13
    field %w73 = %i14
    u32 %w61 = %i15
    field %w87 = %i16
    field %w75 = %i17
    u32 %w78 = %i18
    field %w79 = %i19
    field %w63 = %i21
    field %w54 = %i22
    u32 %w55 = %i23
    field %w56 = %i24
    u32 %w57 = %i25
    field %w58 = %i26
    field %w59 = %i27
    field %w289 = 0 <Field>
    u32 %w290 = 0 <U32>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w68
    assert %o8 == %w86
    assert %o9 == %w69
    assert %o10 == %w60
    assert %o11 == %w64
    assert %o12 == %w62
    assert %o13 == %w289
    assert %o14 == %w72
    assert %o15 == %w73
    assert %o16 == %w61
    assert %o17 == %w87
    assert %o18 == %w75
    assert %o19 == %w78
    assert %o20 == %w79
    assert %o21 == %w290
    assert %o22 == %w63
    assert %o23 == %w54
    assert %o24 == %w55
    assert %o25 == %w56
    assert %o26 == %w57
    assert %o27 == %w58
    assert %o28 == %w59
    assert %o1(BN) == %w290 != %w55 ? 67 <Field> : 68 <Field>
Transition:
    %w290 != %w55 ? -> 67 : -> 68

Block 67:
Func: main, Scope: 6
Exec Bound: 1, While Loop: true, Num VM Ops: 21
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: field
    %i9: u32
    %i10: u32
    %i11: u32
    %i12: u32
    %i13: field
    %i14: field
    %i15: field
    %i16: u32
    %i17: field
    %i18: field
    %i19: u32
    %i20: field
    %i21: u32
    %i22: field
    %i23: field
    %i24: u32
    %i25: field
    %i26: u32
    %i27: field
    %i28: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: field
    %o9: u32
    %o10: u32
    %o11: u32
    %o12: u32
    %o13: field
    %o14: field
    %o15: field
    %o16: u32
    %o17: field
    %o18: field
    %o19: u32
    %o20: field
    %o21: u32
    %o22: field
    %o23: field
    %o24: u32
    %o25: field
    %o26: u32
    %o27: field
    %o28: field
Instructions:
    assert %i1(BN) == 67 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    field %w86 = %i8
    u32 %w69 = %i9
    u32 %w60 = %i10
    u32 %w64 = %i11
    u32 %w62 = %i12
    field %w289 = %i13
    field %w72 = %i14
    field %w73 = %i15
    u32 %w61 = %i16
    field %w87 = %i17
    field %w75 = %i18
    u32 %w78 = %i19
    field %w79 = %i20
    u32 %w290 = %i21
    field %w63 = %i22
    field %w54 = %i23
    u32 %w55 = %i24
    field %w56 = %i25
    u32 %w57 = %i26
    field %w58 = %i27
    field %w59 = %i28
    u32 %w291 = %w54[%w290]
    field %w293 = 0 <Field>
    field %w294 = 0 <Field>
    field %w303 = 0 <Field>
    field %w304 = 0 <Field>
    if %w291 < %w78:
        field %w292 = %w68[%w64 + 2 <U32> * %w290]
        %w293 = %w292
        field %w292 = %w68[%w64 + 2 <U32> * %w290 + 1 <U32>]
        %w294 = %w292
        field %w295 = %w56[%w290]
        field %w296 = %w295[%w78]
        field %w297 = %w296[0 <Field>]
        field %w298 = %w86[0 <Field>]
        field %w299 = %w56[%w290]
        field %w300 = %w299[%w78]
        field %w301 = %w300[1 <Field>]
        field %w302 = %w86[1 <Field>]
        %w303 = %w297 * %w298 + %w301 * %w302
        field %w295 = %w56[%w290]
        field %w296 = %w295[%w78]
        field %w297 = %w296[2 <Field>]
        field %w298 = %w86[0 <Field>]
        field %w299 = %w56[%w290]
        field %w300 = %w299[%w78]
        field %w301 = %w300[3 <Field>]
        field %w302 = %w86[1 <Field>]
        %w304 = %w297 * %w298 + %w301 * %w302
        %w72[%w290] = %w303 <field>
        %w73[%w290] = %w304 <field>
        %w289 = %w289 + %w293 * %w303 + %w294 * %w304
    else:
        %w72[%w290] = 0 <Field> <field>
        %w73[%w290] = 0 <Field> <field>
        Dummy Load
        Dummy Load
        Dummy Load
        Dummy Load
        Dummy Load
        Dummy Load
        Dummy Load
        Dummy Load
        Dummy Load
        Dummy Load
        Dummy Load
        Dummy Load
        Dummy Load
        Dummy Load
        Dummy Load
        Dummy Load
        Dummy Load
        Dummy Load
    %w290 = %w290 + 1 <U32>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w68
    assert %o8 == %w86
    assert %o9 == %w69
    assert %o10 == %w60
    assert %o11 == %w64
    assert %o12 == %w62
    assert %o13 == %w289
    assert %o14 == %w72
    assert %o15 == %w73
    assert %o16 == %w61
    assert %o17 == %w87
    assert %o18 == %w75
    assert %o19 == %w78
    assert %o20 == %w79
    assert %o21 == %w290
    assert %o22 == %w63
    assert %o23 == %w54
    assert %o24 == %w55
    assert %o25 == %w56
    assert %o26 == %w57
    assert %o27 == %w58
    assert %o28 == %w59
    assert %o1(BN) == %w290 != %w55 ? 67 <Field> : 68 <Field>
Transition:
    %w290 != %w55 ? -> 67 : -> 68

Block 68:
Func: main, Scope: 5
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i9: u32
    %i10: u32
    %i11: u32
    %i12: u32
    %i13: field
    %i14: field
    %i15: field
    %i16: u32
    %i17: field
    %i18: field
    %i19: u32
    %i20: field
    %i22: field
    %i23: field
    %i24: u32
    %i25: field
    %i26: u32
    %i27: field
    %i28: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: u32
    %o9: u32
    %o10: u32
    %o11: u32
    %o12: field
    %o13: field
    %o14: field
    %o15: field
    %o16: u32
    %o17: field
    %o18: u32
    %o19: field
    %o20: field
    %o21: u32
    %o22: field
    %o23: u32
    %o24: field
    %o25: field
Instructions:
    assert %i1(BN) == 68 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    u32 %w69 = %i9
    u32 %w60 = %i10
    u32 %w64 = %i11
    u32 %w62 = %i12
    field %w289 = %i13
    field %w72 = %i14
    field %w73 = %i15
    u32 %w61 = %i16
    field %w87 = %i17
    field %w75 = %i18
    u32 %w78 = %i19
    field %w79 = %i20
    field %w63 = %i22
    field %w54 = %i23
    u32 %w55 = %i24
    field %w56 = %i25
    u32 %w57 = %i26
    field %w58 = %i27
    field %w59 = %i28
    field %w305 = %w87 + %w289
    field %w306 = %w79
    field %w307 = %w305
    field %w247 = %w307
    field %w248 = %w306
    %w69 = %w69 * %w61
    %w78 = %w78 + 1 <U32>
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o7(BP) == %w68
    assert %o8 == %w69
    assert %o9 == %w60
    assert %o10 == %w64
    assert %o11 == %w62
    assert %o12 == %w72
    assert %o13 == %w73
    assert %o14 == %w247
    assert %o15 == %w248
    assert %o16 == %w61
    assert %o17 == %w75
    assert %o18 == %w78
    assert %o19 == %w63
    assert %o20 == %w54
    assert %o21 == %w55
    assert %o22 == %w56
    assert %o23 == %w57
    assert %o24 == %w58
    assert %o25 == %w59
    assert %o1(BN) == %w78 != %w60 - 1 <U32> ? 41 <Field> : 69 <Field>
Transition:
    %w78 != %w60 - 1 <U32> ? -> 41 : -> 69

Block 69:
Func: main, Scope: 2
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
Outputs:
    %o1(BN): field
    %o2(RET): u32
Instructions:
    assert %i1(BN) == 69 <Field>
    u32 %w84 = 1 <U32>
    assert %o2(RET) == %w84
    assert %o1(BN) == 72 <Field>
Program terminates.

Block 70:
Func: append_message_field, Scope: 0
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i21: u32
    %i7(BP): field
    %i8: u32
    %i9: field
    %i10: u32
    %i22: field
    %i23: u32
    %i11: u32
    %i24: field
    %i25: field
    %i12: u32
    %i26: field
    %i27: field
    %i28: field
    %i29: field
    %i30: field
    %i31: u32
    %i13: field
    %i32: u32
    %i33: field
    %i14: field
    %i34: field
    %i15: field
    %i16: u32
    %i17: field
    %i18: u32
    %i19: field
    %i20: field
    %i35: field
    %i36: bool
    %i37: u32
    %i38: u32
    %i39: field
    %i40: u32
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o7(BP): field
    %o5(RP): field
    %o3(TS): field
    %o8: u32
    %o9: field
    %o10: u32
    %o11: field
    %o12: u32
    %o13: field
    %o14: u32
    %o15: u32
    %o16: field
    %o17: field
    %o18: u32
    %o19: field
    %o20: field
    %o21: field
    %o22: field
    %o23: field
    %o24: u32
    %o25: u32
    %o26: field
    %o27: field
    %o28: field
    %o29: u32
    %o30: field
    %o31: u32
    %o32: field
    %o33: field
    %o34: field
    %o35: bool
    %o36: u32
    %o37: u32
    %o38: field
    %o39: u32
Instructions:
    assert %i1(BN) == 70 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    u32 %w196 = %i21
    field %w53 = %i7(BP)
    u32 %w65 = %i8
    field %w52 = %i9
    u32 %w64 = %i10
    field %w118 = %i22
    u32 %w199 = %i23
    u32 %w62 = %i11
    field %w72 = %i24
    field %w73 = %i25
    u32 %w61 = %i12
    field %w91 = %i26
    field %w75 = %i27
    field %w176 = %i28
    field %w198 = %i29
    field %w274 = %i30
    u32 %w78 = %i31
    field %w67 = %i13
    u32 %w99 = %i32
    field %w79 = %i33
    field %w66 = %i14
    field %w63 = %i34
    field %w54 = %i15
    u32 %w55 = %i16
    field %w56 = %i17
    u32 %w57 = %i18
    field %w58 = %i19
    field %w59 = %i20
    field %w190 = %i35
    bool %w191 = %i36
    u32 %w192 = %i37
    u32 %w193 = %i38
    field %w194 = %i39
    u32 %w195 = %i40
    field %w200 = %w66
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o7(BP) == %w200
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o8 == %w196
    assert %o9 == %w53
    assert %o10 == %w65
    assert %o11 == %w52
    assert %o12 == %w64
    assert %o13 == %w118
    assert %o14 == %w199
    assert %o15 == %w62
    assert %o16 == %w72
    assert %o17 == %w73
    assert %o18 == %w61
    assert %o19 == %w91
    assert %o20 == %w75
    assert %o21 == %w176
    assert %o22 == %w198
    assert %o23 == %w274
    assert %o24 == %w78
    assert %o25 == %w99
    assert %o26 == %w79
    assert %o27 == %w63
    assert %o28 == %w54
    assert %o29 == %w55
    assert %o30 == %w56
    assert %o31 == %w57
    assert %o32 == %w58
    assert %o33 == %w59
    assert %o34 == %w190
    assert %o35 == %w191
    assert %o36 == %w192
    assert %o37 == %w193
    assert %o38 == %w194
    assert %o39 == %w195
    assert %o1(BN) == %w67
Transition: -> %w67

Block 71:
Func: append_message_u32, Scope: 0
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: u32
    %i9: u32
    %i10: field
    %i11: u32
    %i12: u32
    %i13: u32
    %i14: u32
    %i15: field
    %i16: field
    %i17: u32
    %i18: field
    %i19: field
    %i20: field
    %i21: u32
    %i22: field
    %i23: u32
    %i24: field
    %i25: field
    %i26: field
    %i27: u32
    %i28: field
    %i29: u32
    %i30: field
    %i31: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o7(BP): field
    %o5(RP): field
    %o3(TS): field
    %o8: field
    %o9: u32
    %o10: u32
    %o11: field
    %o12: u32
    %o13: u32
    %o14: u32
    %o15: u32
    %o16: field
    %o17: field
    %o18: u32
    %o19: field
    %o20: field
    %o21: field
    %o22: u32
    %o23: u32
    %o24: field
    %o25: field
    %o26: u32
    %o27: field
    %o28: u32
    %o29: field
    %o30: field
Instructions:
    assert %i1(BN) == 71 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    u32 %w174 = %i8
    u32 %w175 = %i9
    field %w170 = %i10
    u32 %w69 = %i11
    u32 %w60 = %i12
    u32 %w64 = %i13
    u32 %w62 = %i14
    field %w72 = %i15
    field %w73 = %i16
    u32 %w61 = %i17
    field %w91 = %i18
    field %w75 = %i19
    field %w176 = %i20
    u32 %w78 = %i21
    field %w179 = %i22
    u32 %w99 = %i23
    field %w178 = %i24
    field %w63 = %i25
    field %w54 = %i26
    u32 %w55 = %i27
    field %w56 = %i28
    u32 %w57 = %i29
    field %w58 = %i30
    field %w59 = %i31
    field %w180 = %w178
    assert %o4(AS) == %w2(AS)
    assert %o6(SP) == %w4(SP)
    assert %o7(BP) == %w180
    assert %o5(RP) == %w3(RP)
    assert %o3(TS) == %w1(TS)
    assert %o8 == %w68
    assert %o9 == %w174
    assert %o10 == %w175
    assert %o11 == %w170
    assert %o12 == %w69
    assert %o13 == %w60
    assert %o14 == %w64
    assert %o15 == %w62
    assert %o16 == %w72
    assert %o17 == %w73
    assert %o18 == %w61
    assert %o19 == %w91
    assert %o20 == %w75
    assert %o21 == %w176
    assert %o22 == %w78
    assert %o23 == %w99
    assert %o24 == %w63
    assert %o25 == %w54
    assert %o26 == %w55
    assert %o27 == %w56
    assert %o28 == %w57
    assert %o29 == %w58
    assert %o30 == %w59
    assert %o1(BN) == %w179
Transition: -> %w179


--
Circ IR:
Optimizing IR...
done.
INPUT: []


--
Optimization:


--
Post-Processing:
Entry block: 0

Block 0:
Func: main, Scope: 0
Exec Bound: 1, While Loop: false, Num VM Ops: 25
Inputs:
    %i1(BN): field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: u32
    %o9: field
    %o10: u32
    %o11: u32
    %o12: u32
    %o13: field
    %o14: field
    %o15: field
    %o16: u32
    %o17: field
    %o18: u32
    %o19: field
    %o20: field
Instructions:
    assert %i1(BN) == 0 <Field>
    field %w3(RP) = 0 <Field>
    field %w4(SP) = 0 <Field>
    field %w1(TS) = 0 <Field>
    field %w2(AS) = 0 <Field>
    field[2][1 <U32>] %w5
    field[2 <U32>] %w6
    field %w7 = 1 <Field>
    field %w8 = 0 <Field>
    %w6[0 <Field>] = %w7 <field>, init
    %w6[1 <Field>] = %w8 <field>, init
    %w7 = %w6
    u32 %w9 = 0 <U32>
    if %w9 != 1 <U32>:
        %w5[%w9] = %w7 <field>, init
    else:
        Dummy Load
    field %w10 = %w5(BP)
    field[4][1 <U32>] %w11
    field[4 <U32>] %w12
    field %w13 = 1 <Field>
    %w8 = 2 <Field>
    field %w14 = 1 <Field>
    field %w15 = 2 <Field>
    %w12[0 <Field>] = %w13 <field>, init
    %w12[1 <Field>] = %w8 <field>, init
    %w12[2 <Field>] = %w14 <field>, init
    %w12[3 <Field>] = %w15 <field>, init
    %w13 = %w12
    %w9 = 0 <U32>
    if %w9 != 1 <U32>:
        %w11[%w9] = %w13 <field>, init
    else:
        Dummy Load
    field %w16 = %w11
    IOPProverMessage { evaluations: field[3] }[3][1 <U32>] %w17
    IOPProverMessage { evaluations: field[3] }[3 <U32>] %w18
    field[3 <U32>] %w19
    field %w20 = 1 <Field>
    %w8 = 2 <Field>
    %w14 = 3 <Field>
    %w19[0 <Field>] = %w20 <field>, init
    %w19[1 <Field>] = %w8 <field>, init
    %w19[2 <Field>] = %w14 <field>, init
    field %w21 = %w19
    field %w22 = %w21
    %w9 = 0 <U32>
    if %w9 != 3 <U32>:
        %w18[%w9] = %w22 <field>, init
        %w9 = %w9 + 1 <U32>
    else:
        Dummy Load
    if %w9 != 3 <U32>:
        %w18[%w9] = %w22 <field>, init
        %w9 = %w9 + 1 <U32>
    else:
        Dummy Load
    if %w9 != 3 <U32>:
        %w18[%w9] = %w22 <field>, init
    else:
        Dummy Load
    %w20 = %w18
    %w9 = 0 <U32>
    if %w9 != 1 <U32>:
        %w17[%w9] = %w20 <field>, init
    else:
        Dummy Load
    u32[1 <U32>] %w23
    u32 %w24 = 1 <U32>
    %w9 = 0 <U32>
    if %w9 != 1 <U32>:
        %w23[%w9] = %w24 <u32>, init
    else:
        Dummy Load
    field[1][1][1 <U32>] %w25
    field[1][1 <U32>] %w26
    field[1 <U32>] %w27
    field %w28 = 0 <Field>
    %w9 = 0 <U32>
    if %w9 != 1 <U32>:
        %w27[%w9] = %w28 <field>, init
    else:
        Dummy Load
    %w28 = %w27
    %w9 = 0 <U32>
    if %w9 != 1 <U32>:
        %w26[%w9] = %w28 <field>, init
    else:
        Dummy Load
    %w28 = %w26
    %w9 = 0 <U32>
    if %w9 != 1 <U32>:
        %w25[%w9] = %w28 <field>, init
    else:
        Dummy Load
    field[1][4][1 <U32>] %w29
    field[4][1 <U32>] %w30
    field[4 <U32>] %w31
    field %w32 = 0 <Field>
    %w8 = 0 <Field>
    %w14 = 0 <Field>
    %w15 = 0 <Field>
    %w31[0 <Field>] = %w32 <field>, init
    %w31[1 <Field>] = %w8 <field>, init
    %w31[2 <Field>] = %w14 <field>, init
    %w31[3 <Field>] = %w15 <field>, init
    %w32 = %w31
    %w9 = 0 <U32>
    if %w9 != 1 <U32>:
        %w30[%w9] = %w32 <field>, init
    else:
        Dummy Load
    %w32 = %w30
    %w9 = 0 <U32>
    if %w9 != 1 <U32>:
        %w29[%w9] = %w32 <field>, init
    else:
        Dummy Load
    u32 %w33 = 1 <U32>
    u32 %w34 = 1 <U32>
    field %w35 = %w17
    field %w36 = %w23
    field %w37 = %w25
    field %w38 = %w29
    field %w39 = %w36
    u32 %w40 = %w34
    field %w41 = %w38
    u32 %w42 = %w33
    field %w43 = %w37
    field %w44 = %w35
    u32 %w45 = 2 <U32>
    u32 %w46 = 2 <U32>
    u32 %w47 = 1 <U32>
    field %w48 = 2 <Field>
    field %w49 = %w48
    field %w50 = %w49
    field %w51 = %w50
    field %w52 = %w10
    field %w53 = %w16
    field %w54 = %w39
    u32 %w55 = %w40
    field %w56 = %w41
    u32 %w57 = %w42
    field %w58 = %w43
    field %w59 = %w44
    u32 %w60 = %w45
    u32 %w61 = %w46
    u32 %w62 = %w47
    field %w63 = %w51
    assert %w61 == 2 <U32>
    assert %w62 == 1 <U32>
    u32 %w64 = %w57
    u32 %w65 = %w55
    field %w66 = %w63
    %PHY[%SP + 0] = %w4(SP) <field>
    %w4(SP) = %w3(RP)
    %PHY[%SP + 1] = %w60 <u32>
    field %w67 = 28 <Field>
    %w3(RP) = %w3(RP) + 2 <Field>
    field %o4(AS) = %w2(AS)
    field %o6(SP) = %w4(SP)
    field %o5(RP) = %w3(RP)
    field %o3(TS) = %w1(TS)
    field %o7(BP) = %w53
    u32 %o8 = %w65
    field %o9 = %w52
    u32 %o10 = %w64
    u32 %o11 = %w62
    u32 %o12 = %w61
    field %o13 = %w67
    field %o14 = %w66
    field %o15 = %w54
    u32 %o16 = %w55
    field %o17 = %w56
    u32 %o18 = %w57
    field %o19 = %w58
    field %o20 = %w59
    field %o1(BN) = 70 <Field>
Transition: -> 70

Block 1:
Func: main, Scope: 7
Exec Bound: 1, While Loop: true, Num VM Ops: 1
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: u32
    %i9: field
    %i10: u32
    %i11: u32
    %i12: u32
    %i13: u32
    %i14: field
    %i15: field
    %i16: u32
    %i17: u32
    %i18: field
    %i19: field
    %i20: u32
    %i21: u32
    %i22: field
    %i23: field
    %i24: field
    %i25: u32
    %i26: field
    %i27: u32
    %i28: field
    %i29: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: u32
    %o9: field
    %o10: u32
    %o11: u32
    %o12: u32
    %o13: u32
    %o14: u32
    %o15: field
    %o16: field
    %o17: u32
    %o18: u32
    %o19: field
    %o20: field
    %o21: field
    %o22: u32
    %o23: u32
    %o24: field
    %o25: field
    %o26: field
    %o27: u32
    %o28: field
    %o29: u32
    %o30: field
    %o31: field
Instructions:
    assert %i1(BN) == 1 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    u32 %w69 = %i8
    field %w70 = %i9
    u32 %w60 = %i10
    u32 %w71 = %i11
    u32 %w64 = %i12
    u32 %w62 = %i13
    field %w72 = %i14
    field %w73 = %i15
    u32 %w74 = %i16
    u32 %w61 = %i17
    field %w75 = %i18
    field %w76 = %i19
    u32 %w77 = %i20
    u32 %w78 = %i21
    field %w79 = %i22
    field %w63 = %i23
    field %w54 = %i24
    u32 %w55 = %i25
    field %w56 = %i26
    u32 %w57 = %i27
    field %w58 = %i28
    field %w59 = %i29
    field %w80 = %w76[%w77 - 1 <U32> - %w71]
    field %w81 = %w80
    u32 %w82 = %w74
    field %o4(AS) = %w2(AS)
    field %o6(SP) = %w4(SP)
    field %o5(RP) = %w3(RP)
    field %o3(TS) = %w1(TS)
    field %o7(BP) = %w68
    u32 %o8 = %w69
    field %o9 = %w70
    u32 %o10 = %w60
    u32 %o11 = %w71
    u32 %o12 = %w64
    u32 %o13 = %w82
    u32 %o14 = %w62
    field %o15 = %w72
    field %o16 = %w73
    u32 %o17 = %w74
    u32 %o18 = %w61
    field %o19 = %w75
    field %o20 = %w76
    field %o21 = %w81
    u32 %o22 = %w77
    u32 %o23 = %w78
    field %o24 = %w79
    field %o25 = %w63
    field %o26 = %w54
    u32 %o27 = %w55
    field %o28 = %w56
    u32 %o29 = %w57
    field %o30 = %w58
    field %o31 = %w59
    field %o1(BN) = %w82 != 0 <U32> ? 2 <Field> : 3 <Field>
Transition:
    %w82 != 0 <U32> ? -> 2 : -> 3

Block 2:
Func: main, Scope: 9
Exec Bound: 1, While Loop: true, Num VM Ops: 4
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: u32
    %i9: field
    %i10: u32
    %i11: u32
    %i12: u32
    %i13: u32
    %i14: u32
    %i15: field
    %i16: field
    %i17: u32
    %i18: u32
    %i19: field
    %i20: field
    %i21: field
    %i22: u32
    %i23: u32
    %i24: field
    %i25: field
    %i26: field
    %i27: u32
    %i28: field
    %i29: u32
    %i30: field
    %i31: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: u32
    %o9: field
    %o10: u32
    %o11: u32
    %o12: u32
    %o13: u32
    %o14: u32
    %o15: field
    %o16: field
    %o17: u32
    %o18: u32
    %o19: field
    %o20: field
    %o21: field
    %o22: u32
    %o23: u32
    %o24: field
    %o25: field
    %o26: field
    %o27: u32
    %o28: field
    %o29: u32
    %o30: field
    %o31: field
Instructions:
    assert %i1(BN) == 2 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    u32 %w69 = %i8
    field %w70 = %i9
    u32 %w60 = %i10
    u32 %w71 = %i11
    u32 %w64 = %i12
    u32 %w82 = %i13
    u32 %w62 = %i14
    field %w72 = %i15
    field %w73 = %i16
    u32 %w74 = %i17
    u32 %w61 = %i18
    field %w75 = %i19
    field %w76 = %i20
    field %w81 = %i21
    u32 %w77 = %i22
    u32 %w78 = %i23
    field %w79 = %i24
    field %w63 = %i25
    field %w54 = %i26
    u32 %w55 = %i27
    field %w56 = %i28
    u32 %w57 = %i29
    field %w58 = %i30
    field %w59 = %i31
    %w82 = %w82 - 1 <U32>
    field %w83 = %w70[%w82]
    %w70[2 <U32> * %w82 + 1 <U32>] = %w81 * %w83 <field>
    field %w83 = %w70[%w82]
    %w70[2 <U32> * %w82] = 1 <Field> - %w81 * %w83 <field>
    field %o4(AS) = %w2(AS)
    field %o6(SP) = %w4(SP)
    field %o5(RP) = %w3(RP)
    field %o3(TS) = %w1(TS)
    field %o7(BP) = %w68
    u32 %o8 = %w69
    field %o9 = %w70
    u32 %o10 = %w60
    u32 %o11 = %w71
    u32 %o12 = %w64
    u32 %o13 = %w82
    u32 %o14 = %w62
    field %o15 = %w72
    field %o16 = %w73
    u32 %o17 = %w74
    u32 %o18 = %w61
    field %o19 = %w75
    field %o20 = %w76
    field %o21 = %w81
    u32 %o22 = %w77
    u32 %o23 = %w78
    field %o24 = %w79
    field %o25 = %w63
    field %o26 = %w54
    u32 %o27 = %w55
    field %o28 = %w56
    u32 %o29 = %w57
    field %o30 = %w58
    field %o31 = %w59
    field %o1(BN) = %w82 != 0 <U32> ? 2 <Field> : 3 <Field>
Transition:
    %w82 != 0 <U32> ? -> 2 : -> 3

Block 3:
Func: main, Scope: 8
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: u32
    %i9: field
    %i10: u32
    %i11: u32
    %i12: u32
    %i14: u32
    %i15: field
    %i16: field
    %i17: u32
    %i18: u32
    %i19: field
    %i20: field
    %i22: u32
    %i23: u32
    %i24: field
    %i25: field
    %i26: field
    %i27: u32
    %i28: field
    %i29: u32
    %i30: field
    %i31: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: u32
    %o9: field
    %o10: u32
    %o11: u32
    %o12: u32
    %o13: u32
    %o14: field
    %o15: field
    %o16: u32
    %o17: u32
    %o18: field
    %o19: field
    %o20: u32
    %o21: u32
    %o22: field
    %o23: field
    %o24: field
    %o25: u32
    %o26: field
    %o27: u32
    %o28: field
    %o29: field
Instructions:
    assert %i1(BN) == 3 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    u32 %w69 = %i8
    field %w70 = %i9
    u32 %w60 = %i10
    u32 %w71 = %i11
    u32 %w64 = %i12
    u32 %w62 = %i14
    field %w72 = %i15
    field %w73 = %i16
    u32 %w74 = %i17
    u32 %w61 = %i18
    field %w75 = %i19
    field %w76 = %i20
    u32 %w77 = %i22
    u32 %w78 = %i23
    field %w79 = %i24
    field %w63 = %i25
    field %w54 = %i26
    u32 %w55 = %i27
    field %w56 = %i28
    u32 %w57 = %i29
    field %w58 = %i30
    field %w59 = %i31
    %w74 = %w74 * 2 <U32>
    %w71 = %w71 + 1 <U32>
    field %o4(AS) = %w2(AS)
    field %o6(SP) = %w4(SP)
    field %o5(RP) = %w3(RP)
    field %o3(TS) = %w1(TS)
    field %o7(BP) = %w68
    u32 %o8 = %w69
    field %o9 = %w70
    u32 %o10 = %w60
    u32 %o11 = %w71
    u32 %o12 = %w64
    u32 %o13 = %w62
    field %o14 = %w72
    field %o15 = %w73
    u32 %o16 = %w74
    u32 %o17 = %w61
    field %o18 = %w75
    field %o19 = %w76
    u32 %o20 = %w77
    u32 %o21 = %w78
    field %o22 = %w79
    field %o23 = %w63
    field %o24 = %w54
    u32 %o25 = %w55
    field %o26 = %w56
    u32 %o27 = %w57
    field %o28 = %w58
    field %o29 = %w59
    field %o1(BN) = %w71 != %w77 ? 1 <Field> : 4 <Field>
Transition:
    %w71 != %w77 ? -> 1 : -> 4

Block 4:
Func: main, Scope: 6
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: u32
    %i9: field
    %i10: u32
    %i12: u32
    %i13: u32
    %i14: field
    %i15: field
    %i17: u32
    %i18: field
    %i21: u32
    %i22: field
    %i23: field
    %i24: field
    %i25: u32
    %i26: field
    %i27: u32
    %i28: field
    %i29: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: field
    %o9: u32
    %o10: u32
    %o11: u32
    %o12: u32
    %o13: field
    %o14: field
    %o15: u32
    %o16: field
    %o17: field
    %o18: u32
    %o19: field
    %o20: u32
    %o21: field
    %o22: field
    %o23: u32
    %o24: field
    %o25: u32
    %o26: field
    %o27: field
Instructions:
    assert %i1(BN) == 4 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    u32 %w69 = %i8
    field %w70 = %i9
    u32 %w60 = %i10
    u32 %w64 = %i12
    u32 %w62 = %i13
    field %w72 = %i14
    field %w73 = %i15
    u32 %w61 = %i17
    field %w75 = %i18
    u32 %w78 = %i21
    field %w79 = %i22
    field %w63 = %i23
    field %w54 = %i24
    u32 %w55 = %i25
    field %w56 = %i26
    u32 %w57 = %i27
    field %w58 = %i28
    field %w59 = %i29
    field %w84 = %w70
    field %w85 = %w84
    field %w86 = %w85
    field %w87 = 0 <Field>
    u32 %w88 = 0 <U32>
    field %o4(AS) = %w2(AS)
    field %o6(SP) = %w4(SP)
    field %o5(RP) = %w3(RP)
    field %o3(TS) = %w1(TS)
    field %o7(BP) = %w68
    field %o8 = %w86
    u32 %o9 = %w69
    u32 %o10 = %w60
    u32 %o11 = %w64
    u32 %o12 = %w62
    field %o13 = %w72
    field %o14 = %w73
    u32 %o15 = %w61
    field %o16 = %w87
    field %o17 = %w75
    u32 %o18 = %w78
    field %o19 = %w79
    u32 %o20 = %w88
    field %o21 = %w63
    field %o22 = %w54
    u32 %o23 = %w55
    field %o24 = %w56
    u32 %o25 = %w57
    field %o26 = %w58
    field %o27 = %w59
    field %o1(BN) = %w88 != %w57 ? 60 <Field> : 66 <Field>
Transition:
    %w88 != %w57 ? -> 60 : -> 66

Block 5:
Func: eq_eval, Scope: 0
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): u32
    %i8: field
    %i9: u32
    %i10: u32
    %i11: u32
    %i12: u32
    %i13: field
    %i14: field
    %i15: u32
    %i16: field
    %i34: field
    %i35: field
    %i17: field
    %i18: field
    %i36: field
    %i37: field
    %i19: u32
    %i20: field
    %i21: field
    %i22: u32
    %i23: u32
    %i38: u32
    %i24: field
    %i25: field
    %i26: field
    %i27: u32
    %i28: field
    %i29: u32
    %i30: field
    %i31: field
    %i32: field
    %i33: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): u32
    %o8: field
    %o9: u32
    %o10: u32
    %o11: u32
    %o12: u32
    %o13: u32
    %o14: field
    %o15: field
    %o16: u32
    %o17: field
    %o18: field
    %o19: field
    %o20: field
    %o21: field
    %o22: field
    %o23: field
    %o24: field
    %o25: u32
    %o26: field
    %o27: field
    %o28: u32
    %o29: u32
    %o30: u32
    %o31: field
    %o32: field
    %o33: field
    %o34: u32
    %o35: field
    %o36: u32
    %o37: field
    %o38: field
    %o39: field
    %o40: field
Instructions:
    assert %i1(BN) == 5 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    u32 %w69 = %i7(BP)
    field %w89 = %i8
    u32 %w60 = %i9
    u32 %w64 = %i10
    u32 %w90 = %i11
    u32 %w62 = %i12
    field %w72 = %i13
    field %w73 = %i14
    u32 %w61 = %i15
    field %w91 = %i16
    field %w92 = %i34
    field %w93 = %i35
    field %w94 = %i17
    field %w75 = %i18
    field %w95 = %i36
    field %w96 = %i37
    u32 %w78 = %i19
    field %w97 = %i20
    field %w98 = %i21
    u32 %w99 = %i22
    u32 %w100 = %i23
    u32 %w101 = %i38
    field %w102 = %i24
    field %w63 = %i25
    field %w54 = %i26
    u32 %w55 = %i27
    field %w56 = %i28
    u32 %w57 = %i29
    field %w58 = %i30
    field %w59 = %i31
    field %w103 = %i32
    field %w104 = %i33
    field %w105 = 1 <Field>
    u32 %w106 = 0 <U32>
    field %o4(AS) = %w2(AS)
    field %o6(SP) = %w4(SP)
    field %o5(RP) = %w3(RP)
    field %o3(TS) = %w1(TS)
    u32 %o7(BP) = %w69
    field %o8 = %w89
    u32 %o9 = %w60
    u32 %o10 = %w106
    u32 %o11 = %w64
    u32 %o12 = %w90
    u32 %o13 = %w62
    field %o14 = %w72
    field %o15 = %w73
    u32 %o16 = %w61
    field %o17 = %w91
    field %o18 = %w92
    field %o19 = %w93
    field %o20 = %w94
    field %o21 = %w75
    field %o22 = %w95
    field %o23 = %w96
    field %o24 = %w105
    u32 %o25 = %w78
    field %o26 = %w97
    field %o27 = %w98
    u32 %o28 = %w99
    u32 %o29 = %w100
    u32 %o30 = %w101
    field %o31 = %w102
    field %o32 = %w63
    field %o33 = %w54
    u32 %o34 = %w55
    field %o35 = %w56
    u32 %o36 = %w57
    field %o37 = %w58
    field %o38 = %w59
    field %o39 = %w103
    field %o40 = %w104
    field %o1(BN) = %w106 != %w90 ? 6 <Field> : 7 <Field>
Transition:
    %w106 != %w90 ? -> 6 : -> 7

Block 6:
Func: eq_eval, Scope: 2
Exec Bound: 1, While Loop: true, Num VM Ops: 2
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): u32
    %i8: field
    %i9: u32
    %i10: u32
    %i11: u32
    %i12: u32
    %i13: u32
    %i14: field
    %i15: field
    %i16: u32
    %i17: field
    %i18: field
    %i19: field
    %i20: field
    %i21: field
    %i22: field
    %i23: field
    %i24: field
    %i25: u32
    %i26: field
    %i27: field
    %i28: u32
    %i29: u32
    %i30: u32
    %i31: field
    %i32: field
    %i33: field
    %i34: u32
    %i35: field
    %i36: u32
    %i37: field
    %i38: field
    %i39: field
    %i40: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): u32
    %o8: field
    %o9: u32
    %o10: u32
    %o11: u32
    %o12: u32
    %o13: u32
    %o14: field
    %o15: field
    %o16: u32
    %o17: field
    %o18: field
    %o19: field
    %o20: field
    %o21: field
    %o22: field
    %o23: field
    %o24: field
    %o25: u32
    %o26: field
    %o27: field
    %o28: u32
    %o29: u32
    %o30: u32
    %o31: field
    %o32: field
    %o33: field
    %o34: u32
    %o35: field
    %o36: u32
    %o37: field
    %o38: field
    %o39: field
    %o40: field
Instructions:
    assert %i1(BN) == 6 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    u32 %w69 = %i7(BP)
    field %w89 = %i8
    u32 %w60 = %i9
    u32 %w106 = %i10
    u32 %w64 = %i11
    u32 %w90 = %i12
    u32 %w62 = %i13
    field %w72 = %i14
    field %w73 = %i15
    u32 %w61 = %i16
    field %w91 = %i17
    field %w92 = %i18
    field %w93 = %i19
    field %w94 = %i20
    field %w75 = %i21
    field %w95 = %i22
    field %w96 = %i23
    field %w105 = %i24
    u32 %w78 = %i25
    field %w97 = %i26
    field %w98 = %i27
    u32 %w99 = %i28
    u32 %w100 = %i29
    u32 %w101 = %i30
    field %w102 = %i31
    field %w63 = %i32
    field %w54 = %i33
    u32 %w55 = %i34
    field %w56 = %i35
    u32 %w57 = %i36
    field %w58 = %i37
    field %w59 = %i38
    field %w103 = %i39
    field %w104 = %i40
    field %w107 = %w103[%w106]
    field %w108 = %w107
    field %w107 = %w104[%w106]
    field %w109 = %w107
    field %w110 = %w108 * %w109
    %w105 = %w105 * %w110 + %w110 - %w108 - %w109 + 1 <Field>
    %w106 = %w106 + 1 <U32>
    field %o4(AS) = %w2(AS)
    field %o6(SP) = %w4(SP)
    field %o5(RP) = %w3(RP)
    field %o3(TS) = %w1(TS)
    u32 %o7(BP) = %w69
    field %o8 = %w89
    u32 %o9 = %w60
    u32 %o10 = %w106
    u32 %o11 = %w64
    u32 %o12 = %w90
    u32 %o13 = %w62
    field %o14 = %w72
    field %o15 = %w73
    u32 %o16 = %w61
    field %o17 = %w91
    field %o18 = %w92
    field %o19 = %w93
    field %o20 = %w94
    field %o21 = %w75
    field %o22 = %w95
    field %o23 = %w96
    field %o24 = %w105
    u32 %o25 = %w78
    field %o26 = %w97
    field %o27 = %w98
    u32 %o28 = %w99
    u32 %o29 = %w100
    u32 %o30 = %w101
    field %o31 = %w102
    field %o32 = %w63
    field %o33 = %w54
    u32 %o34 = %w55
    field %o35 = %w56
    u32 %o36 = %w57
    field %o37 = %w58
    field %o38 = %w59
    field %o39 = %w103
    field %o40 = %w104
    field %o1(BN) = %w106 != %w90 ? 6 <Field> : 7 <Field>
Transition:
    %w106 != %w90 ? -> 6 : -> 7

Block 7:
Func: eq_eval, Scope: 1
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): u32
    %i8: field
    %i9: u32
    %i11: u32
    %i13: u32
    %i14: field
    %i15: field
    %i16: u32
    %i17: field
    %i18: field
    %i19: field
    %i20: field
    %i21: field
    %i22: field
    %i23: field
    %i24: field
    %i25: u32
    %i26: field
    %i27: field
    %i28: u32
    %i29: u32
    %i30: u32
    %i31: field
    %i32: field
    %i33: field
    %i34: u32
    %i35: field
    %i36: u32
    %i37: field
    %i38: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o2(RET): field
    %o5(RP): field
    %o3(TS): field
    %o8: u32
    %o9: field
    %o10: u32
    %o11: u32
    %o12: u32
    %o13: field
    %o14: field
    %o15: u32
    %o16: field
    %o17: field
    %o18: field
    %o19: field
    %o20: field
    %o21: field
    %o22: field
    %o23: u32
    %o24: field
    %o25: u32
    %o26: u32
    %o27: u32
    %o28: field
    %o29: field
    %o30: field
    %o31: u32
    %o32: field
    %o33: u32
    %o34: field
    %o35: field
Instructions:
    assert %i1(BN) == 7 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    u32 %w69 = %i7(BP)
    field %w89 = %i8
    u32 %w60 = %i9
    u32 %w64 = %i11
    u32 %w62 = %i13
    field %w72 = %i14
    field %w73 = %i15
    u32 %w61 = %i16
    field %w91 = %i17
    field %w92 = %i18
    field %w93 = %i19
    field %w94 = %i20
    field %w75 = %i21
    field %w95 = %i22
    field %w96 = %i23
    field %w105 = %i24
    u32 %w78 = %i25
    field %w97 = %i26
    field %w98 = %i27
    u32 %w99 = %i28
    u32 %w100 = %i29
    u32 %w101 = %i30
    field %w102 = %i31
    field %w63 = %i32
    field %w54 = %i33
    u32 %w55 = %i34
    field %w56 = %i35
    u32 %w57 = %i36
    field %w58 = %i37
    field %w59 = %i38
    field %w111 = %w105
    field %o4(AS) = %w2(AS)
    field %o6(SP) = %w4(SP)
    field %o2(RET) = %w111
    field %o5(RP) = %w3(RP)
    field %o3(TS) = %w1(TS)
    u32 %o8 = %w69
    field %o9 = %w89
    u32 %o10 = %w60
    u32 %o11 = %w64
    u32 %o12 = %w62
    field %o13 = %w72
    field %o14 = %w73
    u32 %o15 = %w61
    field %o16 = %w91
    field %o17 = %w92
    field %o18 = %w93
    field %o19 = %w94
    field %o20 = %w75
    field %o21 = %w95
    field %o22 = %w96
    u32 %o23 = %w78
    field %o24 = %w98
    u32 %o25 = %w99
    u32 %o26 = %w100
    u32 %o27 = %w101
    field %o28 = %w102
    field %o29 = %w63
    field %o30 = %w54
    u32 %o31 = %w55
    field %o32 = %w56
    u32 %o33 = %w57
    field %o34 = %w58
    field %o35 = %w59
    field %o1(BN) = %w97
Transition: -> %w97

Block 8:
Func: mle_eval, Scope: 0
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i31: field
    %i32: field
    %i8: field
    %i9: u32
    %i10: u32
    %i33: u32
    %i11: field
    %i12: field
    %i13: u32
    %i14: field
    %i15: u32
    %i16: field
    %i17: u32
    %i34: field
    %i18: u32
    %i19: u32
    %i20: field
    %i21: u32
    %i22: field
    %i23: field
    %i24: field
    %i25: field
    %i26: u32
    %i27: field
    %i28: u32
    %i29: field
    %i30: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: field
    %o9: field
    %o10: field
    %o11: u32
    %o12: u32
    %o13: u32
    %o14: u32
    %o15: field
    %o16: field
    %o17: u32
    %o18: field
    %o19: u32
    %o20: field
    %o21: u32
    %o22: field
    %o23: u32
    %o24: u32
    %o25: field
    %o26: u32
    %o27: field
    %o28: field
    %o29: field
    %o30: field
    %o31: u32
    %o32: field
    %o33: u32
    %o34: field
    %o35: field
Instructions:
    assert %i1(BN) == 8 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w112 = %i7(BP)
    field %w113 = %i31
    field %w114 = %i32
    field %w68 = %i8
    u32 %w60 = %i9
    u32 %w115 = %i10
    u32 %w116 = %i33
    field %w117 = %i11
    field %w53 = %i12
    u32 %w65 = %i13
    field %w52 = %i14
    u32 %w64 = %i15
    field %w118 = %i16
    u32 %w62 = %i17
    field %w119 = %i34
    u32 %w120 = %i18
    u32 %w61 = %i19
    field %w121 = %i20
    u32 %w122 = %i21
    field %w123 = %i22
    field %w124 = %i23
    field %w63 = %i24
    field %w54 = %i25
    u32 %w55 = %i26
    field %w56 = %i27
    u32 %w57 = %i28
    field %w58 = %i29
    field %w59 = %i30
    u32 %w125 = 0 <U32>
    field %o4(AS) = %w2(AS)
    field %o6(SP) = %w4(SP)
    field %o5(RP) = %w3(RP)
    field %o3(TS) = %w1(TS)
    field %o7(BP) = %w112
    field %o8 = %w113
    field %o9 = %w114
    field %o10 = %w68
    u32 %o11 = %w60
    u32 %o12 = %w125
    u32 %o13 = %w115
    u32 %o14 = %w116
    field %o15 = %w117
    field %o16 = %w53
    u32 %o17 = %w65
    field %o18 = %w52
    u32 %o19 = %w64
    field %o20 = %w118
    u32 %o21 = %w62
    field %o22 = %w119
    u32 %o23 = %w120
    u32 %o24 = %w61
    field %o25 = %w121
    u32 %o26 = %w122
    field %o27 = %w123
    field %o28 = %w124
    field %o29 = %w63
    field %o30 = %w54
    u32 %o31 = %w55
    field %o32 = %w56
    u32 %o33 = %w57
    field %o34 = %w58
    field %o35 = %w59
    field %o1(BN) = %w125 != %w122 ? 9 <Field> : 12 <Field>
Transition:
    %w125 != %w122 ? -> 9 : -> 12

Block 9:
Func: mle_eval, Scope: 2
Exec Bound: 1, While Loop: true, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: field
    %i9: field
    %i10: field
    %i11: u32
    %i12: u32
    %i13: u32
    %i14: u32
    %i15: field
    %i16: field
    %i17: u32
    %i18: field
    %i19: u32
    %i20: field
    %i21: u32
    %i22: field
    %i23: u32
    %i24: u32
    %i25: field
    %i26: u32
    %i27: field
    %i28: field
    %i29: field
    %i30: field
    %i31: u32
    %i32: field
    %i33: u32
    %i34: field
    %i35: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: field
    %o9: field
    %o10: field
    %o11: u32
    %o12: u32
    %o13: u32
    %o14: u32
    %o15: field
    %o16: field
    %o17: u32
    %o18: field
    %o19: u32
    %o20: field
    %o21: u32
    %o22: u32
    %o23: field
    %o24: u32
    %o25: u32
    %o26: field
    %o27: u32
    %o28: field
    %o29: field
    %o30: field
    %o31: field
    %o32: u32
    %o33: field
    %o34: u32
    %o35: field
    %o36: field
Instructions:
    assert %i1(BN) == 9 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w112 = %i7(BP)
    field %w113 = %i8
    field %w114 = %i9
    field %w68 = %i10
    u32 %w60 = %i11
    u32 %w125 = %i12
    u32 %w115 = %i13
    u32 %w116 = %i14
    field %w117 = %i15
    field %w53 = %i16
    u32 %w65 = %i17
    field %w52 = %i18
    u32 %w64 = %i19
    field %w118 = %i20
    u32 %w62 = %i21
    field %w119 = %i22
    u32 %w120 = %i23
    u32 %w61 = %i24
    field %w121 = %i25
    u32 %w122 = %i26
    field %w123 = %i27
    field %w124 = %i28
    field %w63 = %i29
    field %w54 = %i30
    u32 %w55 = %i31
    field %w56 = %i32
    u32 %w57 = %i33
    field %w58 = %i34
    field %w59 = %i35
    %w120 = %w120 / 2 <U32>
    u32 %w126 = 0 <U32>
    field %o4(AS) = %w2(AS)
    field %o6(SP) = %w4(SP)
    field %o5(RP) = %w3(RP)
    field %o3(TS) = %w1(TS)
    field %o7(BP) = %w112
    field %o8 = %w113
    field %o9 = %w114
    field %o10 = %w68
    u32 %o11 = %w60
    u32 %o12 = %w125
    u32 %o13 = %w115
    u32 %o14 = %w116
    field %o15 = %w117
    field %o16 = %w53
    u32 %o17 = %w65
    field %o18 = %w52
    u32 %o19 = %w64
    field %o20 = %w118
    u32 %o21 = %w126
    u32 %o22 = %w62
    field %o23 = %w119
    u32 %o24 = %w120
    u32 %o25 = %w61
    field %o26 = %w121
    u32 %o27 = %w122
    field %o28 = %w123
    field %o29 = %w124
    field %o30 = %w63
    field %o31 = %w54
    u32 %o32 = %w55
    field %o33 = %w56
    u32 %o34 = %w57
    field %o35 = %w58
    field %o36 = %w59
    field %o1(BN) = %w126 != %w120 ? 10 <Field> : 11 <Field>
Transition:
    %w126 != %w120 ? -> 10 : -> 11

Block 10:
Func: mle_eval, Scope: 5
Exec Bound: 1, While Loop: true, Num VM Ops: 5
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: field
    %i9: field
    %i10: field
    %i11: u32
    %i12: u32
    %i13: u32
    %i14: u32
    %i15: field
    %i16: field
    %i17: u32
    %i18: field
    %i19: u32
    %i20: field
    %i21: u32
    %i22: u32
    %i23: field
    %i24: u32
    %i25: u32
    %i26: field
    %i27: u32
    %i28: field
    %i29: field
    %i30: field
    %i31: field
    %i32: u32
    %i33: field
    %i34: u32
    %i35: field
    %i36: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: field
    %o9: field
    %o10: field
    %o11: u32
    %o12: u32
    %o13: u32
    %o14: u32
    %o15: field
    %o16: field
    %o17: u32
    %o18: field
    %o19: u32
    %o20: field
    %o21: u32
    %o22: u32
    %o23: field
    %o24: u32
    %o25: u32
    %o26: field
    %o27: u32
    %o28: field
    %o29: field
    %o30: field
    %o31: field
    %o32: u32
    %o33: field
    %o34: u32
    %o35: field
    %o36: field
Instructions:
    assert %i1(BN) == 10 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w112 = %i7(BP)
    field %w113 = %i8
    field %w114 = %i9
    field %w68 = %i10
    u32 %w60 = %i11
    u32 %w125 = %i12
    u32 %w115 = %i13
    u32 %w116 = %i14
    field %w117 = %i15
    field %w53 = %i16
    u32 %w65 = %i17
    field %w52 = %i18
    u32 %w64 = %i19
    field %w118 = %i20
    u32 %w126 = %i21
    u32 %w62 = %i22
    field %w119 = %i23
    u32 %w120 = %i24
    u32 %w61 = %i25
    field %w121 = %i26
    u32 %w122 = %i27
    field %w123 = %i28
    field %w124 = %i29
    field %w63 = %i30
    field %w54 = %i31
    u32 %w55 = %i32
    field %w56 = %i33
    u32 %w57 = %i34
    field %w58 = %i35
    field %w59 = %i36
    field %w127 = %w121[%w125]
    field %w128 = %w124[%w126]
    field %w129 = %w121[%w125]
    field %w130 = %w124[%w120 + %w126]
    %w124[%w126] = 1 <Field> - %w127 * %w128 + %w129 * %w130 <field>
    %w126 = %w126 + 1 <U32>
    field %o4(AS) = %w2(AS)
    field %o6(SP) = %w4(SP)
    field %o5(RP) = %w3(RP)
    field %o3(TS) = %w1(TS)
    field %o7(BP) = %w112
    field %o8 = %w113
    field %o9 = %w114
    field %o10 = %w68
    u32 %o11 = %w60
    u32 %o12 = %w125
    u32 %o13 = %w115
    u32 %o14 = %w116
    field %o15 = %w117
    field %o16 = %w53
    u32 %o17 = %w65
    field %o18 = %w52
    u32 %o19 = %w64
    field %o20 = %w118
    u32 %o21 = %w126
    u32 %o22 = %w62
    field %o23 = %w119
    u32 %o24 = %w120
    u32 %o25 = %w61
    field %o26 = %w121
    u32 %o27 = %w122
    field %o28 = %w123
    field %o29 = %w124
    field %o30 = %w63
    field %o31 = %w54
    u32 %o32 = %w55
    field %o33 = %w56
    u32 %o34 = %w57
    field %o35 = %w58
    field %o36 = %w59
    field %o1(BN) = %w126 != %w120 ? 10 <Field> : 11 <Field>
Transition:
    %w126 != %w120 ? -> 10 : -> 11

Block 11:
Func: mle_eval, Scope: 4
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: field
    %i9: field
    %i10: field
    %i11: u32
    %i12: u32
    %i13: u32
    %i14: u32
    %i15: field
    %i16: field
    %i17: u32
    %i18: field
    %i19: u32
    %i20: field
    %i22: u32
    %i23: field
    %i24: u32
    %i25: u32
    %i26: field
    %i27: u32
    %i28: field
    %i29: field
    %i30: field
    %i31: field
    %i32: u32
    %i33: field
    %i34: u32
    %i35: field
    %i36: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: field
    %o9: field
    %o10: field
    %o11: u32
    %o12: u32
    %o13: u32
    %o14: u32
    %o15: field
    %o16: field
    %o17: u32
    %o18: field
    %o19: u32
    %o20: field
    %o21: u32
    %o22: field
    %o23: u32
    %o24: u32
    %o25: field
    %o26: u32
    %o27: field
    %o28: field
    %o29: field
    %o30: field
    %o31: u32
    %o32: field
    %o33: u32
    %o34: field
    %o35: field
Instructions:
    assert %i1(BN) == 11 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w112 = %i7(BP)
    field %w113 = %i8
    field %w114 = %i9
    field %w68 = %i10
    u32 %w60 = %i11
    u32 %w125 = %i12
    u32 %w115 = %i13
    u32 %w116 = %i14
    field %w117 = %i15
    field %w53 = %i16
    u32 %w65 = %i17
    field %w52 = %i18
    u32 %w64 = %i19
    field %w118 = %i20
    u32 %w62 = %i22
    field %w119 = %i23
    u32 %w120 = %i24
    u32 %w61 = %i25
    field %w121 = %i26
    u32 %w122 = %i27
    field %w123 = %i28
    field %w124 = %i29
    field %w63 = %i30
    field %w54 = %i31
    u32 %w55 = %i32
    field %w56 = %i33
    u32 %w57 = %i34
    field %w58 = %i35
    field %w59 = %i36
    %w125 = %w125 + 1 <U32>
    field %o4(AS) = %w2(AS)
    field %o6(SP) = %w4(SP)
    field %o5(RP) = %w3(RP)
    field %o3(TS) = %w1(TS)
    field %o7(BP) = %w112
    field %o8 = %w113
    field %o9 = %w114
    field %o10 = %w68
    u32 %o11 = %w60
    u32 %o12 = %w125
    u32 %o13 = %w115
    u32 %o14 = %w116
    field %o15 = %w117
    field %o16 = %w53
    u32 %o17 = %w65
    field %o18 = %w52
    u32 %o19 = %w64
    field %o20 = %w118
    u32 %o21 = %w62
    field %o22 = %w119
    u32 %o23 = %w120
    u32 %o24 = %w61
    field %o25 = %w121
    u32 %o26 = %w122
    field %o27 = %w123
    field %o28 = %w124
    field %o29 = %w63
    field %o30 = %w54
    u32 %o31 = %w55
    field %o32 = %w56
    u32 %o33 = %w57
    field %o34 = %w58
    field %o35 = %w59
    field %o1(BN) = %w125 != %w122 ? 9 <Field> : 12 <Field>
Transition:
    %w125 != %w122 ? -> 9 : -> 12

Block 12:
Func: mle_eval, Scope: 1
Exec Bound: 1, While Loop: false, Num VM Ops: 1
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: field
    %i9: field
    %i10: field
    %i11: u32
    %i13: u32
    %i14: u32
    %i15: field
    %i16: field
    %i17: u32
    %i18: field
    %i19: u32
    %i20: field
    %i21: u32
    %i22: field
    %i24: u32
    %i27: field
    %i28: field
    %i29: field
    %i30: field
    %i31: u32
    %i32: field
    %i33: u32
    %i34: field
    %i35: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o2(RET): field
    %o5(RP): field
    %o3(TS): field
    %o8: field
    %o9: field
    %o10: field
    %o11: field
    %o12: u32
    %o13: u32
    %o14: u32
    %o15: field
    %o16: field
    %o17: u32
    %o18: field
    %o19: u32
    %o20: field
    %o21: u32
    %o22: field
    %o23: u32
    %o24: field
    %o25: field
    %o26: u32
    %o27: field
    %o28: u32
    %o29: field
    %o30: field
Instructions:
    assert %i1(BN) == 12 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w112 = %i7(BP)
    field %w113 = %i8
    field %w114 = %i9
    field %w68 = %i10
    u32 %w60 = %i11
    u32 %w115 = %i13
    u32 %w116 = %i14
    field %w117 = %i15
    field %w53 = %i16
    u32 %w65 = %i17
    field %w52 = %i18
    u32 %w64 = %i19
    field %w118 = %i20
    u32 %w62 = %i21
    field %w119 = %i22
    u32 %w61 = %i24
    field %w123 = %i27
    field %w124 = %i28
    field %w63 = %i29
    field %w54 = %i30
    u32 %w55 = %i31
    field %w56 = %i32
    u32 %w57 = %i33
    field %w58 = %i34
    field %w59 = %i35
    field %w131 = %w124[0 <Field>]
    field %w132 = %w131
    field %o4(AS) = %w2(AS)
    field %o6(SP) = %w4(SP)
    field %o2(RET) = %w132
    field %o5(RP) = %w3(RP)
    field %o3(TS) = %w1(TS)
    field %o8 = %w112
    field %o9 = %w113
    field %o10 = %w114
    field %o11 = %w68
    u32 %o12 = %w60
    u32 %o13 = %w115
    u32 %o14 = %w116
    field %o15 = %w117
    field %o16 = %w53
    u32 %o17 = %w65
    field %o18 = %w52
    u32 %o19 = %w64
    field %o20 = %w118
    u32 %o21 = %w62
    field %o22 = %w119
    u32 %o23 = %w61
    field %o24 = %w63
    field %o25 = %w54
    u32 %o26 = %w55
    field %o27 = %w56
    u32 %o28 = %w57
    field %o29 = %w58
    field %o30 = %w59
    field %o1(BN) = %w123
Transition: -> %w123

Block 13:
Func: main, Scope: 8
Exec Bound: 1, While Loop: true, Num VM Ops: 3
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: u32
    %i9: u32
    %i10: field
    %i11: u32
    %i12: u32
    %i13: u32
    %i14: field
    %i15: field
    %i16: u32
    %i17: field
    %i18: field
    %i19: u32
    %i20: u32
    %i21: field
    %i22: u32
    %i23: u32
    %i24: field
    %i25: field
    %i26: field
    %i27: u32
    %i28: field
    %i29: u32
    %i30: field
    %i31: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: field
    %o9: u32
    %o10: field
    %o11: u32
    %o12: field
    %o13: field
    %o14: u32
    %o15: field
    %o16: u32
    %o17: u32
    %o18: u32
    %o19: u32
    %o20: field
    %o21: field
    %o22: u32
    %o23: field
    %o24: field
    %o25: field
    %o26: field
    %o27: field
    %o28: u32
    %o29: u32
    %o30: field
    %o31: u32
    %o32: u32
    %o33: field
    %o34: field
    %o35: field
    %o36: u32
    %o37: field
    %o38: u32
    %o39: field
    %o40: field
Instructions:
    assert %i1(BN) == 13 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    u32 %w69 = %i8
    u32 %w60 = %i9
    field %w133 = %i10
    u32 %w134 = %i11
    u32 %w64 = %i12
    u32 %w62 = %i13
    field %w72 = %i14
    field %w73 = %i15
    u32 %w61 = %i16
    field %w91 = %i17
    field %w75 = %i18
    u32 %w78 = %i19
    u32 %w99 = %i20
    field %w135 = %i21
    u32 %w136 = %i22
    u32 %w137 = %i23
    field %w138 = %i24
    field %w63 = %i25
    field %w54 = %i26
    u32 %w55 = %i27
    field %w56 = %i28
    u32 %w57 = %i29
    field %w58 = %i30
    field %w59 = %i31
    field %w139 = %w138[%w134]
    field %w140 = %w139
    field %w141 = %w135[%w134]
    field %w142 = %w141
    u32 %w143 = %w136 + 1 <U32>
    field %w144 = %w140
    field %w145 = %w142
    u32 %w146 = %w143
    field[%w146] %w147
    field %w148 = %w145
    %w147[0 <Field>] = %w145 <field>
    field %w149 = 0 <Field>
    field %w150 = 1 <Field>
    u32 %w151 = 1 <U32>
    field %o4(AS) = %w2(AS)
    field %o6(SP) = %w4(SP)
    field %o5(RP) = %w3(RP)
    field %o3(TS) = %w1(TS)
    field %o7(BP) = %w68
    field %o8 = %w150
    u32 %o9 = %w151
    field %o10 = %w145
    u32 %o11 = %w69
    field %o12 = %w147
    field %o13 = %w140
    u32 %o14 = %w60
    field %o15 = %w133
    u32 %o16 = %w134
    u32 %o17 = %w64
    u32 %o18 = %w146
    u32 %o19 = %w62
    field %o20 = %w72
    field %o21 = %w73
    u32 %o22 = %w61
    field %o23 = %w91
    field %o24 = %w144
    field %o25 = %w148
    field %o26 = %w75
    field %o27 = %w149
    u32 %o28 = %w78
    u32 %o29 = %w99
    field %o30 = %w135
    u32 %o31 = %w136
    u32 %o32 = %w137
    field %o33 = %w138
    field %o34 = %w63
    field %o35 = %w54
    u32 %o36 = %w55
    field %o37 = %w56
    u32 %o38 = %w57
    field %o39 = %w58
    field %o40 = %w59
    field %o1(BN) = %w151 != %w146 ? 15 <Field> : 16 <Field>
Transition:
    %w151 != %w146 ? -> 15 : -> 16

Block 14:
Func: main, Scope: 7
Exec Bound: 1, While Loop: false, Num VM Ops: 1
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: u32
    %i9: u32
    %i10: field
    %i12: u32
    %i13: u32
    %i14: field
    %i15: field
    %i16: u32
    %i17: field
    %i18: field
    %i19: u32
    %i20: u32
    %i21: field
    %i23: u32
    %i25: field
    %i26: field
    %i27: u32
    %i28: field
    %i29: u32
    %i30: field
    %i31: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o7(BP): field
    %o8: field
    %o5(RP): field
    %o3(TS): field
    %o9: field
    %o10: u32
    %o11: u32
    %o12: u32
    %o13: u32
    %o14: field
    %o15: field
    %o16: u32
    %o17: field
    %o18: field
    %o19: u32
    %o20: u32
    %o21: field
    %o22: field
    %o23: u32
    %o24: field
    %o25: u32
    %o26: field
    %o27: field
Instructions:
    assert %i1(BN) == 14 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    u32 %w69 = %i8
    u32 %w60 = %i9
    field %w133 = %i10
    u32 %w64 = %i12
    u32 %w62 = %i13
    field %w72 = %i14
    field %w73 = %i15
    u32 %w61 = %i16
    field %w91 = %i17
    field %w75 = %i18
    u32 %w78 = %i19
    u32 %w99 = %i20
    field %w135 = %i21
    u32 %w137 = %i23
    field %w63 = %i25
    field %w54 = %i26
    u32 %w55 = %i27
    field %w56 = %i28
    u32 %w57 = %i29
    field %w58 = %i30
    field %w59 = %i31
    field %w152 = %w133[%w137]
    field %w153 = %w135
    field %w154 = %w152
    field %w155 = %w154
    field %w156 = %w153
    field %w157 = %w155
    field %w158 = %w156
    field %w159 = %w157
    field %w160 = %w158
    %w155 = %w159
    %w156 = %w160
    field %o4(AS) = %w2(AS)
    field %o6(SP) = %w4(SP)
    field %o7(BP) = %w155
    field %o8 = %w156
    field %o5(RP) = %w3(RP)
    field %o3(TS) = %w1(TS)
    field %o9 = %w68
    u32 %o10 = %w69
    u32 %o11 = %w60
    u32 %o12 = %w64
    u32 %o13 = %w62
    field %o14 = %w72
    field %o15 = %w73
    u32 %o16 = %w61
    field %o17 = %w91
    field %o18 = %w75
    u32 %o19 = %w78
    u32 %o20 = %w99
    field %o21 = %w63
    field %o22 = %w54
    u32 %o23 = %w55
    field %o24 = %w56
    u32 %o25 = %w57
    field %o26 = %w58
    field %o27 = %w59
    field %o1(BN) = 42 <Field>
Transition: -> 42

Block 15:
Func: main, Scope: 12
Exec Bound: 1, While Loop: true, Num VM Ops: 1
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: field
    %i9: u32
    %i10: field
    %i11: u32
    %i12: field
    %i13: field
    %i14: u32
    %i15: field
    %i16: u32
    %i17: u32
    %i18: u32
    %i19: u32
    %i20: field
    %i21: field
    %i22: u32
    %i23: field
    %i24: field
    %i25: field
    %i26: field
    %i27: field
    %i28: u32
    %i29: u32
    %i30: field
    %i31: u32
    %i32: u32
    %i33: field
    %i34: field
    %i35: field
    %i36: u32
    %i37: field
    %i38: u32
    %i39: field
    %i40: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: field
    %o9: u32
    %o10: field
    %o11: u32
    %o12: field
    %o13: field
    %o14: u32
    %o15: field
    %o16: u32
    %o17: u32
    %o18: u32
    %o19: u32
    %o20: field
    %o21: field
    %o22: u32
    %o23: field
    %o24: field
    %o25: field
    %o26: field
    %o27: field
    %o28: u32
    %o29: u32
    %o30: field
    %o31: u32
    %o32: u32
    %o33: field
    %o34: field
    %o35: field
    %o36: u32
    %o37: field
    %o38: u32
    %o39: field
    %o40: field
Instructions:
    assert %i1(BN) == 15 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    field %w150 = %i8
    u32 %w151 = %i9
    field %w145 = %i10
    u32 %w69 = %i11
    field %w147 = %i12
    field %w140 = %i13
    u32 %w60 = %i14
    field %w133 = %i15
    u32 %w134 = %i16
    u32 %w64 = %i17
    u32 %w146 = %i18
    u32 %w62 = %i19
    field %w72 = %i20
    field %w73 = %i21
    u32 %w61 = %i22
    field %w91 = %i23
    field %w144 = %i24
    field %w148 = %i25
    field %w75 = %i26
    field %w149 = %i27
    u32 %w78 = %i28
    u32 %w99 = %i29
    field %w135 = %i30
    u32 %w136 = %i31
    u32 %w137 = %i32
    field %w138 = %i33
    field %w63 = %i34
    field %w54 = %i35
    u32 %w55 = %i36
    field %w56 = %i37
    u32 %w57 = %i38
    field %w58 = %i39
    field %w59 = %i40
    field %w161 = %w145 - (F)%w151
    %w147[%w151] = %w161 <field>
    %w148 = %w148 * %w161
    %w150 = %w150 * (F)%w151
    %w151 = %w151 + 1 <U32>
    field %o4(AS) = %w2(AS)
    field %o6(SP) = %w4(SP)
    field %o5(RP) = %w3(RP)
    field %o3(TS) = %w1(TS)
    field %o7(BP) = %w68
    field %o8 = %w150
    u32 %o9 = %w151
    field %o10 = %w145
    u32 %o11 = %w69
    field %o12 = %w147
    field %o13 = %w140
    u32 %o14 = %w60
    field %o15 = %w133
    u32 %o16 = %w134
    u32 %o17 = %w64
    u32 %o18 = %w146
    u32 %o19 = %w62
    field %o20 = %w72
    field %o21 = %w73
    u32 %o22 = %w61
    field %o23 = %w91
    field %o24 = %w144
    field %o25 = %w148
    field %o26 = %w75
    field %o27 = %w149
    u32 %o28 = %w78
    u32 %o29 = %w99
    field %o30 = %w135
    u32 %o31 = %w136
    u32 %o32 = %w137
    field %o33 = %w138
    field %o34 = %w63
    field %o35 = %w54
    u32 %o36 = %w55
    field %o37 = %w56
    u32 %o38 = %w57
    field %o39 = %w58
    field %o40 = %w59
    field %o1(BN) = %w151 != %w146 ? 15 <Field> : 16 <Field>
Transition:
    %w151 != %w146 ? -> 15 : -> 16

Block 16:
Func: main, Scope: 11
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: field
    %i11: u32
    %i12: field
    %i13: field
    %i14: u32
    %i15: field
    %i16: u32
    %i17: u32
    %i18: u32
    %i19: u32
    %i20: field
    %i21: field
    %i22: u32
    %i23: field
    %i24: field
    %i25: field
    %i26: field
    %i27: field
    %i28: u32
    %i29: u32
    %i30: field
    %i31: u32
    %i32: u32
    %i33: field
    %i34: field
    %i35: field
    %i36: u32
    %i37: field
    %i38: u32
    %i39: field
    %i40: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: field
    %o9: field
    %o10: u32
    %o11: field
    %o12: field
    %o13: u32
    %o14: field
    %o15: u32
    %o16: u32
    %o17: u32
    %o18: u32
    %o19: u32
    %o20: field
    %o21: field
    %o22: u32
    %o23: field
    %o24: field
    %o25: field
    %o26: field
    %o27: field
    %o28: u32
    %o29: u32
    %o30: field
    %o31: u32
    %o32: u32
    %o33: field
    %o34: field
    %o35: field
    %o36: u32
    %o37: field
    %o38: u32
    %o39: field
    %o40: field
Instructions:
    assert %i1(BN) == 16 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    field %w150 = %i8
    u32 %w69 = %i11
    field %w147 = %i12
    field %w140 = %i13
    u32 %w60 = %i14
    field %w133 = %i15
    u32 %w134 = %i16
    u32 %w64 = %i17
    u32 %w146 = %i18
    u32 %w62 = %i19
    field %w72 = %i20
    field %w73 = %i21
    u32 %w61 = %i22
    field %w91 = %i23
    field %w144 = %i24
    field %w148 = %i25
    field %w75 = %i26
    field %w149 = %i27
    u32 %w78 = %i28
    u32 %w99 = %i29
    field %w135 = %i30
    u32 %w136 = %i31
    u32 %w137 = %i32
    field %w138 = %i33
    field %w63 = %i34
    field %w54 = %i35
    u32 %w55 = %i36
    field %w56 = %i37
    u32 %w57 = %i38
    field %w58 = %i39
    field %w59 = %i40
    field %w162 = 1 <Field>
    u32 %w163 = %w146
    field %o4(AS) = %w2(AS)
    field %o6(SP) = %w4(SP)
    field %o5(RP) = %w3(RP)
    field %o3(TS) = %w1(TS)
    field %o7(BP) = %w68
    field %o8 = %w162
    field %o9 = %w150
    u32 %o10 = %w69
    field %o11 = %w147
    field %o12 = %w140
    u32 %o13 = %w60
    field %o14 = %w133
    u32 %o15 = %w134
    u32 %o16 = %w64
    u32 %o17 = %w163
    u32 %o18 = %w146
    u32 %o19 = %w62
    field %o20 = %w72
    field %o21 = %w73
    u32 %o22 = %w61
    field %o23 = %w91
    field %o24 = %w144
    field %o25 = %w148
    field %o26 = %w75
    field %o27 = %w149
    u32 %o28 = %w78
    u32 %o29 = %w99
    field %o30 = %w135
    u32 %o31 = %w136
    u32 %o32 = %w137
    field %o33 = %w138
    field %o34 = %w63
    field %o35 = %w54
    u32 %o36 = %w55
    field %o37 = %w56
    u32 %o38 = %w57
    field %o39 = %w58
    field %o40 = %w59
    field %o1(BN) = %w163 > 0 <U32> ? 17 <Field> : 18 <Field>
Transition:
    %w163 > 0 <U32> ? -> 17 : -> 18

Block 17:
Func: main, Scope: 11
Exec Bound: 1, While Loop: true, Num VM Ops: 2
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: field
    %i9: field
    %i10: u32
    %i11: field
    %i12: field
    %i13: u32
    %i14: field
    %i15: u32
    %i16: u32
    %i17: u32
    %i18: u32
    %i19: u32
    %i20: field
    %i21: field
    %i22: u32
    %i23: field
    %i24: field
    %i25: field
    %i26: field
    %i27: field
    %i28: u32
    %i29: u32
    %i30: field
    %i31: u32
    %i32: u32
    %i33: field
    %i34: field
    %i35: field
    %i36: u32
    %i37: field
    %i38: u32
    %i39: field
    %i40: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: field
    %o9: field
    %o10: u32
    %o11: field
    %o12: field
    %o13: u32
    %o14: field
    %o15: u32
    %o16: u32
    %o17: u32
    %o18: u32
    %o19: u32
    %o20: field
    %o21: field
    %o22: u32
    %o23: field
    %o24: field
    %o25: field
    %o26: field
    %o27: field
    %o28: u32
    %o29: u32
    %o30: field
    %o31: u32
    %o32: u32
    %o33: field
    %o34: field
    %o35: field
    %o36: u32
    %o37: field
    %o38: u32
    %o39: field
    %o40: field
Instructions:
    assert %i1(BN) == 17 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    field %w162 = %i8
    field %w150 = %i9
    u32 %w69 = %i10
    field %w147 = %i11
    field %w140 = %i12
    u32 %w60 = %i13
    field %w133 = %i14
    u32 %w134 = %i15
    u32 %w64 = %i16
    u32 %w163 = %i17
    u32 %w146 = %i18
    u32 %w62 = %i19
    field %w72 = %i20
    field %w73 = %i21
    u32 %w61 = %i22
    field %w91 = %i23
    field %w144 = %i24
    field %w148 = %i25
    field %w75 = %i26
    field %w149 = %i27
    u32 %w78 = %i28
    u32 %w99 = %i29
    field %w135 = %i30
    u32 %w136 = %i31
    u32 %w137 = %i32
    field %w138 = %i33
    field %w63 = %i34
    field %w54 = %i35
    u32 %w55 = %i36
    field %w56 = %i37
    u32 %w57 = %i38
    field %w58 = %i39
    field %w59 = %i40
    u32 %w164 = %w163 - 1 <U32>
    field %w165 = %w144[%w164]
    field %w166 = %w147[%w164]
    %w149 = %w149 + %w165 * %w148 * %w162 / %w150 * %w166
    if %w164 != 0 <U32>:
        %w150 = -1 <Field> * %w150 * (F)%w146 - %w164
        %w162 = %w162 * (F)%w164
    %w163 = %w163 - 1 <U32>
    field %o4(AS) = %w2(AS)
    field %o6(SP) = %w4(SP)
    field %o5(RP) = %w3(RP)
    field %o3(TS) = %w1(TS)
    field %o7(BP) = %w68
    field %o8 = %w162
    field %o9 = %w150
    u32 %o10 = %w69
    field %o11 = %w147
    field %o12 = %w140
    u32 %o13 = %w60
    field %o14 = %w133
    u32 %o15 = %w134
    u32 %o16 = %w64
    u32 %o17 = %w163
    u32 %o18 = %w146
    u32 %o19 = %w62
    field %o20 = %w72
    field %o21 = %w73
    u32 %o22 = %w61
    field %o23 = %w91
    field %o24 = %w144
    field %o25 = %w148
    field %o26 = %w75
    field %o27 = %w149
    u32 %o28 = %w78
    u32 %o29 = %w99
    field %o30 = %w135
    u32 %o31 = %w136
    u32 %o32 = %w137
    field %o33 = %w138
    field %o34 = %w63
    field %o35 = %w54
    u32 %o36 = %w55
    field %o37 = %w56
    u32 %o38 = %w57
    field %o39 = %w58
    field %o40 = %w59
    field %o1(BN) = %w163 > 0 <U32> ? 17 <Field> : 18 <Field>
Transition:
    %w163 > 0 <U32> ? -> 17 : -> 18

Block 18:
Func: main, Scope: 10
Exec Bound: 1, While Loop: false, Num VM Ops: 4
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i10: u32
    %i12: field
    %i13: u32
    %i14: field
    %i15: u32
    %i16: u32
    %i19: u32
    %i20: field
    %i21: field
    %i22: u32
    %i23: field
    %i26: field
    %i27: field
    %i28: u32
    %i29: u32
    %i30: field
    %i31: u32
    %i32: u32
    %i33: field
    %i34: field
    %i35: field
    %i36: u32
    %i37: field
    %i38: u32
    %i39: field
    %i40: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: u32
    %o9: u32
    %o10: field
    %o11: u32
    %o12: u32
    %o13: u32
    %o14: field
    %o15: field
    %o16: u32
    %o17: field
    %o18: field
    %o19: u32
    %o20: u32
    %o21: field
    %o22: u32
    %o23: u32
    %o24: field
    %o25: field
    %o26: field
    %o27: u32
    %o28: field
    %o29: u32
    %o30: field
    %o31: field
Instructions:
    assert %i1(BN) == 18 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    u32 %w69 = %i10
    field %w140 = %i12
    u32 %w60 = %i13
    field %w133 = %i14
    u32 %w134 = %i15
    u32 %w64 = %i16
    u32 %w62 = %i19
    field %w72 = %i20
    field %w73 = %i21
    u32 %w61 = %i22
    field %w91 = %i23
    field %w75 = %i26
    field %w149 = %i27
    u32 %w78 = %i28
    u32 %w99 = %i29
    field %w135 = %i30
    u32 %w136 = %i31
    u32 %w137 = %i32
    field %w138 = %i33
    field %w63 = %i34
    field %w54 = %i35
    u32 %w55 = %i36
    field %w56 = %i37
    u32 %w57 = %i38
    field %w58 = %i39
    field %w59 = %i40
    field %w84 = %w149
    field %w167 = %w84
    %w133[%w134 + 1 <U32>] = %w167 <field>
    field %w141 = %w133[%w134]
    field %w168 = %w141
    field %w141 = %w140[0 <Field>]
    field %w169 = %w140[1 <Field>]
    assert %w141 + %w169 == %w168
    %w134 = %w134 + 1 <U32>
    field %o4(AS) = %w2(AS)
    field %o6(SP) = %w4(SP)
    field %o5(RP) = %w3(RP)
    field %o3(TS) = %w1(TS)
    field %o7(BP) = %w68
    u32 %o8 = %w69
    u32 %o9 = %w60
    field %o10 = %w133
    u32 %o11 = %w134
    u32 %o12 = %w64
    u32 %o13 = %w62
    field %o14 = %w72
    field %o15 = %w73
    u32 %o16 = %w61
    field %o17 = %w91
    field %o18 = %w75
    u32 %o19 = %w78
    u32 %o20 = %w99
    field %o21 = %w135
    u32 %o22 = %w136
    u32 %o23 = %w137
    field %o24 = %w138
    field %o25 = %w63
    field %o26 = %w54
    u32 %o27 = %w55
    field %o28 = %w56
    u32 %o29 = %w57
    field %o30 = %w58
    field %o31 = %w59
    field %o1(BN) = %w134 != %w137 ? 13 <Field> : 14 <Field>
Transition:
    %w134 != %w137 ? -> 13 : -> 14

Block 19:
Func: main, Scope: 6
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i10: field
    %i11: u32
    %i12: u32
    %i13: u32
    %i14: u32
    %i15: field
    %i16: field
    %i17: u32
    %i18: field
    %i19: field
    %i21: u32
    %i22: u32
    %i23: field
    %i25: field
    %i26: u32
    %i27: field
    %i28: u32
    %i29: field
    %i30: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o7(BP): field
    %o8: field
    %o5(RP): field
    %o3(TS): field
    %o9: field
    %o10: u32
    %o11: u32
    %o12: u32
    %o13: u32
    %o14: field
    %o15: field
    %o16: u32
    %o17: field
    %o18: field
    %o19: u32
    %o20: u32
    %o21: field
    %o22: field
    %o23: u32
    %o24: field
    %o25: u32
    %o26: field
    %o27: field
Instructions:
    assert %i1(BN) == 19 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    field %w170 = %i10
    u32 %w69 = %i11
    u32 %w60 = %i12
    u32 %w64 = %i13
    u32 %w62 = %i14
    field %w72 = %i15
    field %w73 = %i16
    u32 %w61 = %i17
    field %w91 = %i18
    field %w75 = %i19
    u32 %w78 = %i21
    u32 %w99 = %i22
    field %w63 = %i23
    field %w54 = %i25
    u32 %w55 = %i26
    field %w56 = %i27
    u32 %w57 = %i28
    field %w58 = %i29
    field %w59 = %i30
    field[0 <U32>] %w171
    field %w172 = %w171
    field %w173 = %w170
    field %w155 = %w173
    field %w156 = %w172
    field %o4(AS) = %w2(AS)
    field %o6(SP) = %w4(SP)
    field %o7(BP) = %w155
    field %o8 = %w156
    field %o5(RP) = %w3(RP)
    field %o3(TS) = %w1(TS)
    field %o9 = %w68
    u32 %o10 = %w69
    u32 %o11 = %w60
    u32 %o12 = %w64
    u32 %o13 = %w62
    field %o14 = %w72
    field %o15 = %w73
    u32 %o16 = %w61
    field %o17 = %w91
    field %o18 = %w75
    u32 %o19 = %w78
    u32 %o20 = %w99
    field %o21 = %w63
    field %o22 = %w54
    u32 %o23 = %w55
    field %o24 = %w56
    u32 %o25 = %w57
    field %o26 = %w58
    field %o27 = %w59
    field %o1(BN) = 42 <Field>
Transition: -> 42

Block 20:
Func: main, Scope: 6
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: u32
    %i9: u32
    %i10: field
    %i11: u32
    %i12: u32
    %i13: u32
    %i14: u32
    %i15: field
    %i16: field
    %i17: u32
    %i18: field
    %i19: field
    %i20: field
    %i21: u32
    %i22: u32
    %i23: field
    %i24: field
    %i25: field
    %i26: u32
    %i27: field
    %i28: u32
    %i29: field
    %i30: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: u32
    %o9: u32
    %o10: field
    %o11: u32
    %o12: u32
    %o13: u32
    %o14: u32
    %o15: field
    %o16: field
    %o17: u32
    %o18: field
    %o19: field
    %o20: field
    %o21: u32
    %o22: field
    %o23: u32
    %o24: field
    %o25: field
    %o26: field
    %o27: u32
    %o28: field
    %o29: u32
    %o30: field
    %o31: field
Instructions:
    assert %i1(BN) == 20 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    u32 %w174 = %i8
    u32 %w175 = %i9
    field %w170 = %i10
    u32 %w69 = %i11
    u32 %w60 = %i12
    u32 %w64 = %i13
    u32 %w62 = %i14
    field %w72 = %i15
    field %w73 = %i16
    u32 %w61 = %i17
    field %w91 = %i18
    field %w75 = %i19
    field %w176 = %i20
    u32 %w78 = %i21
    u32 %w99 = %i22
    field %w63 = %i23
    field %w177 = %i24
    field %w54 = %i25
    u32 %w55 = %i26
    field %w56 = %i27
    u32 %w57 = %i28
    field %w58 = %i29
    field %w59 = %i30
    field %w178 = %w177
    field %w179 = 21 <Field>
    field %o4(AS) = %w2(AS)
    field %o6(SP) = %w4(SP)
    field %o5(RP) = %w3(RP)
    field %o3(TS) = %w1(TS)
    field %o7(BP) = %w68
    u32 %o8 = %w174
    u32 %o9 = %w175
    field %o10 = %w170
    u32 %o11 = %w69
    u32 %o12 = %w60
    u32 %o13 = %w64
    u32 %o14 = %w62
    field %o15 = %w72
    field %o16 = %w73
    u32 %o17 = %w61
    field %o18 = %w91
    field %o19 = %w75
    field %o20 = %w176
    u32 %o21 = %w78
    field %o22 = %w179
    u32 %o23 = %w99
    field %o24 = %w178
    field %o25 = %w63
    field %o26 = %w54
    u32 %o27 = %w55
    field %o28 = %w56
    u32 %o29 = %w57
    field %o30 = %w58
    field %o31 = %w59
    field %o1(BN) = 71 <Field>
Transition: -> 71

Block 21:
Func: main, Scope: 5
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i7(BP): field
    %i5(RP): field
    %i3(TS): field
    %i8: field
    %i9: u32
    %i10: u32
    %i11: field
    %i12: u32
    %i13: u32
    %i14: u32
    %i15: u32
    %i16: field
    %i17: field
    %i18: u32
    %i19: field
    %i20: field
    %i21: field
    %i22: u32
    %i23: u32
    %i24: field
    %i25: field
    %i26: u32
    %i27: field
    %i28: u32
    %i29: field
    %i30: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: u32
    %o9: u32
    %o10: field
    %o11: u32
    %o12: u32
    %o13: u32
    %o14: u32
    %o15: field
    %o16: field
    %o17: u32
    %o18: field
    %o19: field
    %o20: field
    %o21: u32
    %o22: field
    %o23: u32
    %o24: field
    %o25: field
    %o26: field
    %o27: u32
    %o28: field
    %o29: u32
    %o30: field
    %o31: field
Instructions:
    assert %i1(BN) == 21 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w180 = %i7(BP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i8
    u32 %w174 = %i9
    u32 %w175 = %i10
    field %w170 = %i11
    u32 %w69 = %i12
    u32 %w60 = %i13
    u32 %w64 = %i14
    u32 %w62 = %i15
    field %w72 = %i16
    field %w73 = %i17
    u32 %w61 = %i18
    field %w91 = %i19
    field %w75 = %i20
    field %w176 = %i21
    u32 %w78 = %i22
    u32 %w99 = %i23
    field %w63 = %i24
    field %w54 = %i25
    u32 %w55 = %i26
    field %w56 = %i27
    u32 %w57 = %i28
    field %w58 = %i29
    field %w59 = %i30
    field %w181 = %w180
    field %w177 = %w181
    field %w178 = %w177
    field %w179 = 22 <Field>
    field %o4(AS) = %w2(AS)
    field %o6(SP) = %w4(SP)
    field %o5(RP) = %w3(RP)
    field %o3(TS) = %w1(TS)
    field %o7(BP) = %w68
    u32 %o8 = %w174
    u32 %o9 = %w175
    field %o10 = %w170
    u32 %o11 = %w69
    u32 %o12 = %w60
    u32 %o13 = %w64
    u32 %o14 = %w62
    field %o15 = %w72
    field %o16 = %w73
    u32 %o17 = %w61
    field %o18 = %w91
    field %o19 = %w75
    field %o20 = %w176
    u32 %o21 = %w78
    field %o22 = %w179
    u32 %o23 = %w99
    field %o24 = %w178
    field %o25 = %w63
    field %o26 = %w54
    u32 %o27 = %w55
    field %o28 = %w56
    u32 %o29 = %w57
    field %o30 = %w58
    field %o31 = %w59
    field %o1(BN) = 71 <Field>
Transition: -> 71

Block 22:
Func: main, Scope: 5
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i7(BP): field
    %i5(RP): field
    %i3(TS): field
    %i8: field
    %i9: u32
    %i10: u32
    %i11: field
    %i12: u32
    %i13: u32
    %i14: u32
    %i15: u32
    %i16: field
    %i17: field
    %i18: u32
    %i19: field
    %i20: field
    %i21: field
    %i22: u32
    %i23: u32
    %i24: field
    %i25: field
    %i26: u32
    %i27: field
    %i28: u32
    %i29: field
    %i30: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: u32
    %o9: u32
    %o10: field
    %o11: u32
    %o12: u32
    %o13: u32
    %o14: u32
    %o15: u32
    %o16: field
    %o17: field
    %o18: u32
    %o19: field
    %o20: field
    %o21: field
    %o22: u32
    %o23: u32
    %o24: field
    %o25: field
    %o26: field
    %o27: u32
    %o28: field
    %o29: u32
    %o30: field
    %o31: field
    %o32: field
    %o33: bool
    %o34: u32
    %o35: u32
    %o36: field
    %o37: u32
Instructions:
    assert %i1(BN) == 22 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w180 = %i7(BP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i8
    u32 %w174 = %i9
    u32 %w175 = %i10
    field %w170 = %i11
    u32 %w69 = %i12
    u32 %w60 = %i13
    u32 %w64 = %i14
    u32 %w62 = %i15
    field %w72 = %i16
    field %w73 = %i17
    u32 %w61 = %i18
    field %w91 = %i19
    field %w75 = %i20
    field %w176 = %i21
    u32 %w78 = %i22
    u32 %w99 = %i23
    field %w63 = %i24
    field %w54 = %i25
    u32 %w55 = %i26
    field %w56 = %i27
    u32 %w57 = %i28
    field %w58 = %i29
    field %w59 = %i30
    field %w181 = %w180
    field %w177 = %w181
    field[%w175] %w182
    field[0][%w175] %w183
    u32 %w184 = 1 <U32>
    u32 %w185 = %w175
    u32 %w186 = %w174
    bool %w187 = false
    field %w188 = %w183
    field %w189 = %w182
    field %w190 = %w189
    bool %w191 = %w187
    u32 %w192 = %w186
    u32 %w193 = %w185
    field %w194 = %w188
    u32 %w195 = %w184
    u32 %w196 = 0 <U32>
    field %o4(AS) = %w2(AS)
    field %o6(SP) = %w4(SP)
    field %o5(RP) = %w3(RP)
    field %o3(TS) = %w1(TS)
    field %o7(BP) = %w68
    u32 %o8 = %w174
    u32 %o9 = %w175
    field %o10 = %w170
    u32 %o11 = %w69
    u32 %o12 = %w60
    u32 %o13 = %w196
    u32 %o14 = %w64
    u32 %o15 = %w62
    field %o16 = %w72
    field %o17 = %w73
    u32 %o18 = %w61
    field %o19 = %w91
    field %o20 = %w75
    field %o21 = %w176
    u32 %o22 = %w78
    u32 %o23 = %w99
    field %o24 = %w63
    field %o25 = %w177
    field %o26 = %w54
    u32 %o27 = %w55
    field %o28 = %w56
    u32 %o29 = %w57
    field %o30 = %w58
    field %o31 = %w59
    field %o32 = %w190
    bool %o33 = %w191
    u32 %o34 = %w192
    u32 %o35 = %w193
    field %o36 = %w194
    u32 %o37 = %w195
    field %o1(BN) = %w196 != %w175 ? 23 <Field> : 27 <Field>
Transition:
    %w196 != %w175 ? -> 23 : -> 27

Block 23:
Func: main, Scope: 7
Exec Bound: 1, While Loop: true, Num VM Ops: 1
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: u32
    %i9: u32
    %i10: field
    %i11: u32
    %i12: u32
    %i13: u32
    %i14: u32
    %i15: u32
    %i16: field
    %i17: field
    %i18: u32
    %i19: field
    %i20: field
    %i21: field
    %i22: u32
    %i23: u32
    %i24: field
    %i25: field
    %i26: field
    %i27: u32
    %i28: field
    %i29: u32
    %i30: field
    %i31: field
    %i32: field
    %i33: bool
    %i34: u32
    %i35: u32
    %i36: field
    %i37: u32
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: u32
    %o9: u32
    %o10: field
    %o11: u32
    %o12: u32
    %o13: u32
    %o14: u32
    %o15: u32
    %o16: u32
    %o17: field
    %o18: field
    %o19: u32
    %o20: field
    %o21: field
    %o22: field
    %o23: field
    %o24: u32
    %o25: u32
    %o26: field
    %o27: field
    %o28: field
    %o29: u32
    %o30: field
    %o31: u32
    %o32: field
    %o33: field
    %o34: field
    %o35: bool
    %o36: u32
    %o37: u32
    %o38: field
    %o39: u32
Instructions:
    assert %i1(BN) == 23 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    u32 %w174 = %i8
    u32 %w175 = %i9
    field %w170 = %i10
    u32 %w69 = %i11
    u32 %w60 = %i12
    u32 %w196 = %i13
    u32 %w64 = %i14
    u32 %w62 = %i15
    field %w72 = %i16
    field %w73 = %i17
    u32 %w61 = %i18
    field %w91 = %i19
    field %w75 = %i20
    field %w176 = %i21
    u32 %w78 = %i22
    u32 %w99 = %i23
    field %w63 = %i24
    field %w177 = %i25
    field %w54 = %i26
    u32 %w55 = %i27
    field %w56 = %i28
    u32 %w57 = %i29
    field %w58 = %i30
    field %w59 = %i31
    field %w190 = %i32
    bool %w191 = %i33
    u32 %w192 = %i34
    u32 %w193 = %i35
    field %w194 = %i36
    u32 %w195 = %i37
    field %w197 = %w176[%w196]
    field %w198 = %w197
    u32 %w199 = 0 <U32>
    field %o4(AS) = %w2(AS)
    field %o6(SP) = %w4(SP)
    field %o5(RP) = %w3(RP)
    field %o3(TS) = %w1(TS)
    field %o7(BP) = %w68
    u32 %o8 = %w174
    u32 %o9 = %w175
    field %o10 = %w170
    u32 %o11 = %w69
    u32 %o12 = %w60
    u32 %o13 = %w196
    u32 %o14 = %w64
    u32 %o15 = %w199
    u32 %o16 = %w62
    field %o17 = %w72
    field %o18 = %w73
    u32 %o19 = %w61
    field %o20 = %w91
    field %o21 = %w75
    field %o22 = %w176
    field %o23 = %w198
    u32 %o24 = %w78
    u32 %o25 = %w99
    field %o26 = %w63
    field %o27 = %w177
    field %o28 = %w54
    u32 %o29 = %w55
    field %o30 = %w56
    u32 %o31 = %w57
    field %o32 = %w58
    field %o33 = %w59
    field %o34 = %w190
    bool %o35 = %w191
    u32 %o36 = %w192
    u32 %o37 = %w193
    field %o38 = %w194
    u32 %o39 = %w195
    field %o1(BN) = %w199 != %w174 + 1 <U32> ? 24 <Field> : 26 <Field>
Transition:
    %w199 != %w174 + 1 <U32> ? -> 24 : -> 26

Block 24:
Func: main, Scope: 10
Exec Bound: 1, While Loop: true, Num VM Ops: 1
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: u32
    %i9: u32
    %i10: field
    %i11: u32
    %i12: u32
    %i13: u32
    %i14: u32
    %i15: u32
    %i16: u32
    %i17: field
    %i18: field
    %i19: u32
    %i20: field
    %i21: field
    %i22: field
    %i23: field
    %i24: u32
    %i25: u32
    %i26: field
    %i27: field
    %i28: field
    %i29: u32
    %i30: field
    %i31: u32
    %i32: field
    %i33: field
    %i34: field
    %i35: bool
    %i36: u32
    %i37: u32
    %i38: field
    %i39: u32
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o21: u32
    %o10: u32
    %o23: u32
    %o11: u32
    %o24: field
    %o25: field
    %o12: u32
    %o26: field
    %o27: field
    %o28: field
    %o29: field
    %o31: u32
    %o13: field
    %o32: u32
    %o14: field
    %o34: field
    %o15: field
    %o16: u32
    %o17: field
    %o18: u32
    %o19: field
    %o20: field
    %o35: field
    %o36: bool
    %o37: u32
    %o38: u32
    %o39: field
    %o40: u32
Instructions:
    assert %i1(BN) == 24 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    u32 %w174 = %i8
    u32 %w175 = %i9
    field %w170 = %i10
    u32 %w69 = %i11
    u32 %w60 = %i12
    u32 %w196 = %i13
    u32 %w64 = %i14
    u32 %w199 = %i15
    u32 %w62 = %i16
    field %w72 = %i17
    field %w73 = %i18
    u32 %w61 = %i19
    field %w91 = %i20
    field %w75 = %i21
    field %w176 = %i22
    field %w198 = %i23
    u32 %w78 = %i24
    u32 %w99 = %i25
    field %w63 = %i26
    field %w177 = %i27
    field %w54 = %i28
    u32 %w55 = %i29
    field %w56 = %i30
    u32 %w57 = %i31
    field %w58 = %i32
    field %w59 = %i33
    field %w190 = %i34
    bool %w191 = %i35
    u32 %w192 = %i36
    u32 %w193 = %i37
    field %w194 = %i38
    u32 %w195 = %i39
    field %w66 = %w177
    %PHY[%SP + 0] = %w4(SP) <field>
    %w4(SP) = %w3(RP)
    %PHY[%SP + 1] = %w68 <field>
    %PHY[%SP + 2] = %w174 <u32>
    %PHY[%SP + 3] = %w175 <u32>
    %PHY[%SP + 4] = %w170 <field>
    %PHY[%SP + 5] = %w69 <u32>
    %PHY[%SP + 6] = %w60 <u32>
    field %w67 = 25 <Field>
    %w3(RP) = %w3(RP) + 7 <Field>
    field %o4(AS) = %w2(AS)
    field %o6(SP) = %w4(SP)
    field %o5(RP) = %w3(RP)
    field %o3(TS) = %w1(TS)
    u32 %o21 = %w196
    u32 %o10 = %w64
    u32 %o23 = %w199
    u32 %o11 = %w62
    field %o24 = %w72
    field %o25 = %w73
    u32 %o12 = %w61
    field %o26 = %w91
    field %o27 = %w75
    field %o28 = %w176
    field %o29 = %w198
    u32 %o31 = %w78
    field %o13 = %w67
    u32 %o32 = %w99
    field %o14 = %w66
    field %o34 = %w63
    field %o15 = %w54
    u32 %o16 = %w55
    field %o17 = %w56
    u32 %o18 = %w57
    field %o19 = %w58
    field %o20 = %w59
    field %o35 = %w190
    bool %o36 = %w191
    u32 %o37 = %w192
    u32 %o38 = %w193
    field %o39 = %w194
    u32 %o40 = %w195
    field %o1(BN) = 70 <Field>
Transition: -> 70

Block 25:
Func: main, Scope: 11
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i7(BP): field
    %i5(RP): field
    %i3(TS): field
    %i8: u32
    %i12: u32
    %i14: u32
    %i15: u32
    %i16: field
    %i17: field
    %i18: u32
    %i19: field
    %i20: field
    %i21: field
    %i22: field
    %i24: u32
    %i25: u32
    %i27: field
    %i28: field
    %i29: u32
    %i30: field
    %i31: u32
    %i32: field
    %i33: field
    %i34: field
    %i35: bool
    %i36: u32
    %i37: u32
    %i38: field
    %i39: u32
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: u32
    %o9: u32
    %o10: field
    %o11: u32
    %o12: u32
    %o13: u32
    %o14: u32
    %o15: u32
    %o16: u32
    %o17: field
    %o18: field
    %o19: u32
    %o20: field
    %o21: field
    %o22: field
    %o23: field
    %o24: u32
    %o25: u32
    %o26: field
    %o27: field
    %o28: field
    %o29: u32
    %o30: field
    %o31: u32
    %o32: field
    %o33: field
    %o34: field
    %o35: bool
    %o36: u32
    %o37: u32
    %o38: field
    %o39: u32
Instructions:
    assert %i1(BN) == 25 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w200 = %i7(BP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    u32 %w196 = %i8
    u32 %w64 = %i12
    u32 %w199 = %i14
    u32 %w62 = %i15
    field %w72 = %i16
    field %w73 = %i17
    u32 %w61 = %i18
    field %w91 = %i19
    field %w75 = %i20
    field %w176 = %i21
    field %w198 = %i22
    u32 %w78 = %i24
    u32 %w99 = %i25
    field %w63 = %i27
    field %w54 = %i28
    u32 %w55 = %i29
    field %w56 = %i30
    u32 %w57 = %i31
    field %w58 = %i32
    field %w59 = %i33
    field %w190 = %i34
    bool %w191 = %i35
    u32 %w192 = %i36
    u32 %w193 = %i37
    field %w194 = %i38
    u32 %w195 = %i39
    u32 %w60 = %PHY[%BP + 6]
    u32 %w69 = %PHY[%BP + 5]
    field %w170 = %PHY[%BP + 4]
    u32 %w175 = %PHY[%BP + 3]
    u32 %w174 = %PHY[%BP + 2]
    field %w68 = %PHY[%BP + 1]
    field %w4(SP) = %PHY[%BP + 0]
    field %w201 = %w200
    field %w177 = %w201
    %w199 = %w199 + 1 <U32>
    field %o4(AS) = %w2(AS)
    field %o6(SP) = %w4(SP)
    field %o5(RP) = %w3(RP)
    field %o3(TS) = %w1(TS)
    field %o7(BP) = %w68
    u32 %o8 = %w174
    u32 %o9 = %w175
    field %o10 = %w170
    u32 %o11 = %w69
    u32 %o12 = %w60
    u32 %o13 = %w196
    u32 %o14 = %w64
    u32 %o15 = %w199
    u32 %o16 = %w62
    field %o17 = %w72
    field %o18 = %w73
    u32 %o19 = %w61
    field %o20 = %w91
    field %o21 = %w75
    field %o22 = %w176
    field %o23 = %w198
    u32 %o24 = %w78
    u32 %o25 = %w99
    field %o26 = %w63
    field %o27 = %w177
    field %o28 = %w54
    u32 %o29 = %w55
    field %o30 = %w56
    u32 %o31 = %w57
    field %o32 = %w58
    field %o33 = %w59
    field %o34 = %w190
    bool %o35 = %w191
    u32 %o36 = %w192
    u32 %o37 = %w193
    field %o38 = %w194
    u32 %o39 = %w195
    field %o1(BN) = %w199 != %w174 + 1 <U32> ? 24 <Field> : 26 <Field>
Transition:
    %w199 != %w174 + 1 <U32> ? -> 24 : -> 26

Block 26:
Func: main, Scope: 9
Exec Bound: 1, While Loop: false, Num VM Ops: 2
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: u32
    %i9: u32
    %i10: field
    %i11: u32
    %i12: u32
    %i13: u32
    %i14: u32
    %i16: u32
    %i17: field
    %i18: field
    %i19: u32
    %i20: field
    %i21: field
    %i22: field
    %i23: field
    %i24: u32
    %i25: u32
    %i26: field
    %i27: field
    %i28: field
    %i29: u32
    %i30: field
    %i31: u32
    %i32: field
    %i33: field
    %i34: field
    %i35: bool
    %i36: u32
    %i37: u32
    %i38: field
    %i39: u32
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: u32
    %o9: u32
    %o10: field
    %o11: u32
    %o12: u32
    %o13: u32
    %o14: u32
    %o15: u32
    %o16: field
    %o17: field
    %o18: u32
    %o19: field
    %o20: field
    %o21: field
    %o22: u32
    %o23: u32
    %o24: field
    %o25: field
    %o26: field
    %o27: u32
    %o28: field
    %o29: u32
    %o30: field
    %o31: field
    %o32: field
    %o33: bool
    %o34: u32
    %o35: u32
    %o36: field
    %o37: u32
Instructions:
    assert %i1(BN) == 26 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    u32 %w174 = %i8
    u32 %w175 = %i9
    field %w170 = %i10
    u32 %w69 = %i11
    u32 %w60 = %i12
    u32 %w196 = %i13
    u32 %w64 = %i14
    u32 %w62 = %i16
    field %w72 = %i17
    field %w73 = %i18
    u32 %w61 = %i19
    field %w91 = %i20
    field %w75 = %i21
    field %w176 = %i22
    field %w198 = %i23
    u32 %w78 = %i24
    u32 %w99 = %i25
    field %w63 = %i26
    field %w177 = %i27
    field %w54 = %i28
    u32 %w55 = %i29
    field %w56 = %i30
    u32 %w57 = %i31
    field %w58 = %i32
    field %w59 = %i33
    field %w190 = %i34
    bool %w191 = %i35
    u32 %w192 = %i36
    u32 %w193 = %i37
    field %w194 = %i38
    u32 %w195 = %i39
    field %w202 = %w190
    bool %w203 = %w191
    u32 %w204 = %w192
    u32 %w205 = %w193
    field %w206 = %w194
    u32 %w207 = %w195
    field %w208 = %w198
    field %w209 = %w177
    assert !%w203
    field %w210 = %w209
    %w202[%w207 - 1 <U32>] = %w210 <field>
    %w206[%w207 - 1 <U32>] = %w208 <field>
    if %w207 == %w205:
        %w203 = true
    else:
        %w207 = %w207 + 1 <U32>
    field %w211 = %w202
    bool %w212 = %w203
    u32 %w213 = %w204
    u32 %w214 = %w205
    field %w215 = %w206
    u32 %w216 = %w207
    field %w217 = %w211
    bool %w218 = %w212
    u32 %w219 = %w213
    u32 %w220 = %w214
    field %w221 = %w215
    u32 %w222 = %w216
    %w190 = %w217
    %w191 = %w218
    %w192 = %w219
    %w193 = %w220
    %w194 = %w221
    %w195 = %w222
    %w196 = %w196 + 1 <U32>
    field %o4(AS) = %w2(AS)
    field %o6(SP) = %w4(SP)
    field %o5(RP) = %w3(RP)
    field %o3(TS) = %w1(TS)
    field %o7(BP) = %w68
    u32 %o8 = %w174
    u32 %o9 = %w175
    field %o10 = %w170
    u32 %o11 = %w69
    u32 %o12 = %w60
    u32 %o13 = %w196
    u32 %o14 = %w64
    u32 %o15 = %w62
    field %o16 = %w72
    field %o17 = %w73
    u32 %o18 = %w61
    field %o19 = %w91
    field %o20 = %w75
    field %o21 = %w176
    u32 %o22 = %w78
    u32 %o23 = %w99
    field %o24 = %w63
    field %o25 = %w177
    field %o26 = %w54
    u32 %o27 = %w55
    field %o28 = %w56
    u32 %o29 = %w57
    field %o30 = %w58
    field %o31 = %w59
    field %o32 = %w190
    bool %o33 = %w191
    u32 %o34 = %w192
    u32 %o35 = %w193
    field %o36 = %w194
    u32 %o37 = %w195
    field %o1(BN) = %w196 != %w175 ? 23 <Field> : 27 <Field>
Transition:
    %w196 != %w175 ? -> 23 : -> 27

Block 27:
Func: main, Scope: 6
Exec Bound: 1, While Loop: false, Num VM Ops: 1
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i10: field
    %i11: u32
    %i12: u32
    %i14: u32
    %i15: u32
    %i16: field
    %i17: field
    %i18: u32
    %i19: field
    %i20: field
    %i22: u32
    %i23: u32
    %i24: field
    %i26: field
    %i27: u32
    %i28: field
    %i29: u32
    %i30: field
    %i31: field
    %i32: field
    %i33: bool
    %i34: u32
    %i35: u32
    %i36: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: u32
    %o9: u32
    %o10: field
    %o11: u32
    %o12: u32
    %o13: u32
    %o14: field
    %o15: field
    %o16: u32
    %o17: field
    %o18: field
    %o19: u32
    %o20: u32
    %o21: field
    %o22: u32
    %o23: u32
    %o24: field
    %o25: field
    %o26: field
    %o27: u32
    %o28: field
    %o29: u32
    %o30: field
    %o31: field
Instructions:
    assert %i1(BN) == 27 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    field %w170 = %i10
    u32 %w69 = %i11
    u32 %w60 = %i12
    u32 %w64 = %i14
    u32 %w62 = %i15
    field %w72 = %i16
    field %w73 = %i17
    u32 %w61 = %i18
    field %w91 = %i19
    field %w75 = %i20
    u32 %w78 = %i22
    u32 %w99 = %i23
    field %w63 = %i24
    field %w54 = %i26
    u32 %w55 = %i27
    field %w56 = %i28
    u32 %w57 = %i29
    field %w58 = %i30
    field %w59 = %i31
    field %w190 = %i32
    bool %w191 = %i33
    u32 %w192 = %i34
    u32 %w193 = %i35
    field %w194 = %i36
    field %w135 = %w190
    bool %w223 = %w191
    u32 %w136 = %w192
    u32 %w137 = %w193
    field %w138 = %w194
    field %w224 = %w170
    assert %w223
    field[%w137 + 1 <U32>] %w133
    %w133[0 <Field>] = %w224 <field>
    u32 %w134 = 0 <U32>
    field %o4(AS) = %w2(AS)
    field %o6(SP) = %w4(SP)
    field %o5(RP) = %w3(RP)
    field %o3(TS) = %w1(TS)
    field %o7(BP) = %w68
    u32 %o8 = %w69
    u32 %o9 = %w60
    field %o10 = %w133
    u32 %o11 = %w134
    u32 %o12 = %w64
    u32 %o13 = %w62
    field %o14 = %w72
    field %o15 = %w73
    u32 %o16 = %w61
    field %o17 = %w91
    field %o18 = %w75
    u32 %o19 = %w78
    u32 %o20 = %w99
    field %o21 = %w135
    u32 %o22 = %w136
    u32 %o23 = %w137
    field %o24 = %w138
    field %o25 = %w63
    field %o26 = %w54
    u32 %o27 = %w55
    field %o28 = %w56
    u32 %o29 = %w57
    field %o30 = %w58
    field %o31 = %w59
    field %o1(BN) = %w134 != %w137 ? 13 <Field> : 14 <Field>
Transition:
    %w134 != %w137 ? -> 13 : -> 14

Block 28:
Func: main, Scope: 1
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i7(BP): field
    %i5(RP): field
    %i3(TS): field
    %i9: field
    %i10: u32
    %i11: field
    %i12: u32
    %i15: u32
    %i18: u32
    %i28: field
    %i29: u32
    %i30: field
    %i31: u32
    %i32: field
    %i33: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: field
    %o9: u32
    %o10: u32
    %o11: field
    %o12: u32
    %o13: field
    %o14: u32
    %o15: u32
    %o16: u32
    %o17: field
    %o18: field
    %o19: field
    %o20: u32
    %o21: field
    %o22: u32
    %o23: field
    %o24: field
Instructions:
    assert %i1(BN) == 28 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w200 = %i7(BP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w53 = %i9
    u32 %w65 = %i10
    field %w52 = %i11
    u32 %w64 = %i12
    u32 %w62 = %i15
    u32 %w61 = %i18
    field %w54 = %i28
    u32 %w55 = %i29
    field %w56 = %i30
    u32 %w57 = %i31
    field %w58 = %i32
    field %w59 = %i33
    u32 %w60 = %PHY[%BP + 1]
    field %w4(SP) = %PHY[%BP + 0]
    field %w225 = %w200
    field %w63 = %w225
    field %w226 = %w63
    field[%w64 + %w65 * 2 <U32>] %w68
    field %w227 = 1 <Field>
    u32 %w228 = 0 <U32>
    field %o4(AS) = %w2(AS)
    field %o6(SP) = %w4(SP)
    field %o5(RP) = %w3(RP)
    field %o3(TS) = %w1(TS)
    field %o7(BP) = %w226
    field %o8 = %w68
    u32 %o9 = %w60
    u32 %o10 = %w228
    field %o11 = %w53
    u32 %o12 = %w65
    field %o13 = %w52
    u32 %o14 = %w64
    u32 %o15 = %w62
    u32 %o16 = %w61
    field %o17 = %w227
    field %o18 = %w63
    field %o19 = %w54
    u32 %o20 = %w55
    field %o21 = %w56
    u32 %o22 = %w57
    field %o23 = %w58
    field %o24 = %w59
    field %o1(BN) = %w228 != %w64 + %w65 * 2 <U32> ? 29 <Field> : 30 <Field>
Transition:
    %w228 != %w64 + %w65 * 2 <U32> ? -> 29 : -> 30

Block 29:
Func: main, Scope: 3
Exec Bound: 1, While Loop: true, Num VM Ops: 1
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: field
    %i9: u32
    %i10: u32
    %i11: field
    %i12: u32
    %i13: field
    %i14: u32
    %i15: u32
    %i16: u32
    %i17: field
    %i18: field
    %i19: field
    %i20: u32
    %i21: field
    %i22: u32
    %i23: field
    %i24: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: field
    %o9: u32
    %o10: u32
    %o11: field
    %o12: u32
    %o13: field
    %o14: u32
    %o15: u32
    %o16: u32
    %o17: field
    %o18: field
    %o19: field
    %o20: u32
    %o21: field
    %o22: u32
    %o23: field
    %o24: field
Instructions:
    assert %i1(BN) == 29 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w226 = %i7(BP)
    field %w68 = %i8
    u32 %w60 = %i9
    u32 %w228 = %i10
    field %w53 = %i11
    u32 %w65 = %i12
    field %w52 = %i13
    u32 %w64 = %i14
    u32 %w62 = %i15
    u32 %w61 = %i16
    field %w227 = %i17
    field %w63 = %i18
    field %w54 = %i19
    u32 %w55 = %i20
    field %w56 = %i21
    u32 %w57 = %i22
    field %w58 = %i23
    field %w59 = %i24
    %w68[%w228] = %w227 <field>
    %w227 = %w227 * %w226
    %w228 = %w228 + 1 <U32>
    field %o4(AS) = %w2(AS)
    field %o6(SP) = %w4(SP)
    field %o5(RP) = %w3(RP)
    field %o3(TS) = %w1(TS)
    field %o7(BP) = %w226
    field %o8 = %w68
    u32 %o9 = %w60
    u32 %o10 = %w228
    field %o11 = %w53
    u32 %o12 = %w65
    field %o13 = %w52
    u32 %o14 = %w64
    u32 %o15 = %w62
    u32 %o16 = %w61
    field %o17 = %w227
    field %o18 = %w63
    field %o19 = %w54
    u32 %o20 = %w55
    field %o21 = %w56
    u32 %o22 = %w57
    field %o23 = %w58
    field %o24 = %w59
    field %o1(BN) = %w228 != %w64 + %w65 * 2 <U32> ? 29 <Field> : 30 <Field>
Transition:
    %w228 != %w64 + %w65 * 2 <U32> ? -> 29 : -> 30

Block 30:
Func: main, Scope: 2
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i8: field
    %i9: u32
    %i11: field
    %i12: u32
    %i13: field
    %i14: u32
    %i15: u32
    %i16: u32
    %i18: field
    %i19: field
    %i20: u32
    %i21: field
    %i22: u32
    %i23: field
    %i24: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: u32
    %o9: u32
    %o10: field
    %o11: u32
    %o12: field
    %o13: u32
    %o14: field
    %o15: u32
    %o16: u32
    %o17: field
    %o18: field
    %o19: u32
    %o20: field
    %o21: u32
    %o22: field
    %o23: field
Instructions:
    assert %i1(BN) == 30 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i8
    u32 %w60 = %i9
    field %w53 = %i11
    u32 %w65 = %i12
    field %w52 = %i13
    u32 %w64 = %i14
    u32 %w62 = %i15
    u32 %w61 = %i16
    field %w63 = %i18
    field %w54 = %i19
    u32 %w55 = %i20
    field %w56 = %i21
    u32 %w57 = %i22
    field %w58 = %i23
    field %w59 = %i24
    field[%w62] %w118
    u32 %w229 = 0 <U32>
    field %o4(AS) = %w2(AS)
    field %o6(SP) = %w4(SP)
    field %o5(RP) = %w3(RP)
    field %o3(TS) = %w1(TS)
    field %o7(BP) = %w68
    u32 %o8 = %w60
    u32 %o9 = %w229
    field %o10 = %w53
    u32 %o11 = %w65
    field %o12 = %w52
    u32 %o13 = %w64
    field %o14 = %w118
    u32 %o15 = %w62
    u32 %o16 = %w61
    field %o17 = %w63
    field %o18 = %w54
    u32 %o19 = %w55
    field %o20 = %w56
    u32 %o21 = %w57
    field %o22 = %w58
    field %o23 = %w59
    field %o1(BN) = %w229 != %w62 ? 31 <Field> : 33 <Field>
Transition:
    %w229 != %w62 ? -> 31 : -> 33

Block 31:
Func: main, Scope: 3
Exec Bound: 1, While Loop: true, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: u32
    %i9: u32
    %i10: field
    %i11: u32
    %i12: field
    %i13: u32
    %i14: field
    %i15: u32
    %i16: u32
    %i17: field
    %i18: field
    %i19: u32
    %i20: field
    %i21: u32
    %i22: field
    %i23: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: u32
    %o9: field
    %o10: u32
    %o22: field
    %o11: u32
    %o12: u32
    %o13: field
    %o14: field
    %o15: field
    %o16: u32
    %o17: field
    %o18: u32
    %o19: field
    %o20: field
Instructions:
    assert %i1(BN) == 31 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    u32 %w60 = %i8
    u32 %w229 = %i9
    field %w53 = %i10
    u32 %w65 = %i11
    field %w52 = %i12
    u32 %w64 = %i13
    field %w118 = %i14
    u32 %w62 = %i15
    u32 %w61 = %i16
    field %w63 = %i17
    field %w54 = %i18
    u32 %w55 = %i19
    field %w56 = %i20
    u32 %w57 = %i21
    field %w58 = %i22
    field %w59 = %i23
    field %w66 = %w63
    %PHY[%SP + 0] = %w4(SP) <field>
    %w4(SP) = %w3(RP)
    %PHY[%SP + 1] = %w68 <field>
    %PHY[%SP + 2] = %w60 <u32>
    %PHY[%SP + 3] = %w229 <u32>
    field %w67 = 32 <Field>
    %w3(RP) = %w3(RP) + 4 <Field>
    field %o4(AS) = %w2(AS)
    field %o6(SP) = %w4(SP)
    field %o5(RP) = %w3(RP)
    field %o3(TS) = %w1(TS)
    field %o7(BP) = %w53
    u32 %o8 = %w65
    field %o9 = %w52
    u32 %o10 = %w64
    field %o22 = %w118
    u32 %o11 = %w62
    u32 %o12 = %w61
    field %o13 = %w67
    field %o14 = %w66
    field %o15 = %w54
    u32 %o16 = %w55
    field %o17 = %w56
    u32 %o18 = %w57
    field %o19 = %w58
    field %o20 = %w59
    field %o1(BN) = 70 <Field>
Transition: -> 70

Block 32:
Func: main, Scope: 4
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i7(BP): field
    %i5(RP): field
    %i3(TS): field
    %i9: field
    %i10: u32
    %i11: field
    %i12: u32
    %i13: field
    %i15: u32
    %i18: u32
    %i28: field
    %i29: u32
    %i30: field
    %i31: u32
    %i32: field
    %i33: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: u32
    %o9: u32
    %o10: field
    %o11: u32
    %o12: field
    %o13: u32
    %o14: field
    %o15: u32
    %o16: u32
    %o17: field
    %o18: field
    %o19: u32
    %o20: field
    %o21: u32
    %o22: field
    %o23: field
Instructions:
    assert %i1(BN) == 32 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w200 = %i7(BP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w53 = %i9
    u32 %w65 = %i10
    field %w52 = %i11
    u32 %w64 = %i12
    field %w118 = %i13
    u32 %w62 = %i15
    u32 %w61 = %i18
    field %w54 = %i28
    u32 %w55 = %i29
    field %w56 = %i30
    u32 %w57 = %i31
    field %w58 = %i32
    field %w59 = %i33
    u32 %w229 = %PHY[%BP + 3]
    u32 %w60 = %PHY[%BP + 2]
    field %w68 = %PHY[%BP + 1]
    field %w4(SP) = %PHY[%BP + 0]
    field %w230 = %w200
    field %w63 = %w230
    %w229 = %w229 + 1 <U32>
    field %o4(AS) = %w2(AS)
    field %o6(SP) = %w4(SP)
    field %o5(RP) = %w3(RP)
    field %o3(TS) = %w1(TS)
    field %o7(BP) = %w68
    u32 %o8 = %w60
    u32 %o9 = %w229
    field %o10 = %w53
    u32 %o11 = %w65
    field %o12 = %w52
    u32 %o13 = %w64
    field %o14 = %w118
    u32 %o15 = %w62
    u32 %o16 = %w61
    field %o17 = %w63
    field %o18 = %w54
    u32 %o19 = %w55
    field %o20 = %w56
    u32 %o21 = %w57
    field %o22 = %w58
    field %o23 = %w59
    field %o1(BN) = %w229 != %w62 ? 31 <Field> : 33 <Field>
Transition:
    %w229 != %w62 ? -> 31 : -> 33

Block 33:
Func: main, Scope: 2
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: u32
    %i10: field
    %i11: u32
    %i12: field
    %i13: u32
    %i14: field
    %i15: u32
    %i16: u32
    %i17: field
    %i18: field
    %i19: u32
    %i20: field
    %i21: u32
    %i22: field
    %i23: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: u32
    %o9: u32
    %o10: field
    %o11: field
    %o12: u32
    %o13: field
    %o14: u32
    %o15: field
    %o16: u32
    %o17: u32
    %o18: field
    %o19: field
    %o20: u32
    %o21: field
    %o22: u32
    %o23: field
    %o24: field
Instructions:
    assert %i1(BN) == 33 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    u32 %w60 = %i8
    field %w53 = %i10
    u32 %w65 = %i11
    field %w52 = %i12
    u32 %w64 = %i13
    field %w118 = %i14
    u32 %w62 = %i15
    u32 %w61 = %i16
    field %w63 = %i17
    field %w54 = %i18
    u32 %w55 = %i19
    field %w56 = %i20
    u32 %w57 = %i21
    field %w58 = %i22
    field %w59 = %i23
    field %w117 = 0 <Field>
    u32 %w115 = 0 <U32>
    field %o4(AS) = %w2(AS)
    field %o6(SP) = %w4(SP)
    field %o5(RP) = %w3(RP)
    field %o3(TS) = %w1(TS)
    field %o7(BP) = %w68
    u32 %o8 = %w60
    u32 %o9 = %w115
    field %o10 = %w117
    field %o11 = %w53
    u32 %o12 = %w65
    field %o13 = %w52
    u32 %o14 = %w64
    field %o15 = %w118
    u32 %o16 = %w62
    u32 %o17 = %w61
    field %o18 = %w63
    field %o19 = %w54
    u32 %o20 = %w55
    field %o21 = %w56
    u32 %o22 = %w57
    field %o23 = %w58
    field %o24 = %w59
    field %o1(BN) = %w115 != %w64 ? 34 <Field> : 36 <Field>
Transition:
    %w115 != %w64 ? -> 34 : -> 36

Block 34:
Func: main, Scope: 3
Exec Bound: 1, While Loop: true, Num VM Ops: 2
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: u32
    %i9: u32
    %i10: field
    %i11: field
    %i12: u32
    %i13: field
    %i14: u32
    %i15: field
    %i16: u32
    %i17: u32
    %i18: field
    %i19: field
    %i20: u32
    %i21: field
    %i22: u32
    %i23: field
    %i24: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: field
    %o9: u32
    %o10: u32
    %o11: field
    %o12: field
    %o13: u32
    %o14: field
    %o15: u32
    %o16: field
    %o17: u32
    %o18: u32
    %o19: u32
    %o20: field
    %o21: u32
    %o22: field
    %o23: field
    %o24: field
    %o25: field
    %o26: u32
    %o27: field
    %o28: u32
    %o29: field
    %o30: field
Instructions:
    assert %i1(BN) == 34 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    u32 %w60 = %i8
    u32 %w115 = %i9
    field %w117 = %i10
    field %w53 = %i11
    u32 %w65 = %i12
    field %w52 = %i13
    u32 %w64 = %i14
    field %w118 = %i15
    u32 %w62 = %i16
    u32 %w61 = %i17
    field %w63 = %i18
    field %w54 = %i19
    u32 %w55 = %i20
    field %w56 = %i21
    u32 %w57 = %i22
    field %w58 = %i23
    field %w59 = %i24
    field %w231 = %w52[%w115]
    field %w232 = %w231
    field %w233 = %w68[%w115]
    field %w112 = %w233
    field %w124 = %w232
    u32 %w120 = %w61
    field %w121 = %w118
    u32 %w122 = %w62
    field %w123 = 35 <Field>
    field %o4(AS) = %w2(AS)
    field %o6(SP) = %w4(SP)
    field %o5(RP) = %w3(RP)
    field %o3(TS) = %w1(TS)
    field %o7(BP) = %w112
    field %o8 = %w68
    u32 %o9 = %w60
    u32 %o10 = %w115
    field %o11 = %w117
    field %o12 = %w53
    u32 %o13 = %w65
    field %o14 = %w52
    u32 %o15 = %w64
    field %o16 = %w118
    u32 %o17 = %w62
    u32 %o18 = %w120
    u32 %o19 = %w61
    field %o20 = %w121
    u32 %o21 = %w122
    field %o22 = %w123
    field %o23 = %w124
    field %o24 = %w63
    field %o25 = %w54
    u32 %o26 = %w55
    field %o27 = %w56
    u32 %o28 = %w57
    field %o29 = %w58
    field %o30 = %w59
    field %o1(BN) = 8 <Field>
Transition: -> 8

Block 35:
Func: main, Scope: 4
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i2(RET): field
    %i5(RP): field
    %i3(TS): field
    %i8: field
    %i11: field
    %i12: u32
    %i13: u32
    %i15: field
    %i16: field
    %i17: u32
    %i18: field
    %i19: u32
    %i20: field
    %i21: u32
    %i23: u32
    %i24: field
    %i25: field
    %i26: u32
    %i27: field
    %i28: u32
    %i29: field
    %i30: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: u32
    %o9: u32
    %o10: field
    %o11: field
    %o12: u32
    %o13: field
    %o14: u32
    %o15: field
    %o16: u32
    %o17: u32
    %o18: field
    %o19: field
    %o20: u32
    %o21: field
    %o22: u32
    %o23: field
    %o24: field
Instructions:
    assert %i1(BN) == 35 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w132 = %i2(RET)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w112 = %i8
    field %w68 = %i11
    u32 %w60 = %i12
    u32 %w115 = %i13
    field %w117 = %i15
    field %w53 = %i16
    u32 %w65 = %i17
    field %w52 = %i18
    u32 %w64 = %i19
    field %w118 = %i20
    u32 %w62 = %i21
    u32 %w61 = %i23
    field %w63 = %i24
    field %w54 = %i25
    u32 %w55 = %i26
    field %w56 = %i27
    u32 %w57 = %i28
    field %w58 = %i29
    field %w59 = %i30
    field %w234 = %w132
    %w117 = %w117 + %w234 * %w112
    %w115 = %w115 + 1 <U32>
    field %o4(AS) = %w2(AS)
    field %o6(SP) = %w4(SP)
    field %o5(RP) = %w3(RP)
    field %o3(TS) = %w1(TS)
    field %o7(BP) = %w68
    u32 %o8 = %w60
    u32 %o9 = %w115
    field %o10 = %w117
    field %o11 = %w53
    u32 %o12 = %w65
    field %o13 = %w52
    u32 %o14 = %w64
    field %o15 = %w118
    u32 %o16 = %w62
    u32 %o17 = %w61
    field %o18 = %w63
    field %o19 = %w54
    u32 %o20 = %w55
    field %o21 = %w56
    u32 %o22 = %w57
    field %o23 = %w58
    field %o24 = %w59
    field %o1(BN) = %w115 != %w64 ? 34 <Field> : 36 <Field>
Transition:
    %w115 != %w64 ? -> 34 : -> 36

Block 36:
Func: main, Scope: 2
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: u32
    %i10: field
    %i11: field
    %i12: u32
    %i14: u32
    %i15: field
    %i16: u32
    %i17: u32
    %i18: field
    %i19: field
    %i20: u32
    %i21: field
    %i22: u32
    %i23: field
    %i24: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: u32
    %o9: u32
    %o10: field
    %o11: field
    %o12: u32
    %o13: u32
    %o14: field
    %o15: u32
    %o16: u32
    %o17: field
    %o18: field
    %o19: u32
    %o20: field
    %o21: u32
    %o22: field
    %o23: field
Instructions:
    assert %i1(BN) == 36 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    u32 %w60 = %i8
    field %w117 = %i10
    field %w53 = %i11
    u32 %w65 = %i12
    u32 %w64 = %i14
    field %w118 = %i15
    u32 %w62 = %i16
    u32 %w61 = %i17
    field %w63 = %i18
    field %w54 = %i19
    u32 %w55 = %i20
    field %w56 = %i21
    u32 %w57 = %i22
    field %w58 = %i23
    field %w59 = %i24
    u32 %w116 = 0 <U32>
    field %o4(AS) = %w2(AS)
    field %o6(SP) = %w4(SP)
    field %o5(RP) = %w3(RP)
    field %o3(TS) = %w1(TS)
    field %o7(BP) = %w68
    u32 %o8 = %w60
    u32 %o9 = %w116
    field %o10 = %w117
    field %o11 = %w53
    u32 %o12 = %w65
    u32 %o13 = %w64
    field %o14 = %w118
    u32 %o15 = %w62
    u32 %o16 = %w61
    field %o17 = %w63
    field %o18 = %w54
    u32 %o19 = %w55
    field %o20 = %w56
    u32 %o21 = %w57
    field %o22 = %w58
    field %o23 = %w59
    field %o1(BN) = %w116 != %w65 ? 37 <Field> : 40 <Field>
Transition:
    %w116 != %w65 ? -> 37 : -> 40

Block 37:
Func: main, Scope: 3
Exec Bound: 1, While Loop: true, Num VM Ops: 14
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: u32
    %i9: u32
    %i10: field
    %i11: field
    %i12: u32
    %i13: u32
    %i14: field
    %i15: u32
    %i16: u32
    %i17: field
    %i18: field
    %i19: u32
    %i20: field
    %i21: u32
    %i22: field
    %i23: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o31: field
    %o32: field
    %o8: field
    %o9: u32
    %o33: u32
    %o11: field
    %o12: field
    %o13: u32
    %o15: u32
    %o16: field
    %o17: u32
    %o34: field
    %o18: u32
    %o19: u32
    %o20: field
    %o21: u32
    %o22: field
    %o23: field
    %o24: field
    %o25: field
    %o26: u32
    %o27: field
    %o28: u32
    %o29: field
    %o30: field
Instructions:
    assert %i1(BN) == 37 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    u32 %w60 = %i8
    u32 %w116 = %i9
    field %w117 = %i10
    field %w53 = %i11
    u32 %w65 = %i12
    u32 %w64 = %i13
    field %w118 = %i14
    u32 %w62 = %i15
    u32 %w61 = %i16
    field %w63 = %i17
    field %w54 = %i18
    u32 %w55 = %i19
    field %w56 = %i20
    u32 %w57 = %i21
    field %w58 = %i22
    field %w59 = %i23
    field %w235 = %w68[%w64 + 2 <U32> * %w116]
    field %w114 = %w235
    field %w235 = %w68[%w64 + 2 <U32> * %w116 + 1 <U32>]
    field %w113 = %w235
    field[2 <U32>] %w236
    field %w237 = %w53[%w116]
    field %w238 = %w237[0 <Field>]
    field %w239 = %w238
    field %w240 = %w53[%w116]
    field %w241 = %w240[1 <Field>]
    field %w242 = %w241
    %w236[0 <Field>] = %w239 <field>, init
    %w236[1 <Field>] = %w242 <field>, init
    field %w243 = %w236
    field[2 <U32>] %w236
    field %w237 = %w53[%w116]
    field %w238 = %w237[2 <Field>]
    %w239 = %w238
    field %w240 = %w53[%w116]
    field %w241 = %w240[3 <Field>]
    %w242 = %w241
    %w236[0 <Field>] = %w239 <field>, init
    %w236[1 <Field>] = %w242 <field>, init
    field %w119 = %w236
    field %w124 = %w243
    u32 %w120 = %w61
    field %w121 = %w118
    u32 %w122 = %w62
    field %w123 = 38 <Field>
    field %o4(AS) = %w2(AS)
    field %o6(SP) = %w4(SP)
    field %o5(RP) = %w3(RP)
    field %o3(TS) = %w1(TS)
    field %o31 = %w113
    field %o32 = %w114
    field %o8 = %w68
    u32 %o9 = %w60
    u32 %o33 = %w116
    field %o11 = %w117
    field %o12 = %w53
    u32 %o13 = %w65
    u32 %o15 = %w64
    field %o16 = %w118
    u32 %o17 = %w62
    field %o34 = %w119
    u32 %o18 = %w120
    u32 %o19 = %w61
    field %o20 = %w121
    u32 %o21 = %w122
    field %o22 = %w123
    field %o23 = %w124
    field %o24 = %w63
    field %o25 = %w54
    u32 %o26 = %w55
    field %o27 = %w56
    u32 %o28 = %w57
    field %o29 = %w58
    field %o30 = %w59
    field %o1(BN) = 8 <Field>
Transition: -> 8

Block 38:
Func: main, Scope: 4
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i2(RET): field
    %i5(RP): field
    %i3(TS): field
    %i9: field
    %i10: field
    %i11: field
    %i12: u32
    %i14: u32
    %i15: field
    %i16: field
    %i17: u32
    %i19: u32
    %i20: field
    %i21: u32
    %i22: field
    %i23: u32
    %i24: field
    %i25: field
    %i26: u32
    %i27: field
    %i28: u32
    %i29: field
    %i30: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o31: field
    %o8: field
    %o9: u32
    %o33: u32
    %o11: field
    %o12: field
    %o13: u32
    %o15: u32
    %o16: field
    %o17: u32
    %o18: u32
    %o19: u32
    %o20: field
    %o21: u32
    %o22: field
    %o23: field
    %o24: field
    %o25: field
    %o26: u32
    %o27: field
    %o28: u32
    %o29: field
    %o30: field
Instructions:
    assert %i1(BN) == 38 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w132 = %i2(RET)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w113 = %i9
    field %w114 = %i10
    field %w68 = %i11
    u32 %w60 = %i12
    u32 %w116 = %i14
    field %w117 = %i15
    field %w53 = %i16
    u32 %w65 = %i17
    u32 %w64 = %i19
    field %w118 = %i20
    u32 %w62 = %i21
    field %w119 = %i22
    u32 %w61 = %i23
    field %w63 = %i24
    field %w54 = %i25
    u32 %w55 = %i26
    field %w56 = %i27
    u32 %w57 = %i28
    field %w58 = %i29
    field %w59 = %i30
    field %w244 = %w132
    %w117 = %w117 + %w244 * %w114
    field %w124 = %w119
    u32 %w120 = %w61
    field %w121 = %w118
    u32 %w122 = %w62
    field %w123 = 39 <Field>
    field %o4(AS) = %w2(AS)
    field %o6(SP) = %w4(SP)
    field %o5(RP) = %w3(RP)
    field %o3(TS) = %w1(TS)
    field %o31 = %w113
    field %o8 = %w68
    u32 %o9 = %w60
    u32 %o33 = %w116
    field %o11 = %w117
    field %o12 = %w53
    u32 %o13 = %w65
    u32 %o15 = %w64
    field %o16 = %w118
    u32 %o17 = %w62
    u32 %o18 = %w120
    u32 %o19 = %w61
    field %o20 = %w121
    u32 %o21 = %w122
    field %o22 = %w123
    field %o23 = %w124
    field %o24 = %w63
    field %o25 = %w54
    u32 %o26 = %w55
    field %o27 = %w56
    u32 %o28 = %w57
    field %o29 = %w58
    field %o30 = %w59
    field %o1(BN) = 8 <Field>
Transition: -> 8

Block 39:
Func: main, Scope: 4
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i2(RET): field
    %i5(RP): field
    %i3(TS): field
    %i9: field
    %i11: field
    %i12: u32
    %i14: u32
    %i15: field
    %i16: field
    %i17: u32
    %i19: u32
    %i20: field
    %i21: u32
    %i23: u32
    %i24: field
    %i25: field
    %i26: u32
    %i27: field
    %i28: u32
    %i29: field
    %i30: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: u32
    %o9: u32
    %o10: field
    %o11: field
    %o12: u32
    %o13: u32
    %o14: field
    %o15: u32
    %o16: u32
    %o17: field
    %o18: field
    %o19: u32
    %o20: field
    %o21: u32
    %o22: field
    %o23: field
Instructions:
    assert %i1(BN) == 39 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w132 = %i2(RET)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w113 = %i9
    field %w68 = %i11
    u32 %w60 = %i12
    u32 %w116 = %i14
    field %w117 = %i15
    field %w53 = %i16
    u32 %w65 = %i17
    u32 %w64 = %i19
    field %w118 = %i20
    u32 %w62 = %i21
    u32 %w61 = %i23
    field %w63 = %i24
    field %w54 = %i25
    u32 %w55 = %i26
    field %w56 = %i27
    u32 %w57 = %i28
    field %w58 = %i29
    field %w59 = %i30
    field %w244 = %w132
    %w117 = %w117 + %w244 * %w113
    %w116 = %w116 + 1 <U32>
    field %o4(AS) = %w2(AS)
    field %o6(SP) = %w4(SP)
    field %o5(RP) = %w3(RP)
    field %o3(TS) = %w1(TS)
    field %o7(BP) = %w68
    u32 %o8 = %w60
    u32 %o9 = %w116
    field %o10 = %w117
    field %o11 = %w53
    u32 %o12 = %w65
    u32 %o13 = %w64
    field %o14 = %w118
    u32 %o15 = %w62
    u32 %o16 = %w61
    field %o17 = %w63
    field %o18 = %w54
    u32 %o19 = %w55
    field %o20 = %w56
    u32 %o21 = %w57
    field %o22 = %w58
    field %o23 = %w59
    field %o1(BN) = %w116 != %w65 ? 37 <Field> : 40 <Field>
Transition:
    %w116 != %w65 ? -> 37 : -> 40

Block 40:
Func: main, Scope: 2
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: u32
    %i10: field
    %i13: u32
    %i14: field
    %i15: u32
    %i16: u32
    %i17: field
    %i18: field
    %i19: u32
    %i20: field
    %i21: u32
    %i22: field
    %i23: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: u32
    %o9: u32
    %o10: u32
    %o11: u32
    %o12: field
    %o13: field
    %o14: field
    %o15: field
    %o16: u32
    %o17: field
    %o18: u32
    %o19: field
    %o20: field
    %o21: u32
    %o22: field
    %o23: u32
    %o24: field
    %o25: field
Instructions:
    assert %i1(BN) == 40 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    u32 %w60 = %i8
    field %w117 = %i10
    u32 %w64 = %i13
    field %w118 = %i14
    u32 %w62 = %i15
    u32 %w61 = %i16
    field %w63 = %i17
    field %w54 = %i18
    u32 %w55 = %i19
    field %w56 = %i20
    u32 %w57 = %i21
    field %w58 = %i22
    field %w59 = %i23
    field[%w57] %w75
    field[%w55] %w72
    field[%w55] %w73
    field %w245 = %w118
    field %w246 = %w117
    field %w247 = %w246
    field %w248 = %w245
    u32 %w69 = 1 <U32>
    u32 %w78 = 0 <U32>
    field %o4(AS) = %w2(AS)
    field %o6(SP) = %w4(SP)
    field %o5(RP) = %w3(RP)
    field %o3(TS) = %w1(TS)
    field %o7(BP) = %w68
    u32 %o8 = %w69
    u32 %o9 = %w60
    u32 %o10 = %w64
    u32 %o11 = %w62
    field %o12 = %w72
    field %o13 = %w73
    field %o14 = %w247
    field %o15 = %w248
    u32 %o16 = %w61
    field %o17 = %w75
    u32 %o18 = %w78
    field %o19 = %w63
    field %o20 = %w54
    u32 %o21 = %w55
    field %o22 = %w56
    u32 %o23 = %w57
    field %o24 = %w58
    field %o25 = %w59
    field %o1(BN) = %w78 != %w60 - 1 <U32> ? 41 <Field> : 69 <Field>
Transition:
    %w78 != %w60 - 1 <U32> ? -> 41 : -> 69

Block 41:
Func: main, Scope: 3
Exec Bound: 1, While Loop: true, Num VM Ops: 1
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: u32
    %i9: u32
    %i10: u32
    %i11: u32
    %i12: field
    %i13: field
    %i14: field
    %i15: field
    %i16: u32
    %i17: field
    %i18: u32
    %i19: field
    %i20: field
    %i21: u32
    %i22: field
    %i23: u32
    %i24: field
    %i25: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: u32
    %o9: u32
    %o10: field
    %o11: u32
    %o12: u32
    %o13: u32
    %o14: u32
    %o15: field
    %o16: field
    %o17: u32
    %o18: field
    %o19: field
    %o20: field
    %o21: u32
    %o22: u32
    %o23: field
    %o24: field
    %o25: field
    %o26: u32
    %o27: field
    %o28: u32
    %o29: field
    %o30: field
Instructions:
    assert %i1(BN) == 41 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    u32 %w69 = %i8
    u32 %w60 = %i9
    u32 %w64 = %i10
    u32 %w62 = %i11
    field %w72 = %i12
    field %w73 = %i13
    field %w247 = %i14
    field %w248 = %i15
    u32 %w61 = %i16
    field %w75 = %i17
    u32 %w78 = %i18
    field %w63 = %i19
    field %w54 = %i20
    u32 %w55 = %i21
    field %w56 = %i22
    u32 %w57 = %i23
    field %w58 = %i24
    field %w59 = %i25
    field %w91 = %w248
    field %w249 = %w247
    u32 %w99 = %w78 + 1 <U32> * %w62
    field[0 <U32>] %w250
    field %w251 = %w59[%w78]
    field %w252 = %w251
    u32 %w253 = %w61 + 1 <U32>
    u32 %w254 = %w99
    field %w170 = %w249
    field %w176 = %w252
    u32 %w174 = %w253
    u32 %w175 = %w254
    field %w177 = %w63
    field %o4(AS) = %w2(AS)
    field %o6(SP) = %w4(SP)
    field %o5(RP) = %w3(RP)
    field %o3(TS) = %w1(TS)
    field %o7(BP) = %w68
    u32 %o8 = %w174
    u32 %o9 = %w175
    field %o10 = %w170
    u32 %o11 = %w69
    u32 %o12 = %w60
    u32 %o13 = %w64
    u32 %o14 = %w62
    field %o15 = %w72
    field %o16 = %w73
    u32 %o17 = %w61
    field %o18 = %w91
    field %o19 = %w75
    field %o20 = %w176
    u32 %o21 = %w78
    u32 %o22 = %w99
    field %o23 = %w63
    field %o24 = %w177
    field %o25 = %w54
    u32 %o26 = %w55
    field %o27 = %w56
    u32 %o28 = %w57
    field %o29 = %w58
    field %o30 = %w59
    field %o1(BN) = %w175 == 0 <U32> ? 19 <Field> : 20 <Field>
Transition:
    %w175 == 0 <U32> ? -> 19 : -> 20

Block 42:
Func: main, Scope: 4
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i7(BP): field
    %i8: field
    %i5(RP): field
    %i3(TS): field
    %i9: field
    %i10: u32
    %i11: u32
    %i12: u32
    %i13: u32
    %i14: field
    %i15: field
    %i16: u32
    %i17: field
    %i18: field
    %i19: u32
    %i20: u32
    %i21: field
    %i22: field
    %i23: u32
    %i24: field
    %i25: u32
    %i26: field
    %i27: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: u32
    %o9: field
    %o10: u32
    %o11: u32
    %o12: u32
    %o13: field
    %o14: field
    %o15: u32
    %o16: field
    %o17: field
    %o18: u32
    %o19: field
    %o20: u32
    %o21: u32
    %o22: field
    %o23: field
    %o24: field
    %o25: u32
    %o26: field
    %o27: u32
    %o28: field
    %o29: field
Instructions:
    assert %i1(BN) == 42 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w155 = %i7(BP)
    field %w156 = %i8
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i9
    u32 %w69 = %i10
    u32 %w60 = %i11
    u32 %w64 = %i12
    u32 %w62 = %i13
    field %w72 = %i14
    field %w73 = %i15
    u32 %w61 = %i16
    field %w91 = %i17
    field %w75 = %i18
    u32 %w78 = %i19
    u32 %w99 = %i20
    field %w63 = %i21
    field %w54 = %i22
    u32 %w55 = %i23
    field %w56 = %i24
    u32 %w57 = %i25
    field %w58 = %i26
    field %w59 = %i27
    field %w255 = %w155
    field %w256 = %w156
    field %w102 = %w255
    field %w257 = %w256
    field %w98 = %w257
    field %w89 = 0 <Field>
    u32 %w100 = 0 <U32>
    field %o4(AS) = %w2(AS)
    field %o6(SP) = %w4(SP)
    field %o5(RP) = %w3(RP)
    field %o3(TS) = %w1(TS)
    field %o7(BP) = %w68
    u32 %o8 = %w69
    field %o9 = %w89
    u32 %o10 = %w60
    u32 %o11 = %w64
    u32 %o12 = %w62
    field %o13 = %w72
    field %o14 = %w73
    u32 %o15 = %w61
    field %o16 = %w91
    field %o17 = %w75
    u32 %o18 = %w78
    field %o19 = %w98
    u32 %o20 = %w99
    u32 %o21 = %w100
    field %o22 = %w102
    field %o23 = %w63
    field %o24 = %w54
    u32 %o25 = %w55
    field %o26 = %w56
    u32 %o27 = %w57
    field %o28 = %w58
    field %o29 = %w59
    field %o1(BN) = %w100 != %w57 ? 43 <Field> : 49 <Field>
Transition:
    %w100 != %w57 ? -> 43 : -> 49

Block 43:
Func: main, Scope: 6
Exec Bound: 1, While Loop: true, Num VM Ops: 1
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: u32
    %i9: field
    %i10: u32
    %i11: u32
    %i12: u32
    %i13: field
    %i14: field
    %i15: u32
    %i16: field
    %i17: field
    %i18: u32
    %i19: field
    %i20: u32
    %i21: u32
    %i22: field
    %i23: field
    %i24: field
    %i25: u32
    %i26: field
    %i27: u32
    %i28: field
    %i29: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: u32
    %o9: field
    %o10: u32
    %o11: u32
    %o12: u32
    %o13: field
    %o14: field
    %o15: u32
    %o16: field
    %o17: field
    %o18: u32
    %o19: field
    %o20: u32
    %o21: u32
    %o22: field
    %o23: field
    %o24: field
    %o25: u32
    %o26: field
    %o27: u32
    %o28: field
    %o29: field
Instructions:
    assert %i1(BN) == 43 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    u32 %w69 = %i8
    field %w89 = %i9
    u32 %w60 = %i10
    u32 %w64 = %i11
    u32 %w62 = %i12
    field %w72 = %i13
    field %w73 = %i14
    u32 %w61 = %i15
    field %w91 = %i16
    field %w75 = %i17
    u32 %w78 = %i18
    field %w98 = %i19
    u32 %w99 = %i20
    u32 %w100 = %i21
    field %w102 = %i22
    field %w63 = %i23
    field %w54 = %i24
    u32 %w55 = %i25
    field %w56 = %i26
    u32 %w57 = %i27
    field %w58 = %i28
    field %w59 = %i29
    u32 %w258 = %w54[%w100]
    field %o4(AS) = %w2(AS)
    field %o6(SP) = %w4(SP)
    field %o5(RP) = %w3(RP)
    field %o3(TS) = %w1(TS)
    field %o7(BP) = %w68
    u32 %o8 = %w69
    field %o9 = %w89
    u32 %o10 = %w60
    u32 %o11 = %w64
    u32 %o12 = %w62
    field %o13 = %w72
    field %o14 = %w73
    u32 %o15 = %w61
    field %o16 = %w91
    field %o17 = %w75
    u32 %o18 = %w78
    field %o19 = %w98
    u32 %o20 = %w99
    u32 %o21 = %w100
    field %o22 = %w102
    field %o23 = %w63
    field %o24 = %w54
    u32 %o25 = %w55
    field %o26 = %w56
    u32 %o27 = %w57
    field %o28 = %w58
    field %o29 = %w59
    field %o1(BN) = %w258 < %w78 ? 44 <Field> : 48 <Field>
Transition:
    %w258 < %w78 ? -> 44 : -> 48

Block 44:
Func: main, Scope: 8
Exec Bound: 1, While Loop: false, Num VM Ops: 1
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: u32
    %i9: field
    %i10: u32
    %i11: u32
    %i12: u32
    %i13: field
    %i14: field
    %i15: u32
    %i16: field
    %i17: field
    %i18: u32
    %i19: field
    %i20: u32
    %i21: u32
    %i22: field
    %i23: field
    %i24: field
    %i25: u32
    %i26: field
    %i27: u32
    %i28: field
    %i29: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: field
    %o9: u32
    %o10: field
    %o11: u32
    %o12: u32
    %o13: u32
    %o14: u32
    %o15: field
    %o16: field
    %o17: u32
    %o18: field
    %o19: field
    %o20: field
    %o21: u32
    %o22: field
    %o23: u32
    %o24: u32
    %o25: field
    %o26: field
    %o27: field
    %o28: u32
    %o29: field
    %o30: u32
    %o31: field
    %o32: field
Instructions:
    assert %i1(BN) == 44 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    u32 %w69 = %i8
    field %w89 = %i9
    u32 %w60 = %i10
    u32 %w64 = %i11
    u32 %w62 = %i12
    field %w72 = %i13
    field %w73 = %i14
    u32 %w61 = %i15
    field %w91 = %i16
    field %w75 = %i17
    u32 %w78 = %i18
    field %w98 = %i19
    u32 %w99 = %i20
    u32 %w100 = %i21
    field %w102 = %i22
    field %w63 = %i23
    field %w54 = %i24
    u32 %w55 = %i25
    field %w56 = %i26
    u32 %w57 = %i27
    field %w58 = %i28
    field %w59 = %i29
    field %w259 = %w68[%w100]
    field %w260 = %w259
    field %w94 = 1 <Field>
    u32 %w261 = 0 <U32>
    field %o4(AS) = %w2(AS)
    field %o6(SP) = %w4(SP)
    field %o5(RP) = %w3(RP)
    field %o3(TS) = %w1(TS)
    field %o7(BP) = %w260
    field %o8 = %w68
    u32 %o9 = %w69
    field %o10 = %w89
    u32 %o11 = %w60
    u32 %o12 = %w261
    u32 %o13 = %w64
    u32 %o14 = %w62
    field %o15 = %w72
    field %o16 = %w73
    u32 %o17 = %w61
    field %o18 = %w91
    field %o19 = %w94
    field %o20 = %w75
    u32 %o21 = %w78
    field %o22 = %w98
    u32 %o23 = %w99
    u32 %o24 = %w100
    field %o25 = %w102
    field %o26 = %w63
    field %o27 = %w54
    u32 %o28 = %w55
    field %o29 = %w56
    u32 %o30 = %w57
    field %o31 = %w58
    field %o32 = %w59
    field %o1(BN) = %w261 != %w69 ? 45 <Field> : 46 <Field>
Transition:
    %w261 != %w69 ? -> 45 : -> 46

Block 45:
Func: main, Scope: 10
Exec Bound: 1, While Loop: true, Num VM Ops: 3
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: field
    %i9: u32
    %i10: field
    %i11: u32
    %i12: u32
    %i13: u32
    %i14: u32
    %i15: field
    %i16: field
    %i17: u32
    %i18: field
    %i19: field
    %i20: field
    %i21: u32
    %i22: field
    %i23: u32
    %i24: u32
    %i25: field
    %i26: field
    %i27: field
    %i28: u32
    %i29: field
    %i30: u32
    %i31: field
    %i32: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: field
    %o9: u32
    %o10: field
    %o11: u32
    %o12: u32
    %o13: u32
    %o14: u32
    %o15: field
    %o16: field
    %o17: u32
    %o18: field
    %o19: field
    %o20: field
    %o21: u32
    %o22: field
    %o23: u32
    %o24: u32
    %o25: field
    %o26: field
    %o27: field
    %o28: u32
    %o29: field
    %o30: u32
    %o31: field
    %o32: field
Instructions:
    assert %i1(BN) == 45 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w260 = %i7(BP)
    field %w68 = %i8
    u32 %w69 = %i9
    field %w89 = %i10
    u32 %w60 = %i11
    u32 %w261 = %i12
    u32 %w64 = %i13
    u32 %w62 = %i14
    field %w72 = %i15
    field %w73 = %i16
    u32 %w61 = %i17
    field %w91 = %i18
    field %w94 = %i19
    field %w75 = %i20
    u32 %w78 = %i21
    field %w98 = %i22
    u32 %w99 = %i23
    u32 %w100 = %i24
    field %w102 = %i25
    field %w63 = %i26
    field %w54 = %i27
    u32 %w55 = %i28
    field %w56 = %i29
    u32 %w57 = %i30
    field %w58 = %i31
    field %w59 = %i32
    field %w262 = %w58[%w100]
    field %w263 = %w262[%w78]
    field %w264 = %w263[%w261]
    %w94 = %w94 * %w264
    %w261 = %w261 + 1 <U32>
    field %o4(AS) = %w2(AS)
    field %o6(SP) = %w4(SP)
    field %o5(RP) = %w3(RP)
    field %o3(TS) = %w1(TS)
    field %o7(BP) = %w260
    field %o8 = %w68
    u32 %o9 = %w69
    field %o10 = %w89
    u32 %o11 = %w60
    u32 %o12 = %w261
    u32 %o13 = %w64
    u32 %o14 = %w62
    field %o15 = %w72
    field %o16 = %w73
    u32 %o17 = %w61
    field %o18 = %w91
    field %o19 = %w94
    field %o20 = %w75
    u32 %o21 = %w78
    field %o22 = %w98
    u32 %o23 = %w99
    u32 %o24 = %w100
    field %o25 = %w102
    field %o26 = %w63
    field %o27 = %w54
    u32 %o28 = %w55
    field %o29 = %w56
    u32 %o30 = %w57
    field %o31 = %w58
    field %o32 = %w59
    field %o1(BN) = %w261 != %w69 ? 45 <Field> : 46 <Field>
Transition:
    %w261 != %w69 ? -> 45 : -> 46

Block 46:
Func: main, Scope: 9
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: field
    %i9: u32
    %i10: field
    %i11: u32
    %i13: u32
    %i14: u32
    %i15: field
    %i16: field
    %i17: u32
    %i18: field
    %i19: field
    %i20: field
    %i21: u32
    %i22: field
    %i23: u32
    %i24: u32
    %i25: field
    %i26: field
    %i27: field
    %i28: u32
    %i29: field
    %i30: u32
    %i31: field
    %i32: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): u32
    %o8: field
    %o9: u32
    %o10: u32
    %o11: u32
    %o12: u32
    %o13: field
    %o14: field
    %o15: u32
    %o16: field
    %o17: field
    %o18: field
    %o19: u32
    %o20: field
    %o21: field
    %o22: u32
    %o23: u32
    %o24: field
    %o25: field
    %o26: field
    %o27: u32
    %o28: field
    %o29: u32
    %o30: field
    %o31: field
    %o32: field
    %o33: field
Instructions:
    assert %i1(BN) == 46 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w260 = %i7(BP)
    field %w68 = %i8
    u32 %w69 = %i9
    field %w89 = %i10
    u32 %w60 = %i11
    u32 %w64 = %i13
    u32 %w62 = %i14
    field %w72 = %i15
    field %w73 = %i16
    u32 %w61 = %i17
    field %w91 = %i18
    field %w94 = %i19
    field %w75 = %i20
    u32 %w78 = %i21
    field %w98 = %i22
    u32 %w99 = %i23
    u32 %w100 = %i24
    field %w102 = %i25
    field %w63 = %i26
    field %w54 = %i27
    u32 %w55 = %i28
    field %w56 = %i29
    u32 %w57 = %i30
    field %w58 = %i31
    field %w59 = %i32
    u32 %w90 = %w99
    field %w103 = %w91
    field %w104 = %w98
    %PHY[%SP + 0] = %w4(SP) <field>
    %w4(SP) = %w3(RP)
    %PHY[%SP + 1] = %w260 <field>
    %PHY[%SP + 2] = %w68 <field>
    field %w97 = 47 <Field>
    %w3(RP) = %w3(RP) + 3 <Field>
    field %o4(AS) = %w2(AS)
    field %o6(SP) = %w4(SP)
    field %o5(RP) = %w3(RP)
    field %o3(TS) = %w1(TS)
    u32 %o7(BP) = %w69
    field %o8 = %w89
    u32 %o9 = %w60
    u32 %o10 = %w64
    u32 %o11 = %w90
    u32 %o12 = %w62
    field %o13 = %w72
    field %o14 = %w73
    u32 %o15 = %w61
    field %o16 = %w91
    field %o17 = %w94
    field %o18 = %w75
    u32 %o19 = %w78
    field %o20 = %w97
    field %o21 = %w98
    u32 %o22 = %w99
    u32 %o23 = %w100
    field %o24 = %w102
    field %o25 = %w63
    field %o26 = %w54
    u32 %o27 = %w55
    field %o28 = %w56
    u32 %o29 = %w57
    field %o30 = %w58
    field %o31 = %w59
    field %o32 = %w103
    field %o33 = %w104
    field %o1(BN) = 5 <Field>
Transition: -> 5

Block 47:
Func: main, Scope: 8
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i2(RET): field
    %i5(RP): field
    %i3(TS): field
    %i8: u32
    %i9: field
    %i10: u32
    %i11: u32
    %i12: u32
    %i13: field
    %i14: field
    %i15: u32
    %i16: field
    %i19: field
    %i20: field
    %i23: u32
    %i24: field
    %i25: u32
    %i26: u32
    %i28: field
    %i29: field
    %i30: field
    %i31: u32
    %i32: field
    %i33: u32
    %i34: field
    %i35: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: u32
    %o9: field
    %o10: u32
    %o11: u32
    %o12: u32
    %o13: field
    %o14: field
    %o15: u32
    %o16: field
    %o17: field
    %o18: u32
    %o19: field
    %o20: u32
    %o21: u32
    %o22: field
    %o23: field
    %o24: field
    %o25: u32
    %o26: field
    %o27: u32
    %o28: field
    %o29: field
Instructions:
    assert %i1(BN) == 47 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w111 = %i2(RET)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    u32 %w69 = %i8
    field %w89 = %i9
    u32 %w60 = %i10
    u32 %w64 = %i11
    u32 %w62 = %i12
    field %w72 = %i13
    field %w73 = %i14
    u32 %w61 = %i15
    field %w91 = %i16
    field %w94 = %i19
    field %w75 = %i20
    u32 %w78 = %i23
    field %w98 = %i24
    u32 %w99 = %i25
    u32 %w100 = %i26
    field %w102 = %i28
    field %w63 = %i29
    field %w54 = %i30
    u32 %w55 = %i31
    field %w56 = %i32
    u32 %w57 = %i33
    field %w58 = %i34
    field %w59 = %i35
    field %w68 = %PHY[%BP + 2]
    field %w260 = %PHY[%BP + 1]
    field %w4(SP) = %PHY[%BP + 0]
    field %w265 = %w111
    %w89 = %w89 + %w265 * %w260 * %w94
    field %o4(AS) = %w2(AS)
    field %o6(SP) = %w4(SP)
    field %o5(RP) = %w3(RP)
    field %o3(TS) = %w1(TS)
    field %o7(BP) = %w68
    u32 %o8 = %w69
    field %o9 = %w89
    u32 %o10 = %w60
    u32 %o11 = %w64
    u32 %o12 = %w62
    field %o13 = %w72
    field %o14 = %w73
    u32 %o15 = %w61
    field %o16 = %w91
    field %o17 = %w75
    u32 %o18 = %w78
    field %o19 = %w98
    u32 %o20 = %w99
    u32 %o21 = %w100
    field %o22 = %w102
    field %o23 = %w63
    field %o24 = %w54
    u32 %o25 = %w55
    field %o26 = %w56
    u32 %o27 = %w57
    field %o28 = %w58
    field %o29 = %w59
    field %o1(BN) = 48 <Field>
Transition: -> 48

Block 48:
Func: main, Scope: 7
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: u32
    %i9: field
    %i10: u32
    %i11: u32
    %i12: u32
    %i13: field
    %i14: field
    %i15: u32
    %i16: field
    %i17: field
    %i18: u32
    %i19: field
    %i20: u32
    %i21: u32
    %i22: field
    %i23: field
    %i24: field
    %i25: u32
    %i26: field
    %i27: u32
    %i28: field
    %i29: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: u32
    %o9: field
    %o10: u32
    %o11: u32
    %o12: u32
    %o13: field
    %o14: field
    %o15: u32
    %o16: field
    %o17: field
    %o18: u32
    %o19: field
    %o20: u32
    %o21: u32
    %o22: field
    %o23: field
    %o24: field
    %o25: u32
    %o26: field
    %o27: u32
    %o28: field
    %o29: field
Instructions:
    assert %i1(BN) == 48 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    u32 %w69 = %i8
    field %w89 = %i9
    u32 %w60 = %i10
    u32 %w64 = %i11
    u32 %w62 = %i12
    field %w72 = %i13
    field %w73 = %i14
    u32 %w61 = %i15
    field %w91 = %i16
    field %w75 = %i17
    u32 %w78 = %i18
    field %w98 = %i19
    u32 %w99 = %i20
    u32 %w100 = %i21
    field %w102 = %i22
    field %w63 = %i23
    field %w54 = %i24
    u32 %w55 = %i25
    field %w56 = %i26
    u32 %w57 = %i27
    field %w58 = %i28
    field %w59 = %i29
    %w100 = %w100 + 1 <U32>
    field %o4(AS) = %w2(AS)
    field %o6(SP) = %w4(SP)
    field %o5(RP) = %w3(RP)
    field %o3(TS) = %w1(TS)
    field %o7(BP) = %w68
    u32 %o8 = %w69
    field %o9 = %w89
    u32 %o10 = %w60
    u32 %o11 = %w64
    u32 %o12 = %w62
    field %o13 = %w72
    field %o14 = %w73
    u32 %o15 = %w61
    field %o16 = %w91
    field %o17 = %w75
    u32 %o18 = %w78
    field %o19 = %w98
    u32 %o20 = %w99
    u32 %o21 = %w100
    field %o22 = %w102
    field %o23 = %w63
    field %o24 = %w54
    u32 %o25 = %w55
    field %o26 = %w56
    u32 %o27 = %w57
    field %o28 = %w58
    field %o29 = %w59
    field %o1(BN) = %w100 != %w57 ? 43 <Field> : 49 <Field>
Transition:
    %w100 != %w57 ? -> 43 : -> 49

Block 49:
Func: main, Scope: 5
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: u32
    %i9: field
    %i10: u32
    %i11: u32
    %i12: u32
    %i13: field
    %i14: field
    %i15: u32
    %i16: field
    %i17: field
    %i18: u32
    %i19: field
    %i20: u32
    %i22: field
    %i23: field
    %i24: field
    %i25: u32
    %i26: field
    %i27: u32
    %i28: field
    %i29: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: u32
    %o9: field
    %o10: u32
    %o11: u32
    %o12: u32
    %o13: field
    %o14: field
    %o15: u32
    %o16: field
    %o17: field
    %o18: u32
    %o19: field
    %o20: u32
    %o21: u32
    %o22: field
    %o23: field
    %o24: field
    %o25: u32
    %o26: field
    %o27: u32
    %o28: field
    %o29: field
Instructions:
    assert %i1(BN) == 49 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    u32 %w69 = %i8
    field %w89 = %i9
    u32 %w60 = %i10
    u32 %w64 = %i11
    u32 %w62 = %i12
    field %w72 = %i13
    field %w73 = %i14
    u32 %w61 = %i15
    field %w91 = %i16
    field %w75 = %i17
    u32 %w78 = %i18
    field %w98 = %i19
    u32 %w99 = %i20
    field %w102 = %i22
    field %w63 = %i23
    field %w54 = %i24
    u32 %w55 = %i25
    field %w56 = %i26
    u32 %w57 = %i27
    field %w58 = %i28
    field %w59 = %i29
    u32 %w101 = 0 <U32>
    field %o4(AS) = %w2(AS)
    field %o6(SP) = %w4(SP)
    field %o5(RP) = %w3(RP)
    field %o3(TS) = %w1(TS)
    field %o7(BP) = %w68
    u32 %o8 = %w69
    field %o9 = %w89
    u32 %o10 = %w60
    u32 %o11 = %w64
    u32 %o12 = %w62
    field %o13 = %w72
    field %o14 = %w73
    u32 %o15 = %w61
    field %o16 = %w91
    field %o17 = %w75
    u32 %o18 = %w78
    field %o19 = %w98
    u32 %o20 = %w99
    u32 %o21 = %w101
    field %o22 = %w102
    field %o23 = %w63
    field %o24 = %w54
    u32 %o25 = %w55
    field %o26 = %w56
    u32 %o27 = %w57
    field %o28 = %w58
    field %o29 = %w59
    field %o1(BN) = %w101 != %w55 ? 50 <Field> : 54 <Field>
Transition:
    %w101 != %w55 ? -> 50 : -> 54

Block 50:
Func: main, Scope: 6
Exec Bound: 1, While Loop: true, Num VM Ops: 1
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: u32
    %i9: field
    %i10: u32
    %i11: u32
    %i12: u32
    %i13: field
    %i14: field
    %i15: u32
    %i16: field
    %i17: field
    %i18: u32
    %i19: field
    %i20: u32
    %i21: u32
    %i22: field
    %i23: field
    %i24: field
    %i25: u32
    %i26: field
    %i27: u32
    %i28: field
    %i29: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: u32
    %o9: field
    %o10: u32
    %o11: u32
    %o12: u32
    %o13: field
    %o14: field
    %o15: u32
    %o16: field
    %o17: field
    %o18: u32
    %o19: field
    %o20: u32
    %o21: u32
    %o22: field
    %o23: field
    %o24: field
    %o25: u32
    %o26: field
    %o27: u32
    %o28: field
    %o29: field
Instructions:
    assert %i1(BN) == 50 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    u32 %w69 = %i8
    field %w89 = %i9
    u32 %w60 = %i10
    u32 %w64 = %i11
    u32 %w62 = %i12
    field %w72 = %i13
    field %w73 = %i14
    u32 %w61 = %i15
    field %w91 = %i16
    field %w75 = %i17
    u32 %w78 = %i18
    field %w98 = %i19
    u32 %w99 = %i20
    u32 %w101 = %i21
    field %w102 = %i22
    field %w63 = %i23
    field %w54 = %i24
    u32 %w55 = %i25
    field %w56 = %i26
    u32 %w57 = %i27
    field %w58 = %i28
    field %w59 = %i29
    u32 %w266 = %w54[%w101]
    field %o4(AS) = %w2(AS)
    field %o6(SP) = %w4(SP)
    field %o5(RP) = %w3(RP)
    field %o3(TS) = %w1(TS)
    field %o7(BP) = %w68
    u32 %o8 = %w69
    field %o9 = %w89
    u32 %o10 = %w60
    u32 %o11 = %w64
    u32 %o12 = %w62
    field %o13 = %w72
    field %o14 = %w73
    u32 %o15 = %w61
    field %o16 = %w91
    field %o17 = %w75
    u32 %o18 = %w78
    field %o19 = %w98
    u32 %o20 = %w99
    u32 %o21 = %w101
    field %o22 = %w102
    field %o23 = %w63
    field %o24 = %w54
    u32 %o25 = %w55
    field %o26 = %w56
    u32 %o27 = %w57
    field %o28 = %w58
    field %o29 = %w59
    field %o1(BN) = %w266 < %w78 ? 51 <Field> : 53 <Field>
Transition:
    %w266 < %w78 ? -> 51 : -> 53

Block 51:
Func: main, Scope: 8
Exec Bound: 1, While Loop: false, Num VM Ops: 14
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: u32
    %i9: field
    %i10: u32
    %i11: u32
    %i12: u32
    %i13: field
    %i14: field
    %i15: u32
    %i16: field
    %i17: field
    %i18: u32
    %i19: field
    %i20: u32
    %i21: u32
    %i22: field
    %i23: field
    %i24: field
    %i25: u32
    %i26: field
    %i27: u32
    %i28: field
    %i29: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): u32
    %o8: field
    %o9: u32
    %o10: u32
    %o11: u32
    %o12: u32
    %o13: field
    %o14: field
    %o15: u32
    %o16: field
    %o34: field
    %o35: field
    %o18: field
    %o36: field
    %o37: field
    %o19: u32
    %o20: field
    %o21: field
    %o22: u32
    %o38: u32
    %o24: field
    %o25: field
    %o26: field
    %o27: u32
    %o28: field
    %o29: u32
    %o30: field
    %o31: field
    %o32: field
    %o33: field
Instructions:
    assert %i1(BN) == 51 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    u32 %w69 = %i8
    field %w89 = %i9
    u32 %w60 = %i10
    u32 %w64 = %i11
    u32 %w62 = %i12
    field %w72 = %i13
    field %w73 = %i14
    u32 %w61 = %i15
    field %w91 = %i16
    field %w75 = %i17
    u32 %w78 = %i18
    field %w98 = %i19
    u32 %w99 = %i20
    u32 %w101 = %i21
    field %w102 = %i22
    field %w63 = %i23
    field %w54 = %i24
    u32 %w55 = %i25
    field %w56 = %i26
    u32 %w57 = %i27
    field %w58 = %i28
    field %w59 = %i29
    field %w267 = %w68[%w64 + 2 <U32> * %w101]
    field %w268 = %w267
    field %w267 = %w68[%w64 + 2 <U32> * %w101 + 1 <U32>]
    field %w269 = %w267
    field %w270 = %w56[%w101]
    field %w271 = %w270[%w78]
    field %w272 = %w271[0 <Field>]
    field %w92 = %w272
    field %w270 = %w56[%w101]
    field %w271 = %w270[%w78]
    field %w272 = %w271[1 <Field>]
    field %w93 = %w272
    field %w270 = %w56[%w101]
    field %w271 = %w270[%w78]
    field %w272 = %w271[2 <Field>]
    field %w95 = %w272
    field %w270 = %w56[%w101]
    field %w271 = %w270[%w78]
    field %w272 = %w271[3 <Field>]
    field %w96 = %w272
    u32 %w90 = %w99
    field %w103 = %w91
    field %w104 = %w98
    %PHY[%SP + 0] = %w4(SP) <field>
    %w4(SP) = %w3(RP)
    %PHY[%SP + 1] = %w269 <field>
    %PHY[%SP + 2] = %w268 <field>
    %PHY[%SP + 3] = %w68 <field>
    field %w97 = 52 <Field>
    %w3(RP) = %w3(RP) + 4 <Field>
    field %o4(AS) = %w2(AS)
    field %o6(SP) = %w4(SP)
    field %o5(RP) = %w3(RP)
    field %o3(TS) = %w1(TS)
    u32 %o7(BP) = %w69
    field %o8 = %w89
    u32 %o9 = %w60
    u32 %o10 = %w64
    u32 %o11 = %w90
    u32 %o12 = %w62
    field %o13 = %w72
    field %o14 = %w73
    u32 %o15 = %w61
    field %o16 = %w91
    field %o34 = %w92
    field %o35 = %w93
    field %o18 = %w75
    field %o36 = %w95
    field %o37 = %w96
    u32 %o19 = %w78
    field %o20 = %w97
    field %o21 = %w98
    u32 %o22 = %w99
    u32 %o38 = %w101
    field %o24 = %w102
    field %o25 = %w63
    field %o26 = %w54
    u32 %o27 = %w55
    field %o28 = %w56
    u32 %o29 = %w57
    field %o30 = %w58
    field %o31 = %w59
    field %o32 = %w103
    field %o33 = %w104
    field %o1(BN) = 5 <Field>
Transition: -> 5

Block 52:
Func: main, Scope: 8
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i2(RET): field
    %i5(RP): field
    %i3(TS): field
    %i8: u32
    %i9: field
    %i10: u32
    %i11: u32
    %i12: u32
    %i13: field
    %i14: field
    %i15: u32
    %i16: field
    %i17: field
    %i18: field
    %i20: field
    %i21: field
    %i22: field
    %i23: u32
    %i24: field
    %i25: u32
    %i27: u32
    %i28: field
    %i29: field
    %i30: field
    %i31: u32
    %i32: field
    %i33: u32
    %i34: field
    %i35: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: u32
    %o9: field
    %o10: u32
    %o11: u32
    %o12: u32
    %o13: field
    %o14: field
    %o15: u32
    %o16: field
    %o17: field
    %o18: u32
    %o19: field
    %o20: u32
    %o21: u32
    %o22: field
    %o23: field
    %o24: field
    %o25: u32
    %o26: field
    %o27: u32
    %o28: field
    %o29: field
Instructions:
    assert %i1(BN) == 52 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w111 = %i2(RET)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    u32 %w69 = %i8
    field %w89 = %i9
    u32 %w60 = %i10
    u32 %w64 = %i11
    u32 %w62 = %i12
    field %w72 = %i13
    field %w73 = %i14
    u32 %w61 = %i15
    field %w91 = %i16
    field %w92 = %i17
    field %w93 = %i18
    field %w75 = %i20
    field %w95 = %i21
    field %w96 = %i22
    u32 %w78 = %i23
    field %w98 = %i24
    u32 %w99 = %i25
    u32 %w101 = %i27
    field %w102 = %i28
    field %w63 = %i29
    field %w54 = %i30
    u32 %w55 = %i31
    field %w56 = %i32
    u32 %w57 = %i33
    field %w58 = %i34
    field %w59 = %i35
    field %w68 = %PHY[%BP + 3]
    field %w268 = %PHY[%BP + 2]
    field %w269 = %PHY[%BP + 1]
    field %w4(SP) = %PHY[%BP + 0]
    field %w273 = %w111
    %w89 = %w89 + %w273 * %w268 * %w92 * %w96 + %w93 * %w95 + %w269 * %w95 * %w96
    field %o4(AS) = %w2(AS)
    field %o6(SP) = %w4(SP)
    field %o5(RP) = %w3(RP)
    field %o3(TS) = %w1(TS)
    field %o7(BP) = %w68
    u32 %o8 = %w69
    field %o9 = %w89
    u32 %o10 = %w60
    u32 %o11 = %w64
    u32 %o12 = %w62
    field %o13 = %w72
    field %o14 = %w73
    u32 %o15 = %w61
    field %o16 = %w91
    field %o17 = %w75
    u32 %o18 = %w78
    field %o19 = %w98
    u32 %o20 = %w99
    u32 %o21 = %w101
    field %o22 = %w102
    field %o23 = %w63
    field %o24 = %w54
    u32 %o25 = %w55
    field %o26 = %w56
    u32 %o27 = %w57
    field %o28 = %w58
    field %o29 = %w59
    field %o1(BN) = 53 <Field>
Transition: -> 53

Block 53:
Func: main, Scope: 7
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: u32
    %i9: field
    %i10: u32
    %i11: u32
    %i12: u32
    %i13: field
    %i14: field
    %i15: u32
    %i16: field
    %i17: field
    %i18: u32
    %i19: field
    %i20: u32
    %i21: u32
    %i22: field
    %i23: field
    %i24: field
    %i25: u32
    %i26: field
    %i27: u32
    %i28: field
    %i29: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: u32
    %o9: field
    %o10: u32
    %o11: u32
    %o12: u32
    %o13: field
    %o14: field
    %o15: u32
    %o16: field
    %o17: field
    %o18: u32
    %o19: field
    %o20: u32
    %o21: u32
    %o22: field
    %o23: field
    %o24: field
    %o25: u32
    %o26: field
    %o27: u32
    %o28: field
    %o29: field
Instructions:
    assert %i1(BN) == 53 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    u32 %w69 = %i8
    field %w89 = %i9
    u32 %w60 = %i10
    u32 %w64 = %i11
    u32 %w62 = %i12
    field %w72 = %i13
    field %w73 = %i14
    u32 %w61 = %i15
    field %w91 = %i16
    field %w75 = %i17
    u32 %w78 = %i18
    field %w98 = %i19
    u32 %w99 = %i20
    u32 %w101 = %i21
    field %w102 = %i22
    field %w63 = %i23
    field %w54 = %i24
    u32 %w55 = %i25
    field %w56 = %i26
    u32 %w57 = %i27
    field %w58 = %i28
    field %w59 = %i29
    %w101 = %w101 + 1 <U32>
    field %o4(AS) = %w2(AS)
    field %o6(SP) = %w4(SP)
    field %o5(RP) = %w3(RP)
    field %o3(TS) = %w1(TS)
    field %o7(BP) = %w68
    u32 %o8 = %w69
    field %o9 = %w89
    u32 %o10 = %w60
    u32 %o11 = %w64
    u32 %o12 = %w62
    field %o13 = %w72
    field %o14 = %w73
    u32 %o15 = %w61
    field %o16 = %w91
    field %o17 = %w75
    u32 %o18 = %w78
    field %o19 = %w98
    u32 %o20 = %w99
    u32 %o21 = %w101
    field %o22 = %w102
    field %o23 = %w63
    field %o24 = %w54
    u32 %o25 = %w55
    field %o26 = %w56
    u32 %o27 = %w57
    field %o28 = %w58
    field %o29 = %w59
    field %o1(BN) = %w101 != %w55 ? 50 <Field> : 54 <Field>
Transition:
    %w101 != %w55 ? -> 50 : -> 54

Block 54:
Func: main, Scope: 5
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: u32
    %i9: field
    %i10: u32
    %i11: u32
    %i12: u32
    %i13: field
    %i14: field
    %i15: u32
    %i17: field
    %i18: u32
    %i19: field
    %i20: u32
    %i22: field
    %i23: field
    %i24: field
    %i25: u32
    %i26: field
    %i27: u32
    %i28: field
    %i29: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: u32
    %o9: u32
    %o10: u32
    %o11: u32
    %o12: u32
    %o13: field
    %o14: field
    %o15: u32
    %o16: field
    %o17: field
    %o18: u32
    %o19: field
    %o20: u32
    %o21: field
    %o22: field
    %o23: field
    %o24: u32
    %o25: field
    %o26: u32
    %o27: field
    %o28: field
Instructions:
    assert %i1(BN) == 54 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    u32 %w69 = %i8
    field %w89 = %i9
    u32 %w60 = %i10
    u32 %w64 = %i11
    u32 %w62 = %i12
    field %w72 = %i13
    field %w73 = %i14
    u32 %w61 = %i15
    field %w75 = %i17
    u32 %w78 = %i18
    field %w98 = %i19
    u32 %w99 = %i20
    field %w102 = %i22
    field %w63 = %i23
    field %w54 = %i24
    u32 %w55 = %i25
    field %w56 = %i26
    u32 %w57 = %i27
    field %w58 = %i28
    field %w59 = %i29
    assert %w89 == %w102
    field[%w62] %w274
    field[%w99 + %w62] %w79
    u32 %w275 = 0 <U32>
    field %o4(AS) = %w2(AS)
    field %o6(SP) = %w4(SP)
    field %o5(RP) = %w3(RP)
    field %o3(TS) = %w1(TS)
    field %o7(BP) = %w68
    u32 %o8 = %w69
    u32 %o9 = %w60
    u32 %o10 = %w275
    u32 %o11 = %w64
    u32 %o12 = %w62
    field %o13 = %w72
    field %o14 = %w73
    u32 %o15 = %w61
    field %o16 = %w75
    field %o17 = %w274
    u32 %o18 = %w78
    field %o19 = %w98
    u32 %o20 = %w99
    field %o21 = %w79
    field %o22 = %w63
    field %o23 = %w54
    u32 %o24 = %w55
    field %o25 = %w56
    u32 %o26 = %w57
    field %o27 = %w58
    field %o28 = %w59
    field %o1(BN) = %w275 != %w99 ? 55 <Field> : 56 <Field>
Transition:
    %w275 != %w99 ? -> 55 : -> 56

Block 55:
Func: main, Scope: 6
Exec Bound: 1, While Loop: true, Num VM Ops: 2
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: u32
    %i9: u32
    %i10: u32
    %i11: u32
    %i12: u32
    %i13: field
    %i14: field
    %i15: u32
    %i16: field
    %i17: field
    %i18: u32
    %i19: field
    %i20: u32
    %i21: field
    %i22: field
    %i23: field
    %i24: u32
    %i25: field
    %i26: u32
    %i27: field
    %i28: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: u32
    %o9: u32
    %o10: u32
    %o11: u32
    %o12: u32
    %o13: field
    %o14: field
    %o15: u32
    %o16: field
    %o17: field
    %o18: u32
    %o19: field
    %o20: u32
    %o21: field
    %o22: field
    %o23: field
    %o24: u32
    %o25: field
    %o26: u32
    %o27: field
    %o28: field
Instructions:
    assert %i1(BN) == 55 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    u32 %w69 = %i8
    u32 %w60 = %i9
    u32 %w275 = %i10
    u32 %w64 = %i11
    u32 %w62 = %i12
    field %w72 = %i13
    field %w73 = %i14
    u32 %w61 = %i15
    field %w75 = %i16
    field %w274 = %i17
    u32 %w78 = %i18
    field %w98 = %i19
    u32 %w99 = %i20
    field %w79 = %i21
    field %w63 = %i22
    field %w54 = %i23
    u32 %w55 = %i24
    field %w56 = %i25
    u32 %w57 = %i26
    field %w58 = %i27
    field %w59 = %i28
    field %w276 = %w98[%w275]
    %w79[%w275] = %w276 <field>
    %w275 = %w275 + 1 <U32>
    field %o4(AS) = %w2(AS)
    field %o6(SP) = %w4(SP)
    field %o5(RP) = %w3(RP)
    field %o3(TS) = %w1(TS)
    field %o7(BP) = %w68
    u32 %o8 = %w69
    u32 %o9 = %w60
    u32 %o10 = %w275
    u32 %o11 = %w64
    u32 %o12 = %w62
    field %o13 = %w72
    field %o14 = %w73
    u32 %o15 = %w61
    field %o16 = %w75
    field %o17 = %w274
    u32 %o18 = %w78
    field %o19 = %w98
    u32 %o20 = %w99
    field %o21 = %w79
    field %o22 = %w63
    field %o23 = %w54
    u32 %o24 = %w55
    field %o25 = %w56
    u32 %o26 = %w57
    field %o27 = %w58
    field %o28 = %w59
    field %o1(BN) = %w275 != %w99 ? 55 <Field> : 56 <Field>
Transition:
    %w275 != %w99 ? -> 55 : -> 56

Block 56:
Func: main, Scope: 5
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: u32
    %i9: u32
    %i11: u32
    %i12: u32
    %i13: field
    %i14: field
    %i15: u32
    %i16: field
    %i17: field
    %i18: u32
    %i20: u32
    %i21: field
    %i22: field
    %i23: field
    %i24: u32
    %i25: field
    %i26: u32
    %i27: field
    %i28: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: u32
    %o9: u32
    %o10: u32
    %o11: u32
    %o12: u32
    %o13: field
    %o14: field
    %o15: u32
    %o16: field
    %o17: field
    %o18: u32
    %o19: u32
    %o20: field
    %o21: field
    %o22: field
    %o23: u32
    %o24: field
    %o25: u32
    %o26: field
    %o27: field
Instructions:
    assert %i1(BN) == 56 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    u32 %w69 = %i8
    u32 %w60 = %i9
    u32 %w64 = %i11
    u32 %w62 = %i12
    field %w72 = %i13
    field %w73 = %i14
    u32 %w61 = %i15
    field %w75 = %i16
    field %w274 = %i17
    u32 %w78 = %i18
    u32 %w99 = %i20
    field %w79 = %i21
    field %w63 = %i22
    field %w54 = %i23
    u32 %w55 = %i24
    field %w56 = %i25
    u32 %w57 = %i26
    field %w58 = %i27
    field %w59 = %i28
    u32 %w277 = 0 <U32>
    field %o4(AS) = %w2(AS)
    field %o6(SP) = %w4(SP)
    field %o5(RP) = %w3(RP)
    field %o3(TS) = %w1(TS)
    field %o7(BP) = %w68
    u32 %o8 = %w69
    u32 %o9 = %w60
    u32 %o10 = %w277
    u32 %o11 = %w64
    u32 %o12 = %w62
    field %o13 = %w72
    field %o14 = %w73
    u32 %o15 = %w61
    field %o16 = %w75
    field %o17 = %w274
    u32 %o18 = %w78
    u32 %o19 = %w99
    field %o20 = %w79
    field %o21 = %w63
    field %o22 = %w54
    u32 %o23 = %w55
    field %o24 = %w56
    u32 %o25 = %w57
    field %o26 = %w58
    field %o27 = %w59
    field %o1(BN) = %w277 != %w62 ? 57 <Field> : 59 <Field>
Transition:
    %w277 != %w62 ? -> 57 : -> 59

Block 57:
Func: main, Scope: 6
Exec Bound: 1, While Loop: true, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: u32
    %i9: u32
    %i10: u32
    %i11: u32
    %i12: u32
    %i13: field
    %i14: field
    %i15: u32
    %i16: field
    %i17: field
    %i18: u32
    %i19: u32
    %i20: field
    %i21: field
    %i22: field
    %i23: u32
    %i24: field
    %i25: u32
    %i26: field
    %i27: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o10: u32
    %o11: u32
    %o24: field
    %o25: field
    %o12: u32
    %o27: field
    %o30: field
    %o31: u32
    %o13: field
    %o32: u32
    %o33: field
    %o14: field
    %o15: field
    %o16: u32
    %o17: field
    %o18: u32
    %o19: field
    %o20: field
Instructions:
    assert %i1(BN) == 57 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    u32 %w69 = %i8
    u32 %w60 = %i9
    u32 %w277 = %i10
    u32 %w64 = %i11
    u32 %w62 = %i12
    field %w72 = %i13
    field %w73 = %i14
    u32 %w61 = %i15
    field %w75 = %i16
    field %w274 = %i17
    u32 %w78 = %i18
    u32 %w99 = %i19
    field %w79 = %i20
    field %w63 = %i21
    field %w54 = %i22
    u32 %w55 = %i23
    field %w56 = %i24
    u32 %w57 = %i25
    field %w58 = %i26
    field %w59 = %i27
    field %w66 = %w63
    %PHY[%SP + 0] = %w4(SP) <field>
    %w4(SP) = %w3(RP)
    %PHY[%SP + 1] = %w68 <field>
    %PHY[%SP + 2] = %w69 <u32>
    %PHY[%SP + 3] = %w60 <u32>
    %PHY[%SP + 4] = %w277 <u32>
    field %w67 = 58 <Field>
    %w3(RP) = %w3(RP) + 5 <Field>
    field %o4(AS) = %w2(AS)
    field %o6(SP) = %w4(SP)
    field %o5(RP) = %w3(RP)
    field %o3(TS) = %w1(TS)
    u32 %o10 = %w64
    u32 %o11 = %w62
    field %o24 = %w72
    field %o25 = %w73
    u32 %o12 = %w61
    field %o27 = %w75
    field %o30 = %w274
    u32 %o31 = %w78
    field %o13 = %w67
    u32 %o32 = %w99
    field %o33 = %w79
    field %o14 = %w66
    field %o15 = %w54
    u32 %o16 = %w55
    field %o17 = %w56
    u32 %o18 = %w57
    field %o19 = %w58
    field %o20 = %w59
    field %o1(BN) = 70 <Field>
Transition: -> 70

Block 58:
Func: main, Scope: 7
Exec Bound: 1, While Loop: false, Num VM Ops: 2
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i7(BP): field
    %i5(RP): field
    %i3(TS): field
    %i12: u32
    %i15: u32
    %i16: field
    %i17: field
    %i18: u32
    %i20: field
    %i23: field
    %i24: u32
    %i25: u32
    %i26: field
    %i28: field
    %i29: u32
    %i30: field
    %i31: u32
    %i32: field
    %i33: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: u32
    %o9: u32
    %o10: u32
    %o11: u32
    %o12: u32
    %o13: field
    %o14: field
    %o15: u32
    %o16: field
    %o17: field
    %o18: u32
    %o19: u32
    %o20: field
    %o21: field
    %o22: field
    %o23: u32
    %o24: field
    %o25: u32
    %o26: field
    %o27: field
Instructions:
    assert %i1(BN) == 58 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w200 = %i7(BP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    u32 %w64 = %i12
    u32 %w62 = %i15
    field %w72 = %i16
    field %w73 = %i17
    u32 %w61 = %i18
    field %w75 = %i20
    field %w274 = %i23
    u32 %w78 = %i24
    u32 %w99 = %i25
    field %w79 = %i26
    field %w54 = %i28
    u32 %w55 = %i29
    field %w56 = %i30
    u32 %w57 = %i31
    field %w58 = %i32
    field %w59 = %i33
    u32 %w277 = %PHY[%BP + 4]
    u32 %w60 = %PHY[%BP + 3]
    u32 %w69 = %PHY[%BP + 2]
    field %w68 = %PHY[%BP + 1]
    field %w4(SP) = %PHY[%BP + 0]
    field %w278 = %w200
    field %w63 = %w278
    %w274[%w277] = %w63 <field>
    %w79[%w99 + %w277] = %w63 <field>
    %w277 = %w277 + 1 <U32>
    field %o4(AS) = %w2(AS)
    field %o6(SP) = %w4(SP)
    field %o5(RP) = %w3(RP)
    field %o3(TS) = %w1(TS)
    field %o7(BP) = %w68
    u32 %o8 = %w69
    u32 %o9 = %w60
    u32 %o10 = %w277
    u32 %o11 = %w64
    u32 %o12 = %w62
    field %o13 = %w72
    field %o14 = %w73
    u32 %o15 = %w61
    field %o16 = %w75
    field %o17 = %w274
    u32 %o18 = %w78
    u32 %o19 = %w99
    field %o20 = %w79
    field %o21 = %w63
    field %o22 = %w54
    u32 %o23 = %w55
    field %o24 = %w56
    u32 %o25 = %w57
    field %o26 = %w58
    field %o27 = %w59
    field %o1(BN) = %w277 != %w62 ? 57 <Field> : 59 <Field>
Transition:
    %w277 != %w62 ? -> 57 : -> 59

Block 59:
Func: main, Scope: 5
Exec Bound: 1, While Loop: false, Num VM Ops: 1
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: u32
    %i9: u32
    %i11: u32
    %i12: u32
    %i13: field
    %i14: field
    %i15: u32
    %i16: field
    %i17: field
    %i18: u32
    %i20: field
    %i21: field
    %i22: field
    %i23: u32
    %i24: field
    %i25: u32
    %i26: field
    %i27: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: u32
    %o9: field
    %o10: u32
    %o11: u32
    %o12: u32
    %o13: u32
    %o14: field
    %o15: field
    %o16: u32
    %o17: u32
    %o18: field
    %o19: field
    %o20: u32
    %o21: u32
    %o22: field
    %o23: field
    %o24: field
    %o25: u32
    %o26: field
    %o27: u32
    %o28: field
    %o29: field
Instructions:
    assert %i1(BN) == 59 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    u32 %w69 = %i8
    u32 %w60 = %i9
    u32 %w64 = %i11
    u32 %w62 = %i12
    field %w72 = %i13
    field %w73 = %i14
    u32 %w61 = %i15
    field %w75 = %i16
    field %w274 = %i17
    u32 %w78 = %i18
    field %w79 = %i20
    field %w63 = %i21
    field %w54 = %i22
    u32 %w55 = %i23
    field %w56 = %i24
    u32 %w57 = %i25
    field %w58 = %i26
    field %w59 = %i27
    u32 %w77 = %w62
    u32 %w279 = %w61
    field %w76 = %w274
    field[%w279] %w70
    %w70[0 <Field>] = 1 <Field> <field>
    u32 %w74 = 1 <U32>
    u32 %w71 = 0 <U32>
    field %o4(AS) = %w2(AS)
    field %o6(SP) = %w4(SP)
    field %o5(RP) = %w3(RP)
    field %o3(TS) = %w1(TS)
    field %o7(BP) = %w68
    u32 %o8 = %w69
    field %o9 = %w70
    u32 %o10 = %w60
    u32 %o11 = %w71
    u32 %o12 = %w64
    u32 %o13 = %w62
    field %o14 = %w72
    field %o15 = %w73
    u32 %o16 = %w74
    u32 %o17 = %w61
    field %o18 = %w75
    field %o19 = %w76
    u32 %o20 = %w77
    u32 %o21 = %w78
    field %o22 = %w79
    field %o23 = %w63
    field %o24 = %w54
    u32 %o25 = %w55
    field %o26 = %w56
    u32 %o27 = %w57
    field %o28 = %w58
    field %o29 = %w59
    field %o1(BN) = %w71 != %w77 ? 1 <Field> : 4 <Field>
Transition:
    %w71 != %w77 ? -> 1 : -> 4

Block 60:
Func: main, Scope: 6
Exec Bound: 1, While Loop: true, Num VM Ops: 1
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: field
    %i9: u32
    %i10: u32
    %i11: u32
    %i12: u32
    %i13: field
    %i14: field
    %i15: u32
    %i16: field
    %i17: field
    %i18: u32
    %i19: field
    %i20: u32
    %i21: field
    %i22: field
    %i23: u32
    %i24: field
    %i25: u32
    %i26: field
    %i27: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: field
    %o9: u32
    %o10: u32
    %o11: u32
    %o12: u32
    %o13: field
    %o14: field
    %o15: u32
    %o16: field
    %o17: field
    %o18: u32
    %o19: field
    %o20: u32
    %o21: field
    %o22: field
    %o23: u32
    %o24: field
    %o25: u32
    %o26: field
    %o27: field
Instructions:
    assert %i1(BN) == 60 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    field %w86 = %i8
    u32 %w69 = %i9
    u32 %w60 = %i10
    u32 %w64 = %i11
    u32 %w62 = %i12
    field %w72 = %i13
    field %w73 = %i14
    u32 %w61 = %i15
    field %w87 = %i16
    field %w75 = %i17
    u32 %w78 = %i18
    field %w79 = %i19
    u32 %w88 = %i20
    field %w63 = %i21
    field %w54 = %i22
    u32 %w55 = %i23
    field %w56 = %i24
    u32 %w57 = %i25
    field %w58 = %i26
    field %w59 = %i27
    u32 %w280 = %w54[%w88]
    field %o4(AS) = %w2(AS)
    field %o6(SP) = %w4(SP)
    field %o5(RP) = %w3(RP)
    field %o3(TS) = %w1(TS)
    field %o7(BP) = %w68
    field %o8 = %w86
    u32 %o9 = %w69
    u32 %o10 = %w60
    u32 %o11 = %w64
    u32 %o12 = %w62
    field %o13 = %w72
    field %o14 = %w73
    u32 %o15 = %w61
    field %o16 = %w87
    field %o17 = %w75
    u32 %o18 = %w78
    field %o19 = %w79
    u32 %o20 = %w88
    field %o21 = %w63
    field %o22 = %w54
    u32 %o23 = %w55
    field %o24 = %w56
    u32 %o25 = %w57
    field %o26 = %w58
    field %o27 = %w59
    field %o1(BN) = %w280 < %w78 ? 61 <Field> : 64 <Field>
Transition:
    %w280 < %w78 ? -> 61 : -> 64

Block 61:
Func: main, Scope: 8
Exec Bound: 1, While Loop: false, Num VM Ops: 1
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: field
    %i9: u32
    %i10: u32
    %i11: u32
    %i12: u32
    %i13: field
    %i14: field
    %i15: u32
    %i16: field
    %i17: field
    %i18: u32
    %i19: field
    %i20: u32
    %i21: field
    %i22: field
    %i23: u32
    %i24: field
    %i25: u32
    %i26: field
    %i27: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: field
    %o9: field
    %o10: u32
    %o11: field
    %o12: u32
    %o13: u32
    %o14: u32
    %o15: u32
    %o16: field
    %o17: field
    %o18: u32
    %o19: field
    %o20: field
    %o21: u32
    %o22: field
    %o23: u32
    %o24: field
    %o25: field
    %o26: u32
    %o27: field
    %o28: u32
    %o29: field
    %o30: field
Instructions:
    assert %i1(BN) == 61 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    field %w86 = %i8
    u32 %w69 = %i9
    u32 %w60 = %i10
    u32 %w64 = %i11
    u32 %w62 = %i12
    field %w72 = %i13
    field %w73 = %i14
    u32 %w61 = %i15
    field %w87 = %i16
    field %w75 = %i17
    u32 %w78 = %i18
    field %w79 = %i19
    u32 %w88 = %i20
    field %w63 = %i21
    field %w54 = %i22
    u32 %w55 = %i23
    field %w56 = %i24
    u32 %w57 = %i25
    field %w58 = %i26
    field %w59 = %i27
    field %w281 = %w68[%w88]
    field %w282 = %w281
    field %w283 = 0 <Field>
    u32 %w284 = 0 <U32>
    field %o4(AS) = %w2(AS)
    field %o6(SP) = %w4(SP)
    field %o5(RP) = %w3(RP)
    field %o3(TS) = %w1(TS)
    field %o7(BP) = %w282
    field %o8 = %w68
    field %o9 = %w86
    u32 %o10 = %w69
    field %o11 = %w283
    u32 %o12 = %w60
    u32 %o13 = %w284
    u32 %o14 = %w64
    u32 %o15 = %w62
    field %o16 = %w72
    field %o17 = %w73
    u32 %o18 = %w61
    field %o19 = %w87
    field %o20 = %w75
    u32 %o21 = %w78
    field %o22 = %w79
    u32 %o23 = %w88
    field %o24 = %w63
    field %o25 = %w54
    u32 %o26 = %w55
    field %o27 = %w56
    u32 %o28 = %w57
    field %o29 = %w58
    field %o30 = %w59
    field %o1(BN) = %w284 != %w69 ? 62 <Field> : 63 <Field>
Transition:
    %w284 != %w69 ? -> 62 : -> 63

Block 62:
Func: main, Scope: 10
Exec Bound: 1, While Loop: true, Num VM Ops: 4
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: field
    %i9: field
    %i10: u32
    %i11: field
    %i12: u32
    %i13: u32
    %i14: u32
    %i15: u32
    %i16: field
    %i17: field
    %i18: u32
    %i19: field
    %i20: field
    %i21: u32
    %i22: field
    %i23: u32
    %i24: field
    %i25: field
    %i26: u32
    %i27: field
    %i28: u32
    %i29: field
    %i30: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: field
    %o9: field
    %o10: u32
    %o11: field
    %o12: u32
    %o13: u32
    %o14: u32
    %o15: u32
    %o16: field
    %o17: field
    %o18: u32
    %o19: field
    %o20: field
    %o21: u32
    %o22: field
    %o23: u32
    %o24: field
    %o25: field
    %o26: u32
    %o27: field
    %o28: u32
    %o29: field
    %o30: field
Instructions:
    assert %i1(BN) == 62 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w282 = %i7(BP)
    field %w68 = %i8
    field %w86 = %i9
    u32 %w69 = %i10
    field %w283 = %i11
    u32 %w60 = %i12
    u32 %w284 = %i13
    u32 %w64 = %i14
    u32 %w62 = %i15
    field %w72 = %i16
    field %w73 = %i17
    u32 %w61 = %i18
    field %w87 = %i19
    field %w75 = %i20
    u32 %w78 = %i21
    field %w79 = %i22
    u32 %w88 = %i23
    field %w63 = %i24
    field %w54 = %i25
    u32 %w55 = %i26
    field %w56 = %i27
    u32 %w57 = %i28
    field %w58 = %i29
    field %w59 = %i30
    field %w285 = %w58[%w88]
    field %w286 = %w285[%w78]
    field %w287 = %w286[%w284]
    field %w288 = %w86[%w284]
    %w283 = %w283 + %w287 * %w288
    %w284 = %w284 + 1 <U32>
    field %o4(AS) = %w2(AS)
    field %o6(SP) = %w4(SP)
    field %o5(RP) = %w3(RP)
    field %o3(TS) = %w1(TS)
    field %o7(BP) = %w282
    field %o8 = %w68
    field %o9 = %w86
    u32 %o10 = %w69
    field %o11 = %w283
    u32 %o12 = %w60
    u32 %o13 = %w284
    u32 %o14 = %w64
    u32 %o15 = %w62
    field %o16 = %w72
    field %o17 = %w73
    u32 %o18 = %w61
    field %o19 = %w87
    field %o20 = %w75
    u32 %o21 = %w78
    field %o22 = %w79
    u32 %o23 = %w88
    field %o24 = %w63
    field %o25 = %w54
    u32 %o26 = %w55
    field %o27 = %w56
    u32 %o28 = %w57
    field %o29 = %w58
    field %o30 = %w59
    field %o1(BN) = %w284 != %w69 ? 62 <Field> : 63 <Field>
Transition:
    %w284 != %w69 ? -> 62 : -> 63

Block 63:
Func: main, Scope: 9
Exec Bound: 1, While Loop: false, Num VM Ops: 1
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: field
    %i9: field
    %i10: u32
    %i11: field
    %i12: u32
    %i14: u32
    %i15: u32
    %i16: field
    %i17: field
    %i18: u32
    %i19: field
    %i20: field
    %i21: u32
    %i22: field
    %i23: u32
    %i24: field
    %i25: field
    %i26: u32
    %i27: field
    %i28: u32
    %i29: field
    %i30: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: field
    %o9: u32
    %o10: u32
    %o11: u32
    %o12: u32
    %o13: field
    %o14: field
    %o15: u32
    %o16: field
    %o17: field
    %o18: u32
    %o19: field
    %o20: u32
    %o21: field
    %o22: field
    %o23: u32
    %o24: field
    %o25: u32
    %o26: field
    %o27: field
Instructions:
    assert %i1(BN) == 63 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w282 = %i7(BP)
    field %w68 = %i8
    field %w86 = %i9
    u32 %w69 = %i10
    field %w283 = %i11
    u32 %w60 = %i12
    u32 %w64 = %i14
    u32 %w62 = %i15
    field %w72 = %i16
    field %w73 = %i17
    u32 %w61 = %i18
    field %w87 = %i19
    field %w75 = %i20
    u32 %w78 = %i21
    field %w79 = %i22
    u32 %w88 = %i23
    field %w63 = %i24
    field %w54 = %i25
    u32 %w55 = %i26
    field %w56 = %i27
    u32 %w57 = %i28
    field %w58 = %i29
    field %w59 = %i30
    %w75[%w88] = %w283 <field>
    %w87 = %w87 + %w282 * %w283
    field %o4(AS) = %w2(AS)
    field %o6(SP) = %w4(SP)
    field %o5(RP) = %w3(RP)
    field %o3(TS) = %w1(TS)
    field %o7(BP) = %w68
    field %o8 = %w86
    u32 %o9 = %w69
    u32 %o10 = %w60
    u32 %o11 = %w64
    u32 %o12 = %w62
    field %o13 = %w72
    field %o14 = %w73
    u32 %o15 = %w61
    field %o16 = %w87
    field %o17 = %w75
    u32 %o18 = %w78
    field %o19 = %w79
    u32 %o20 = %w88
    field %o21 = %w63
    field %o22 = %w54
    u32 %o23 = %w55
    field %o24 = %w56
    u32 %o25 = %w57
    field %o26 = %w58
    field %o27 = %w59
    field %o1(BN) = 65 <Field>
Transition: -> 65

Block 64:
Func: main, Scope: 8
Exec Bound: 1, While Loop: false, Num VM Ops: 1
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: field
    %i9: u32
    %i10: u32
    %i11: u32
    %i12: u32
    %i13: field
    %i14: field
    %i15: u32
    %i16: field
    %i17: field
    %i18: u32
    %i19: field
    %i20: u32
    %i21: field
    %i22: field
    %i23: u32
    %i24: field
    %i25: u32
    %i26: field
    %i27: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: field
    %o9: u32
    %o10: u32
    %o11: u32
    %o12: u32
    %o13: field
    %o14: field
    %o15: u32
    %o16: field
    %o17: field
    %o18: u32
    %o19: field
    %o20: u32
    %o21: field
    %o22: field
    %o23: u32
    %o24: field
    %o25: u32
    %o26: field
    %o27: field
Instructions:
    assert %i1(BN) == 64 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    field %w86 = %i8
    u32 %w69 = %i9
    u32 %w60 = %i10
    u32 %w64 = %i11
    u32 %w62 = %i12
    field %w72 = %i13
    field %w73 = %i14
    u32 %w61 = %i15
    field %w87 = %i16
    field %w75 = %i17
    u32 %w78 = %i18
    field %w79 = %i19
    u32 %w88 = %i20
    field %w63 = %i21
    field %w54 = %i22
    u32 %w55 = %i23
    field %w56 = %i24
    u32 %w57 = %i25
    field %w58 = %i26
    field %w59 = %i27
    %w75[%w88] = 0 <Field> <field>
    field %o4(AS) = %w2(AS)
    field %o6(SP) = %w4(SP)
    field %o5(RP) = %w3(RP)
    field %o3(TS) = %w1(TS)
    field %o7(BP) = %w68
    field %o8 = %w86
    u32 %o9 = %w69
    u32 %o10 = %w60
    u32 %o11 = %w64
    u32 %o12 = %w62
    field %o13 = %w72
    field %o14 = %w73
    u32 %o15 = %w61
    field %o16 = %w87
    field %o17 = %w75
    u32 %o18 = %w78
    field %o19 = %w79
    u32 %o20 = %w88
    field %o21 = %w63
    field %o22 = %w54
    u32 %o23 = %w55
    field %o24 = %w56
    u32 %o25 = %w57
    field %o26 = %w58
    field %o27 = %w59
    field %o1(BN) = 65 <Field>
Transition: -> 65

Block 65:
Func: main, Scope: 7
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: field
    %i9: u32
    %i10: u32
    %i11: u32
    %i12: u32
    %i13: field
    %i14: field
    %i15: u32
    %i16: field
    %i17: field
    %i18: u32
    %i19: field
    %i20: u32
    %i21: field
    %i22: field
    %i23: u32
    %i24: field
    %i25: u32
    %i26: field
    %i27: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: field
    %o9: u32
    %o10: u32
    %o11: u32
    %o12: u32
    %o13: field
    %o14: field
    %o15: u32
    %o16: field
    %o17: field
    %o18: u32
    %o19: field
    %o20: u32
    %o21: field
    %o22: field
    %o23: u32
    %o24: field
    %o25: u32
    %o26: field
    %o27: field
Instructions:
    assert %i1(BN) == 65 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    field %w86 = %i8
    u32 %w69 = %i9
    u32 %w60 = %i10
    u32 %w64 = %i11
    u32 %w62 = %i12
    field %w72 = %i13
    field %w73 = %i14
    u32 %w61 = %i15
    field %w87 = %i16
    field %w75 = %i17
    u32 %w78 = %i18
    field %w79 = %i19
    u32 %w88 = %i20
    field %w63 = %i21
    field %w54 = %i22
    u32 %w55 = %i23
    field %w56 = %i24
    u32 %w57 = %i25
    field %w58 = %i26
    field %w59 = %i27
    %w88 = %w88 + 1 <U32>
    field %o4(AS) = %w2(AS)
    field %o6(SP) = %w4(SP)
    field %o5(RP) = %w3(RP)
    field %o3(TS) = %w1(TS)
    field %o7(BP) = %w68
    field %o8 = %w86
    u32 %o9 = %w69
    u32 %o10 = %w60
    u32 %o11 = %w64
    u32 %o12 = %w62
    field %o13 = %w72
    field %o14 = %w73
    u32 %o15 = %w61
    field %o16 = %w87
    field %o17 = %w75
    u32 %o18 = %w78
    field %o19 = %w79
    u32 %o20 = %w88
    field %o21 = %w63
    field %o22 = %w54
    u32 %o23 = %w55
    field %o24 = %w56
    u32 %o25 = %w57
    field %o26 = %w58
    field %o27 = %w59
    field %o1(BN) = %w88 != %w57 ? 60 <Field> : 66 <Field>
Transition:
    %w88 != %w57 ? -> 60 : -> 66

Block 66:
Func: main, Scope: 5
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: field
    %i9: u32
    %i10: u32
    %i11: u32
    %i12: u32
    %i13: field
    %i14: field
    %i15: u32
    %i16: field
    %i17: field
    %i18: u32
    %i19: field
    %i21: field
    %i22: field
    %i23: u32
    %i24: field
    %i25: u32
    %i26: field
    %i27: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: field
    %o9: u32
    %o10: u32
    %o11: u32
    %o12: u32
    %o13: field
    %o14: field
    %o15: field
    %o16: u32
    %o17: field
    %o18: field
    %o19: u32
    %o20: field
    %o21: u32
    %o22: field
    %o23: field
    %o24: u32
    %o25: field
    %o26: u32
    %o27: field
    %o28: field
Instructions:
    assert %i1(BN) == 66 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    field %w86 = %i8
    u32 %w69 = %i9
    u32 %w60 = %i10
    u32 %w64 = %i11
    u32 %w62 = %i12
    field %w72 = %i13
    field %w73 = %i14
    u32 %w61 = %i15
    field %w87 = %i16
    field %w75 = %i17
    u32 %w78 = %i18
    field %w79 = %i19
    field %w63 = %i21
    field %w54 = %i22
    u32 %w55 = %i23
    field %w56 = %i24
    u32 %w57 = %i25
    field %w58 = %i26
    field %w59 = %i27
    field %w289 = 0 <Field>
    u32 %w290 = 0 <U32>
    field %o4(AS) = %w2(AS)
    field %o6(SP) = %w4(SP)
    field %o5(RP) = %w3(RP)
    field %o3(TS) = %w1(TS)
    field %o7(BP) = %w68
    field %o8 = %w86
    u32 %o9 = %w69
    u32 %o10 = %w60
    u32 %o11 = %w64
    u32 %o12 = %w62
    field %o13 = %w289
    field %o14 = %w72
    field %o15 = %w73
    u32 %o16 = %w61
    field %o17 = %w87
    field %o18 = %w75
    u32 %o19 = %w78
    field %o20 = %w79
    u32 %o21 = %w290
    field %o22 = %w63
    field %o23 = %w54
    u32 %o24 = %w55
    field %o25 = %w56
    u32 %o26 = %w57
    field %o27 = %w58
    field %o28 = %w59
    field %o1(BN) = %w290 != %w55 ? 67 <Field> : 68 <Field>
Transition:
    %w290 != %w55 ? -> 67 : -> 68

Block 67:
Func: main, Scope: 6
Exec Bound: 1, While Loop: true, Num VM Ops: 21
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: field
    %i9: u32
    %i10: u32
    %i11: u32
    %i12: u32
    %i13: field
    %i14: field
    %i15: field
    %i16: u32
    %i17: field
    %i18: field
    %i19: u32
    %i20: field
    %i21: u32
    %i22: field
    %i23: field
    %i24: u32
    %i25: field
    %i26: u32
    %i27: field
    %i28: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: field
    %o9: u32
    %o10: u32
    %o11: u32
    %o12: u32
    %o13: field
    %o14: field
    %o15: field
    %o16: u32
    %o17: field
    %o18: field
    %o19: u32
    %o20: field
    %o21: u32
    %o22: field
    %o23: field
    %o24: u32
    %o25: field
    %o26: u32
    %o27: field
    %o28: field
Instructions:
    assert %i1(BN) == 67 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    field %w86 = %i8
    u32 %w69 = %i9
    u32 %w60 = %i10
    u32 %w64 = %i11
    u32 %w62 = %i12
    field %w289 = %i13
    field %w72 = %i14
    field %w73 = %i15
    u32 %w61 = %i16
    field %w87 = %i17
    field %w75 = %i18
    u32 %w78 = %i19
    field %w79 = %i20
    u32 %w290 = %i21
    field %w63 = %i22
    field %w54 = %i23
    u32 %w55 = %i24
    field %w56 = %i25
    u32 %w57 = %i26
    field %w58 = %i27
    field %w59 = %i28
    u32 %w291 = %w54[%w290]
    field %w293 = 0 <Field>
    field %w294 = 0 <Field>
    field %w303 = 0 <Field>
    field %w304 = 0 <Field>
    if %w291 < %w78:
        field %w292 = %w68[%w64 + 2 <U32> * %w290]
        %w293 = %w292
        field %w292 = %w68[%w64 + 2 <U32> * %w290 + 1 <U32>]
        %w294 = %w292
        field %w295 = %w56[%w290]
        field %w296 = %w295[%w78]
        field %w297 = %w296[0 <Field>]
        field %w298 = %w86[0 <Field>]
        field %w299 = %w56[%w290]
        field %w300 = %w299[%w78]
        field %w301 = %w300[1 <Field>]
        field %w302 = %w86[1 <Field>]
        %w303 = %w297 * %w298 + %w301 * %w302
        field %w295 = %w56[%w290]
        field %w296 = %w295[%w78]
        field %w297 = %w296[2 <Field>]
        field %w298 = %w86[0 <Field>]
        field %w299 = %w56[%w290]
        field %w300 = %w299[%w78]
        field %w301 = %w300[3 <Field>]
        field %w302 = %w86[1 <Field>]
        %w304 = %w297 * %w298 + %w301 * %w302
        %w72[%w290] = %w303 <field>
        %w73[%w290] = %w304 <field>
        %w289 = %w289 + %w293 * %w303 + %w294 * %w304
    else:
        %w72[%w290] = 0 <Field> <field>
        %w73[%w290] = 0 <Field> <field>
        Dummy Load
        Dummy Load
        Dummy Load
        Dummy Load
        Dummy Load
        Dummy Load
        Dummy Load
        Dummy Load
        Dummy Load
        Dummy Load
        Dummy Load
        Dummy Load
        Dummy Load
        Dummy Load
        Dummy Load
        Dummy Load
        Dummy Load
        Dummy Load
    %w290 = %w290 + 1 <U32>
    field %o4(AS) = %w2(AS)
    field %o6(SP) = %w4(SP)
    field %o5(RP) = %w3(RP)
    field %o3(TS) = %w1(TS)
    field %o7(BP) = %w68
    field %o8 = %w86
    u32 %o9 = %w69
    u32 %o10 = %w60
    u32 %o11 = %w64
    u32 %o12 = %w62
    field %o13 = %w289
    field %o14 = %w72
    field %o15 = %w73
    u32 %o16 = %w61
    field %o17 = %w87
    field %o18 = %w75
    u32 %o19 = %w78
    field %o20 = %w79
    u32 %o21 = %w290
    field %o22 = %w63
    field %o23 = %w54
    u32 %o24 = %w55
    field %o25 = %w56
    u32 %o26 = %w57
    field %o27 = %w58
    field %o28 = %w59
    field %o1(BN) = %w290 != %w55 ? 67 <Field> : 68 <Field>
Transition:
    %w290 != %w55 ? -> 67 : -> 68

Block 68:
Func: main, Scope: 5
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i9: u32
    %i10: u32
    %i11: u32
    %i12: u32
    %i13: field
    %i14: field
    %i15: field
    %i16: u32
    %i17: field
    %i18: field
    %i19: u32
    %i20: field
    %i22: field
    %i23: field
    %i24: u32
    %i25: field
    %i26: u32
    %i27: field
    %i28: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o5(RP): field
    %o3(TS): field
    %o7(BP): field
    %o8: u32
    %o9: u32
    %o10: u32
    %o11: u32
    %o12: field
    %o13: field
    %o14: field
    %o15: field
    %o16: u32
    %o17: field
    %o18: u32
    %o19: field
    %o20: field
    %o21: u32
    %o22: field
    %o23: u32
    %o24: field
    %o25: field
Instructions:
    assert %i1(BN) == 68 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    u32 %w69 = %i9
    u32 %w60 = %i10
    u32 %w64 = %i11
    u32 %w62 = %i12
    field %w289 = %i13
    field %w72 = %i14
    field %w73 = %i15
    u32 %w61 = %i16
    field %w87 = %i17
    field %w75 = %i18
    u32 %w78 = %i19
    field %w79 = %i20
    field %w63 = %i22
    field %w54 = %i23
    u32 %w55 = %i24
    field %w56 = %i25
    u32 %w57 = %i26
    field %w58 = %i27
    field %w59 = %i28
    field %w305 = %w87 + %w289
    field %w306 = %w79
    field %w307 = %w305
    field %w247 = %w307
    field %w248 = %w306
    %w69 = %w69 * %w61
    %w78 = %w78 + 1 <U32>
    field %o4(AS) = %w2(AS)
    field %o6(SP) = %w4(SP)
    field %o5(RP) = %w3(RP)
    field %o3(TS) = %w1(TS)
    field %o7(BP) = %w68
    u32 %o8 = %w69
    u32 %o9 = %w60
    u32 %o10 = %w64
    u32 %o11 = %w62
    field %o12 = %w72
    field %o13 = %w73
    field %o14 = %w247
    field %o15 = %w248
    u32 %o16 = %w61
    field %o17 = %w75
    u32 %o18 = %w78
    field %o19 = %w63
    field %o20 = %w54
    u32 %o21 = %w55
    field %o22 = %w56
    u32 %o23 = %w57
    field %o24 = %w58
    field %o25 = %w59
    field %o1(BN) = %w78 != %w60 - 1 <U32> ? 41 <Field> : 69 <Field>
Transition:
    %w78 != %w60 - 1 <U32> ? -> 41 : -> 69

Block 69:
Func: main, Scope: 2
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
Outputs:
    %o1(BN): field
    %o2(RET): u32
Instructions:
    assert %i1(BN) == 69 <Field>
    u32 %w84 = 1 <U32>
    u32 %o2(RET) = %w84
    field %o1(BN) = 72 <Field>
Program terminates.

Block 70:
Func: append_message_field, Scope: 0
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i21: u32
    %i7(BP): field
    %i8: u32
    %i9: field
    %i10: u32
    %i22: field
    %i23: u32
    %i11: u32
    %i24: field
    %i25: field
    %i12: u32
    %i26: field
    %i27: field
    %i28: field
    %i29: field
    %i30: field
    %i31: u32
    %i13: field
    %i32: u32
    %i33: field
    %i14: field
    %i34: field
    %i15: field
    %i16: u32
    %i17: field
    %i18: u32
    %i19: field
    %i20: field
    %i35: field
    %i36: bool
    %i37: u32
    %i38: u32
    %i39: field
    %i40: u32
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o7(BP): field
    %o5(RP): field
    %o3(TS): field
    %o8: u32
    %o9: field
    %o10: u32
    %o11: field
    %o12: u32
    %o13: field
    %o14: u32
    %o15: u32
    %o16: field
    %o17: field
    %o18: u32
    %o19: field
    %o20: field
    %o21: field
    %o22: field
    %o23: field
    %o24: u32
    %o25: u32
    %o26: field
    %o27: field
    %o28: field
    %o29: u32
    %o30: field
    %o31: u32
    %o32: field
    %o33: field
    %o34: field
    %o35: bool
    %o36: u32
    %o37: u32
    %o38: field
    %o39: u32
Instructions:
    assert %i1(BN) == 70 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    u32 %w196 = %i21
    field %w53 = %i7(BP)
    u32 %w65 = %i8
    field %w52 = %i9
    u32 %w64 = %i10
    field %w118 = %i22
    u32 %w199 = %i23
    u32 %w62 = %i11
    field %w72 = %i24
    field %w73 = %i25
    u32 %w61 = %i12
    field %w91 = %i26
    field %w75 = %i27
    field %w176 = %i28
    field %w198 = %i29
    field %w274 = %i30
    u32 %w78 = %i31
    field %w67 = %i13
    u32 %w99 = %i32
    field %w79 = %i33
    field %w66 = %i14
    field %w63 = %i34
    field %w54 = %i15
    u32 %w55 = %i16
    field %w56 = %i17
    u32 %w57 = %i18
    field %w58 = %i19
    field %w59 = %i20
    field %w190 = %i35
    bool %w191 = %i36
    u32 %w192 = %i37
    u32 %w193 = %i38
    field %w194 = %i39
    u32 %w195 = %i40
    field %w200 = %w66
    field %o4(AS) = %w2(AS)
    field %o6(SP) = %w4(SP)
    field %o7(BP) = %w200
    field %o5(RP) = %w3(RP)
    field %o3(TS) = %w1(TS)
    u32 %o8 = %w196
    field %o9 = %w53
    u32 %o10 = %w65
    field %o11 = %w52
    u32 %o12 = %w64
    field %o13 = %w118
    u32 %o14 = %w199
    u32 %o15 = %w62
    field %o16 = %w72
    field %o17 = %w73
    u32 %o18 = %w61
    field %o19 = %w91
    field %o20 = %w75
    field %o21 = %w176
    field %o22 = %w198
    field %o23 = %w274
    u32 %o24 = %w78
    u32 %o25 = %w99
    field %o26 = %w79
    field %o27 = %w63
    field %o28 = %w54
    u32 %o29 = %w55
    field %o30 = %w56
    u32 %o31 = %w57
    field %o32 = %w58
    field %o33 = %w59
    field %o34 = %w190
    bool %o35 = %w191
    u32 %o36 = %w192
    u32 %o37 = %w193
    field %o38 = %w194
    u32 %o39 = %w195
    field %o1(BN) = %w67
Transition: -> %w67

Block 71:
Func: append_message_u32, Scope: 0
Exec Bound: 1, While Loop: false, Num VM Ops: 0
Inputs:
    %i1(BN): field
    %i4(AS): field
    %i6(SP): field
    %i5(RP): field
    %i3(TS): field
    %i7(BP): field
    %i8: u32
    %i9: u32
    %i10: field
    %i11: u32
    %i12: u32
    %i13: u32
    %i14: u32
    %i15: field
    %i16: field
    %i17: u32
    %i18: field
    %i19: field
    %i20: field
    %i21: u32
    %i22: field
    %i23: u32
    %i24: field
    %i25: field
    %i26: field
    %i27: u32
    %i28: field
    %i29: u32
    %i30: field
    %i31: field
Outputs:
    %o1(BN): field
    %o4(AS): field
    %o6(SP): field
    %o7(BP): field
    %o5(RP): field
    %o3(TS): field
    %o8: field
    %o9: u32
    %o10: u32
    %o11: field
    %o12: u32
    %o13: u32
    %o14: u32
    %o15: u32
    %o16: field
    %o17: field
    %o18: u32
    %o19: field
    %o20: field
    %o21: field
    %o22: u32
    %o23: u32
    %o24: field
    %o25: field
    %o26: u32
    %o27: field
    %o28: u32
    %o29: field
    %o30: field
Instructions:
    assert %i1(BN) == 71 <Field>
    field %w2(AS) = %i4(AS)
    field %w4(SP) = %i6(SP)
    field %w3(RP) = %i5(RP)
    field %w1(TS) = %i3(TS)
    field %w68 = %i7(BP)
    u32 %w174 = %i8
    u32 %w175 = %i9
    field %w170 = %i10
    u32 %w69 = %i11
    u32 %w60 = %i12
    u32 %w64 = %i13
    u32 %w62 = %i14
    field %w72 = %i15
    field %w73 = %i16
    u32 %w61 = %i17
    field %w91 = %i18
    field %w75 = %i19
    field %w176 = %i20
    u32 %w78 = %i21
    field %w179 = %i22
    u32 %w99 = %i23
    field %w178 = %i24
    field %w63 = %i25
    field %w54 = %i26
    u32 %w55 = %i27
    field %w56 = %i28
    u32 %w57 = %i29
    field %w58 = %i30
    field %w59 = %i31
    field %w180 = %w178
    field %o4(AS) = %w2(AS)
    field %o6(SP) = %w4(SP)
    field %o7(BP) = %w180
    field %o5(RP) = %w3(RP)
    field %o3(TS) = %w1(TS)
    field %o8 = %w68
    u32 %o9 = %w174
    u32 %o10 = %w175
    field %o11 = %w170
    u32 %o12 = %w69
    u32 %o13 = %w60
    u32 %o14 = %w64
    u32 %o15 = %w62
    field %o16 = %w72
    field %o17 = %w73
    u32 %o18 = %w61
    field %o19 = %w91
    field %o20 = %w75
    field %o21 = %w176
    u32 %o22 = %w78
    u32 %o23 = %w99
    field %o24 = %w63
    field %o25 = %w54
    u32 %o26 = %w55
    field %o27 = %w56
    u32 %o28 = %w57
    field %o29 = %w58
    field %o30 = %w59
    field %o1(BN) = %w179
Transition: -> %w179


--
Interpretation:
