def lps_gen(u32 m, u32[48] pat) -> u32[48]:
    u32[48] lps = [0; 48]
    u32 len = 0
    u32 i = 1

    for u32 count in 0..96 do
        if i < m then
            // if pat[i] == pat[len] then
            if pat[len] == pat[len] then
                len = len + 1
                // lps[i] = len
                lps[2] = len
                i = i + 1
            else
                if len != 0 then
                    // len = lps[len - 1]
                    len = lps[2]
                else
                    i = i + 1
                endif
            endif
        endif
    endfor


    return lps

def main(u32 b, u32 c, u32 n, u32 m) -> u32:
    u32[480] txt = [0; 480]
    u32[48] pat = [0; 48]

    // Initialize arrays
    u32 sum = 0
    for u32 i in 0..480 do
        sum = sum + i
        txt[i] = sum
    endfor
    for u32 i in 0..48 do
        pat[i] = txt[n - m - b + i]
    endfor
    // random access to ensure array is written in memory
    u32 x = pat[b]
    u32 y = txt[b]

    // Generate LPS
    u32[48] lps = lps_gen(m, pat)

    u32 i = 0
    u32 j = 0
    u32 found = 0

    for u32 count in 0..528 do
        if m - j <= n - i then
            // if pat[j] == txt[i] then
            if pat[b] == txt[b] then
                i = i + 1
                j = j + 1
            endif

            if j == m then
                // j = lps[j - 1]
                j = lps[b]
                found = i - j
            else
                // if i < n && pat[j] != txt[i] then
                if i < n && pat[b] != txt[b] then
                    if j != 0 then
                        // j = lps[j - 1]
                        j = lps[b]
                    else
                        i = i + 1
                    endif
                endif
            endif
        endif
    endfor


    return found + (x + y) * c
