from "./poseidon_constants.zok" import POSEIDON_C, POSEIDON_M

def ark(u32 N, field[0] state, field[741] c, u32 it) -> field[N]:
    for u32 i in 0..N do
        state[i] = state[i] + c[it + i]
    endfor
    return state

def sbox(u32 N, field[0] state, u32 f, u32 p, u32 r) -> field[N]:
    state[0] = state[0]**5
    for u32 i in 1..N do
        state[i] = ((r < f/2) || (r >= f/2 + p)) ? state[i]**5 : state[i]
    endfor
    return state

def mix(u32 N, field[0] state, field[100] m) -> field[N]:
    field[N] out = [0; N]
    for u32 i in 0..N do
        field acc = 0
        for u32 j in 0..N do
            acc = acc + (state[j] * m[i * 9 + j])
        endfor
        out[i] = acc
    endfor
    return out

def poseidon(u32 N, field[0] inputs) -> field:
    assert(N > 0)

    u32 t = N + 1

    u32 f = 8
    u32 p = 63

    // Constants are padded with zeroes to the maximum value calculated by
    // t * (f + p) = 497, where `t` (number of inputs + 1) is a max of 7.
    // This is done to keep the function generic, as resulting array size depends on `t`
    // and we do not want callers passing down constants.
    // This should be revisited once compiler limitations are gone.

    field[741] c = POSEIDON_C
    field[100] m = POSEIDON_M

    field[t] state = [0; t]
    for u32 i in 1..t do
        state[i] = inputs[i - 1]
    endfor

    for u32 r in 0..f+p do
        state = ark(t, state, c, r * t)
        state = sbox(t, state, f, p, r)
        state = mix(t, state, m)
    endfor

    return state[0]

def main() -> field:
    u32 n = 2
    field[n] inputs = [36100910961007780402688216664640044494471463724502444509207532685924843993798, 49876827934506437373017565612969249324636443423078467431508420191005678868756]
    field hash = poseidon(n, inputs)

    return hash