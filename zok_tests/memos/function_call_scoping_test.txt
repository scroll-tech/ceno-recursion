Given any function, can we simulate all stack push / pulls using physical memory?
Assume we are using pass continuation style
NO DOUBLE RECURSION (a calls b, b calls a)
NO RECURSIVE MAIN

--
TL;DR:
1. Function calls using physical memory seems possible using a Base Pointer. Although it is different from x86-32
   base pointers such that we don't have @BP per stack frame, rather a different @BP per call.
2. Also, base pointers need to be pushed along with any other STOREs, including scoping over local variables and
   function calls. There are some optimizations but the most aggressive push / pulls of @BP should always be correct.

--
Notations: we would utilize the following registers:
    @RP: return pointer, indicates where the function would return after the call ends. Undef in main function.
    @SP: physical memory size, the actual amount of space used in the physical memory, used for allocation.
    @BP: base pointer, indicating where the last stack frame is. Undef in main function.
    @RET: return value of a function

No additional scoping change will be performed in the following programs.

--
Example 1: Simple Function Call + Single Return

    def sum<N>(field[N] a, field k) -> field:
        field res = 0
        for u32 i in 0..N do
            res = res + a[i] + k
        endfor
        return res

    def main() -> u32:
        field[3] a = [0, 1, 2]
        field x = 0
        field i = sum(a, x)
        field[3] c = [0, 1, 3]
        i = c[2]
        field i = sum(c, i)
        return i

Transformation:

    def sum<N>(field[N] a, field k) -> field:
        field res = 0

        STORE_P(@SP, @SP)    // If @SP is ever touched in the current function, push the old @BP onto the stack,
        STORE_P(@SP + 1, i)
        @BP = @SP            // Set @BP to the value of @SP when the function begins
        @SP += 2

        for u32 i in 0..N do
            res = res + a[i] + k
        endfor
        return res

        LOAD_P(@BP + 1, i)
        LOAD_P(@BP, @BP)  // Set @BP to be the base pointer of the main function

    def main() -> u32:
        @SP = 0
        field[3] a = [0, 1, 2]  // Array allocation uses virtual memory, irrelevant to our scope
        field x = 0

        Function Call 1:
            STORE_P(@SP, a)  // Scope of `a` changes in function `sum`
            @BP = @SP  // Set base pointer, pointing to main
            @SP += 1
            u32 k = x    // Set parameters
            @RP = ?
            CALL SUM
            LOAD_P(@BP, a)
            field i = @RET

        field[3] c = [0, 1, 3]
        i = c[2]

        Function Call 2:
            STORE_P(@SP, a)
            @BP = @SP
            @SP += 1
            u32 a = c
            u32 k = i
            @RP = ?
            CALL SUM
            LOAD_P(@BP, a)
            field i = @RET

        return i

--
Example 2: Recursion + Multiple Returns

    def fib(u32 n) -> u32:
        u32 b = 0
        u32 k = 0
        if n == 0:
            return 0
        else if n == 1:
            b = 1  // Make it weird to reason about complex control flow
        else:
            return fib(n - 1) + fib(n - 2)
        return b

    def main() -> u32:
        u32 b = 7
        b = fib(b)
        b = fib(b)
        return b

Transformation:

def fib(u32 n) -> u32:

    STORE_P(@SP, @SP)
    STORE_P(@SP + 1, b)
    STORE_P(@SP + 2, k)  // k was only defined in recursive functions, extra care needed
    @BP = @SP
    @SP += 3

    u32 b = 0
    u32 k = 0
    if n == 0:
        @RET = 0
    else if n == 1:
        b = 1
        @RET = b  // Taking a shortcut here just to make things a bit easier
    else:
        Function Call 1:
            STORE_P(@SP, @SP)  // If we are clever we can avoid this
            STORE_P(@SP + 1, n)
            STORE_P(@SP + 2, @TMP1)  // Neither @TMP has appeared yet, but we need to STORE them
            STORE_P(@SP + 3, @TMP2)  // Recursion is weird
            STORE_P(@SP + 4, @RP)
            @BP = @SP
            @SP += 5
            n = n - 1
            @RP = ?
            CALL FIB
            LOAD_P(@BP + 4, @RP)
            LOAD_P(@BP + 3, @TMP2)   // We can eliminate @TMP2 entirely
            LOAD_P(@BP + 2, @TMP1)
            LOAD_P(@BP + 1, n)
            LOAD_P(@BP, @BP)
            u32 @TMP1 = @RET

        Function Call 2:
            STORE_P(@SP, @SP)  // Can't avoid this one
            STORE_P(@SP + 1, n)
            STORE_P(@SP + 2, @TMP1)
            STORE_P(@SP + 3, @TMP2)
            STORE_P(@SP + 4, @RP)
            @BP = @SP
            @SP += 5
            n = n - 2
            @RP = ?
            CALL FIB
            LOAD_P(@BP + 4, @RP)
            LOAD_P(@BP + 3, @TMP2)
            LOAD_P(@BP + 2, @TMP1)
            LOAD_P(@BP + 1, n)
            LOAD_P(@BP, @BP)
            u32 @TMP2 = @RET

        @RET = @TMP1 + @TMP2

    LOAD_P(@BP + 2, k)
    LOAD_P(@BP + 1, b)
    LOAD_P(@BP, @BP)

    def main() -> u32:
        u32 b = 7

        Function Call 1:
            @BP = @SP  // Base pointer was never used in main, but not setting it would make things more complicated
            u32 n = b
            @RP = ?
            CALL FIB
            u32 b = @RET

        Function Call 2:
            @BP = @SP
            u32 n = b
            @RP = ?
            CALL FIB
            u32 b = @RET

        return b
