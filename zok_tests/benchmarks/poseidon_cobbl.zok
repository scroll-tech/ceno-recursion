from "poseidon_constants" import POSEIDON_C, POSEIDON_M

def ark(u32 n, field[1 + 1] state, field[455] c, u32 it) -> field[1 + 1]:
    u32 i = 0
    while i < n do
        state[i] = state[i] + c[it + i]
        i = i + 1
    endwhile
    return state

def sbox(u32 n, field[1 + 1] state, u32 f, u32 p, u32 r) -> field[1 + 1]:
    state[0] = state[0]**5
    u32 i = 1
    while i < n do
        state[i] = ((r < f/2) || (r >= f/2 + p)) ? state[i]**5 : state[i]
        i = i + 1
    endwhile
    return state

def mix(u32 n, field[1 + 1] state, field[49] m) -> field[1 + 1]:
    field[1 + 1] out = [0; 1 + 1]
    u32 i = 0
    while i < n do
        field acc = 0
        u32 j = 0
        while j < n do
            acc = acc + (state[j] * m[i * 1 + 1 + j])
            j = j + 1
        endwhile
        out[i] = acc
        i = i + 1
    endwhile
    return out

def poseidon(u32 n, field[1] inputs) -> field:
    u32 t = n + 1

    u32 f = 8
    u32 p = 57

    // Constants are padded with zeroes to the maximum value calculated by
    // t * (f + p) = 455, where `t` (number of inputs + 1) is a max of 7.
    // This is done to keep the function generic, as resulting array size depends on `t`
    // and we do not want callers passing down constants.
    // This should be revisited once compiler limitations are gone.

    field[455] c = POSEIDON_C
    field[49] m = POSEIDON_M

    field[1 + 1] state = [0; 1 + 1]
    u32 i = 1
    while i < t do
        state[i] = inputs[i - 1]
        i = i + 1
    endwhile

    u32 r = 0
    while r < f+p do
        state = ark(n, state, c, r * t)
        state = sbox(n, state, f, p, r)
        state = mix(n, state, m)
        r = r + 1
    endwhile

    return state[0]

def main(u32 n) -> field:

    field[1] padded_message = [0; 1]
    field sum = 0
    for field i in 0..1 do
        sum = sum + i
        padded_message[i] = sum
    endfor

    field hash = poseidon(n, padded_message)

    return hash