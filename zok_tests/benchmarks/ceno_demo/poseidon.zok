from "poseidon_constants" import ALL_ROUND_CONSTANTS, MDS_MATRIX_CIRC, MDS_MATRIX_DIAG, FAST_PARTIAL_FIRST_ROUND_CONSTANT

def constant_layer(field[12] state, u32 round_ctr) -> field[12]:
    for u32 i in 0..12 do
        field round_constant = ALL_ROUND_CONSTANTS[round_ctr * 12 + i]
        state[i] = state[i] + round_constant
    endfor
    return state

def sbox_layer(field[12] state) -> field[12]:
    for u32 i in 0..12 do
        // x |--> x^7
        state[i] = state[i] ** 7
    endfor
    return state

def mds_layer(field[12] state) -> field[12]:
    array_decl field[12] result

    for u32 r in 0..12 do
        // mds_row_shf
        field res = 0
        for u32 i in 0..12 do
            res = res + state[(i + r) % 12] * MDS_MATRIX_CIRC[i]
        endfor
        res = res + state[r] * MDS_MATRIX_DIAG[r]
        result[r] = res
    endfor

    return result

def full_rounds(field[12] state, u32 round_ctr) -> field[12]:
    for u32 i in 0..4 do
        state = constant_layer(state, round_ctr)
        state = sbox_layer(state)
        state = mds_layer(state)
        round_ctr = round_ctr + 1
    endfor
    return state

def partial_rounds(field[12] state, u32 round_ctr) -> field[12]:
    for u32 i in 0..22 do
        state = constant_layer(state, round_ctr)
        state[0] = state[0] ** 7 // sbox
        state = mds_layer(state)
        round_ctr = round_ctr + 1
    endfor
    return state

def poseidon(field[12] inputs) -> field[12]:
    field[12] state = inputs
    state = full_rounds(state, 0)
    state = partial_rounds(state, 4)
    state = full_rounds(state, 26)

    return state

def main() -> field:
    field[12] inputs = [1, 2, 3, 4, 5, 6, 7, 8, 0, 0, 0, 0]
    field[12] hashes = poseidon(inputs)

    return hashes[0]