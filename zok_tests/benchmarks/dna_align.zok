/*
 * Computes the Longest Common Subsequence of two strings, one of 
 * length m and the other of length n in O(m*n) time
 */
def main(field b, field n) -> field:
    field[4] A = [0; 4]
    field[4] B = [0; 4]
    field[4] LCS = [0; 4]
    field arr_size = 4

    field i = 0
    field j = 0

    // Dynamic programming memo
    field[16] LL = [0; 16]
    // Hold choices made at each step, for use when backtracking
    field[16] choices = [0; 16]
    // Used when backtracking
    field diag = 0
    field down = 0
    field right = 0

    field i_iter = n
    for field count_i in 0..4 do
        if i_iter > 0 then
            field i = i_iter - 1
            field j_iter = n
            for field count_j in 0..4 do
                if j_iter > 0 then
                    field j = j_iter - 1
                    if A[i] == B[j] then
                        if 0 <= i+1 && i+1 < n && 0 <= j+1 && j+1 < n then
                            diag = LL[(i+1) * arr_size + j+1]
                        else
                            diag = 0
                        endif
                        // Diagonal jump
                        LL[i * arr_size + j] = 1 + diag
                        choices[i * arr_size + j] = 0
                    else
                        if 0 <= i+1 && i+1 < n && 0 <= j && j < n then
                            down = LL[(i+1) * arr_size + j]
                        else 
                            down = 0
                        endif
                        if 0 <= i && i < n && 0 <= j+1 && j+1 < n then
                            right = LL[i * arr_size + j+1]
                        else
                            right = 0
                        endif
                        // Assertion: down and right differ by at most 1
                        if down == right + 1 then
                            // Jump down
                            LL[i * arr_size + j] = down
                            choices[i * arr_size + j] = 1
                        else
                            // Jump right if down == right or right == down + 1.
                            LL[i * arr_size + j] = right
                            choices[i * arr_size + j] = 2
                        endif
                    endif
                    j_iter = j_iter - 1
                endif
            endfor
            i_iter = i_iter - 1
        endif
    endfor


    // Construct LCS, allowing it to have intermittent zero characters
    field iPtr = 0
    field jPtr = 0 // Pointers to where in LL we are with respect to backtracking

    for field i in 0..4 do
        if i < n then
            LCS[i] = 0 //If A[i] is not in the LCS, this remains 0.
            for field j in 0..4 do
                if j < n then
                    if i == iPtr && j == jPtr then // Loop until we meet up with the iPtr and jPtr
                        if choices[i * arr_size + j] == 0 then // we made a diagonal jump here
                            LCS[i] = A[i]
                            iPtr = iPtr + 1
                            jPtr = jPtr + 1
                        else
                            if choices[i * arr_size + j] == 1 then // jump down
                                iPtr = iPtr + 1
                            else // jump right
                                jPtr = jPtr + 1
                            endif
                        endif
                    endif
                endif
            endfor
        endif
    endfor

    // Now move any string terminator (\0) characters in LCS to the end ala insertion sort
    for field i in 1..4 do
        if i < n then
            field inserted = 0
            for field j in 0..4 do
                if j < i then
                    if LCS[j] == 0 && inserted == 0 then
                        // Swap LCS[j] and LCS[i].
                        LCS[j] = LCS[i]
                        LCS[i] = 0
                        inserted = 1
                    endif
                    j = j + 1
                endif
            endfor
            i = i + 1
        endif
    endfor


    return LCS[b]