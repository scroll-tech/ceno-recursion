def lps_gen(u32 m, u32[m] pat) -> u32[m]:
    u32[m] lps = [0; m]

    u32 len = 0
    u32 i = 1

    while i < m do
        if pat[i] == pat[len] then
            len = len + 1
            lps[i] = len
            i = i + 1
        else
            if len != 0 then
                len = lps[len - 1]
            else
                i = i + 1
            endif
        endif
    endwhile


    return lps

def main(u32 b, u32 c, u32 n, u32 m) -> u32:
    array_decl u32[n] txt
    array_decl u32[m] pat
    // Initialize arrays
    u32 sum = 0
    for u32 i in 0..n do
        sum = sum + i
        txt[i] = sum
    endfor
    for u32 i in 0..m do
        pat[i] = txt[n - m - b + i]
    endfor

    // random access to ensure array is written in memory
    u32 x = pat[b]
    u32 y = txt[b]

    // Generate LPS
    u32[m] lps = lps_gen(m, pat)

    u32 i = 0
    u32 j = 0
    u32 found = 0

    while m - j <= n - i do
        if pat[j] == txt[i] then
            i = i + 1
            j = j + 1
        endif

        if j == m then
            j = lps[j - 1]
            found = i - j
        else
            if i < n && pat[j] != txt[i] then
                if j != 0 then
                    j = lps[j - 1]
                else
                    i = i + 1
                endif
            endif
        endif
    endwhile
    

    return found + (x + y) * c
