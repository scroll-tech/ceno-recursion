from "./poseidon2.zok" import poseidon2
from "./poseidon5.zok" import poseidon5

// Merkle paths are now directly supplied as witnesses
// struct MerkleProof {
//     // All internal nodes on the path
//     field[ro 0] path
// }

// Perform two merkle tree verification together
// Both tree are of the same size, opening the same index
// Specifically built for compact certificate
def verify_merkle_batch(
    u32 index,
    field root_0, 
    field[ro 5] entry_0,
    field root_1, 
    field[ro 5] entry_1, 
    u32 depth
) -> field:
    field index_assemb = 0
    // hash of leaf
    field cur_node_0 = poseidon5(entry_0[0], entry_0[1], entry_0[2], entry_0[3], entry_0[4])
    field cur_node_1 = poseidon5(entry_1[0], entry_1[1], entry_1[2], entry_1[3], entry_1[4])
    field factor = 1
    // hash of internal nodes
    for u32 i in 0..depth do
        // Depending on index, cur_node and proof[i] will be on two sides of the inputs
        witness field next_bit
        assert(next_bit * (next_bit - 1) == 0)
        index_assemb = index_assemb + next_bit * factor
        factor = factor * 2
        witness field next_path
        field state1 = next_bit == 0 ? cur_node_0 : next_path
        field state2 = next_bit == 0 ? next_path : cur_node_0
        cur_node_0 = poseidon2(state1, state2)
        witness field next_path
        field state1 = next_bit == 0 ? cur_node_1 : next_path
        field state2 = next_bit == 0 ? next_path : cur_node_1
        cur_node_1 = poseidon2(state1, state2)
    endfor
    assert(index_assemb == (F)index)
    assert(cur_node_0 == root_0)
    assert(cur_node_1 == root_1)
    return 1