from "ext_field" import ExtField, Challenge, to_ext, ext_mul, ext_eq

from "poseidon" import Digest, poseidon
from "poseidon_permutation" import PoseidonPermutation, new_poseidon_permutation, set_from_slice, permute, squeeze
from "poseidon_hash" import compress, two_to_one, hash_n_to_m_no_pad, hash_or_noop

struct Transcript {
    PoseidonPermutation permutation
}

def inline new_transcript(u32 label_len, field[0] label) -> Transcript:
    PoseidonPermutation perm = new_poseidon_permutation(0, [])
    perm = set_from_slice(perm, label_len, label, 0)
    perm = permute(perm)
    return Transcript {
        permutation: perm
    }

// Append the message to the transcript.
def inline append_message(Transcript self, u32 msg_len, field[0] msg) -> Transcript:
    self.permutation = set_from_slice(self.permutation, msg_len, msg, 0)
    self.permutation = permute(self.permutation)
    return self

// Append the field extension element to the transcript.
def inline append_field_element_ext(Transcript self, ExtField element) -> Transcript:
    self.permutation = set_from_slice(self.permutation, 2, [element.b0, element.b1], 0)
    self.permutation = permute(self.permutation)
    return self

def inline append_field_element_exts(Transcript self, u32 elem_len, ExtField[0] elements) -> Transcript:
    for u32 i in 0..elem_len do
        self = append_field_element_ext(self, elements[i])
    endfor
    return self

// Append the field elemetn to the transcript.
def inline append_field_element(Transcript self, field element) -> Transcript:
    self.permutation = set_from_slice(self.permutation, 1, [element], 0)
    self.permutation = permute(self.permutation)
    return self

// Append the challenge to the transcript.
def append_challenge(Transcript self, Challenge challenge) -> Transcript:
    self.permutation = set_from_slice(self.permutation, 2, [challenge.elements.b0, challenge.elements.b1], 0)
    self.permutation = permute(self.permutation)
    return self

struct TranscriptAndChallenge {
    Transcript transcript
    Challenge challenge
}

// Generate the challenge from the current transcript
// and append it to the transcript.
//
// The output field element is statistical uniform as long
// as the field has a size less than 2^384.
def get_and_append_challenge(Transcript self, u32 label_len, field[0] label) -> TranscriptAndChallenge:
    self = append_message(self, label_len, label)
    field[8] sq = squeeze(self.permutation)
    Challenge challenge = Challenge {
        elements: ExtField {
            b0: sq[0],
            b1: sq[1]
        }
    }
    return TranscriptAndChallenge {
        transcript: self,
        challenge: challenge
    }

def read_challenge(Transcript self) -> Challenge:
    field[8] sq = squeeze(self.permutation)
    return Challenge {
        elements: ExtField {
            b0: sq[0],
            b1: sq[1]
        }
    }

struct TranscriptAndChallengePows {
    Transcript transcript
    ExtField[0] challenge_pows
}

// derive challenge from transcript and return all pows result
def get_challenge_pows(u32 size, Transcript transcript) -> TranscriptAndChallengePows:
    TranscriptAndChallenge t_c = get_and_append_challenge(transcript, 3, [2334393380763430755, 7286952176161813875, 1936482678]) // b"combine subset evals"
    transcript = t_c.transcript
    ExtField alpha = t_c.challenge.elements
    array_decl ExtField[size] alpha_pows
    ExtField state = to_ext(1)
    for u32 i in 0..size do
        alpha_pows[i] = state
        state = ext_mul(state, alpha)
    endfor
    return TranscriptAndChallengePows {
        transcript: transcript,
        challenge_pows: alpha_pows
    }

def main() -> field:
    Transcript transcript = new_transcript(1, [508474648946]) // b"riscv"
    // Challenge 0
    TranscriptAndChallenge t0 = get_and_append_challenge(transcript, 2, [6878231886748938864, 7173491]) // b"product_sum"
    transcript = t0.transcript
    Challenge initial_rt = t0.challenge
    // Ext 0
    transcript = append_field_element_exts(transcript, 2, [
        ExtField {
            b0: 1,
            b1: 2
        },
        ExtField {
            b0: 3,
            b1: 4
        }
    ])
    // Challenge 1
    TranscriptAndChallenge t1 = get_and_append_challenge(transcript, 1, [435527247213]) // b"merge"
    transcript = t1.transcript
    Challenge r_merge = t1.challenge
    Challenge c = read_challenge(transcript)
    return r_merge.elements.b1