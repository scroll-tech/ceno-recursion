from "./poseidon_constants.zok" import POSEIDON_C, POSEIDON_M

def ark(u32 t, field[6] state, field[441] c, u32 it) -> field[6]:
    for u32 i in 0..6 do
        state[i] = state[i] + c[it + i]
    endfor
    return state

def sbox(u32 t, field[6] state, u32 f, u32 p, u32 r) -> field[6]:
    state[0] = state[0]**5
    for u32 i in 1..t do
        state[i] = ((r < f/2) || (r >= f/2 + p)) ? state[i]**5 : state[i]
    endfor
    return state

def mix(u32 t, field[6] state, field[81] m) -> field[6]:
    field[6] out = [0; 6]
    for u32 i in 0..6 do
        field acc = 0
        bool in_bound = true
        for u32 j in 0..6 do
            in_bound = in_bound && j != t
            if in_bound then
                acc = acc + (state[j] * m[i * 9 + j])
            endif
        endfor
        out[i] = acc
    endfor
    return out

def poseidon(u32 N, field[0] inputs) -> field:
    assert(N > 0 && N <= 5) // max 5 inputs

    u32 t = N + 1
    u32[7] rounds_p = [56, 57, 56, 60, 60, 63, 64, 63]

    u32 f = 8
    u32 p = rounds_p[(t - 2)]

    // Constants are padded with zeroes to the maximum value calculated by
    // t * (f + p) = 497, where `t` (number of inputs + 1) is a max of 7.
    // This is done to keep the function generic, as resulting array size depends on `t`
    // and we do not want callers passing down constants.
    // This should be revisited once compiler limitations are gone.

    field[441] c = POSEIDON_C
    field[81] m = POSEIDON_M

    field[6] state = [0; 6]
    // Only copy the first N entry
    u32 i_minus_one_bounded = 0
    for u32 i in 1..6 do
        state[i] = inputs[i_minus_one_bounded]
        i_minus_one_bounded = i_minus_one_bounded + 1 == N ? i_minus_one_bounded : i_minus_one_bounded + 1
    endfor

    for u32 r in 0..f+p do
        state = ark(t, state, c, r * t)
        state = sbox(t, state, f, p, r)
        state = mix(t, state, m)
    endfor

    return state[0]

def main() -> field:
    u32 n = 5
    field[n] inputs = [1, 2, 3, 4, 5]
    field hash = poseidon(n, inputs)

    return hash