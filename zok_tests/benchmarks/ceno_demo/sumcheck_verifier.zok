from "ext_field" import ExtField, from_bases, to_ext, ext_eq, ext_neq, ext_add, ext_sub, ext_neg, ext_mul, ext_invert, Challenge

from "poseidon" import Digest, poseidon
from "poseidon_permutation" import PoseidonPermutation, new_poseidon_permutation, set_from_slice, permute, squeeze
from "poseidon_hash" import compress, two_to_one, hash_n_to_m_no_pad, hash_or_noop

from "transcript" import Transcript, TranscriptAndChallenge, TranscriptAndChallengePows, new_transcript, append_message, append_field_element_ext, get_and_append_challenge, read_challenge
from "sumcheck_structs" import SumcheckProof, IOPProverMessage, VPAuxInfo, SumCheckSubClaim, SumcheckIOPVerifierState, SumcheckIOPVerifierStateAndTranscript, SumCheckSubClaimAndTranscript

// Despite the original function returning the challenge, the return value is never used
def verify_round_and_update_state(SumcheckIOPVerifierState self, IOPProverMessage prover_msg, Transcript transcript) -> SumcheckIOPVerifierStateAndTranscript:
    assert(!self.finished)

    // In an interactive protocol, the verifier should
    //
    // 1. check if the received 'P(0) + P(1) = expected`.
    // 2. set `expected` to P(r)`
    //
    // When we turn the protocol to a non-interactive one, it is sufficient to defer
    // such checks to `check_and_generate_subclaim` after the last round.
    TranscriptAndChallenge tc = get_and_append_challenge(transcript, 2, [7809644666444607049, 110425579418144]) // b"Internal round"
    transcript = tc.transcript
    Challenge challenge = tc.challenge
    self.challenges[self.round - 1] = challenge
    self.polynomials_received[self.round - 1] = prover_msg.evaluations

    if self.round == self.num_vars then
        // accept and close
        self.finished = true
    else
        // proceed to the next round
        self.round = self.round + 1
    endif
    return SumcheckIOPVerifierStateAndTranscript {
        vs: self,
        t: transcript
    }

def interpolate_uni_poly(u32 p_i_len, ExtField[0] p_i, ExtField eval_at) -> ExtField:
    u32 len = p_i_len
    array_decl ExtField[len] evals

    // Combine `prod = \prod_{j} (eval_at - j)`
    // with `denom_up = field_factorial(len - 1)`
    ExtField prod = eval_at
    evals[0] = eval_at
    ExtField res = to_ext(0)
    ExtField denom_up = to_ext(1)
    for u32 e in 1..len do
        ExtField tmp = ext_sub(eval_at, to_ext(e))
        evals[e] = tmp
        prod = ext_mul(prod, tmp)
        denom_up = ext_mul(denom_up, to_ext(e))
    endfor
    ExtField denom_down = to_ext(1)

    u32 it = len
    while it > 0 do
        u32 i = it - 1
        // res = res + p_i[i] * prod * denom_down / (denom_up * evals[i])
        res = ext_add(res, ext_mul(ext_mul(ext_mul(p_i[i], prod), denom_down), ext_invert(ext_mul(denom_up, evals[i]))))

        // compute denom for the next step is current_denom * (len-i)/i
        if i != 0 then
            // denom_up = -1 * denom_up * (F)(len - i)
            denom_up = ext_neg(ext_mul(denom_up, to_ext(len - i)))
            // denom_down = denom_down * (F)i
            denom_down = ext_mul(denom_down, to_ext(i))
        endif
        it = it - 1
    endwhile
    return res

def check_and_generate_subclaim(SumcheckIOPVerifierState self, ExtField asserted_sum) -> SumCheckSubClaim:
    assert(self.finished)
    // assert(self.polynomials_received.len() == self.num_vars)

    // the deferred check during the interactive phase:
    // 2. set `expected` to P(r)`

    array_decl ExtField[self.num_vars + 1] expected_vec
    // insert the asserted_sum to the first position of the expected vector
    expected_vec[0] = asserted_sum
    // generate and verify expected_vec in the same loop
    for u32 i in 0..self.num_vars do
        ExtField[self.max_degree + 1] evaluations = self.polynomials_received[i]
        Challenge challenge = self.challenges[i]
        // assert(evaluations.len() == self.max_degree + 1)
        expected_vec[i + 1] = interpolate_uni_poly(self.max_degree + 1, evaluations, challenge.elements)
        ExtField expected = expected_vec[i]
        assert(ext_eq(ext_add(evaluations[0], evaluations[1]), expected) == 1)
    endfor

    return SumCheckSubClaim {
        point: self.challenges,
        // the last expected value (not checked within this function) will be included in the subclaim
        expected_evaluation: expected_vec[self.num_vars]
    }

def verify_sumcheck(ExtField claimed_sum, SumcheckProof proof, VPAuxInfo aux_info, Transcript t) -> SumCheckSubClaimAndTranscript:
    if aux_info.num_variables == 0 then
        return SumCheckSubClaimAndTranscript {
            sc: SumCheckSubClaim {
                point: [],
                expected_evaluation: claimed_sum
            },
            t: t
        }
    endif
    t = append_message(t, 1, [(F)aux_info.num_variables])
    t = append_message(t, 1, [(F)aux_info.max_degree])

    array_decl Challenge[aux_info.num_variables] challenges
    array_decl ExtField[aux_info.num_variables][0] polynomials_received
    SumcheckIOPVerifierState vs = SumcheckIOPVerifierState {
        round: 1,
        num_vars: aux_info.num_variables,
        max_degree: aux_info.max_degree,
        finished: false,
        // There are probably more efficient ways to do this (maybe skip initialization altogether?)
        polynomials_received: polynomials_received,
        challenges: challenges
    }
    for u32 i in 0..aux_info.num_variables do
        IOPProverMessage prover_msg = proof.proofs[i]
        for u32 j in 0..aux_info.max_degree + 1 do
            t = append_field_element_ext(t, prover_msg.evaluations[j])
        endfor
        SumcheckIOPVerifierStateAndTranscript vs_t = verify_round_and_update_state(vs, prover_msg, t)
        vs = vs_t.vs
        t = vs_t.t
    endfor

    SumCheckSubClaim sc = check_and_generate_subclaim(vs, claimed_sum)
    return SumCheckSubClaimAndTranscript {
        sc: sc,
        t: t
    }

def test_interpolate() -> field:
    ExtField[3] p_i = [from_bases(2649376749893690711, 17218516312374968899), from_bases(2831708821143067610, 14218239706904981658), from_bases(9757815734812382814, 12686601350460486396)]
    ExtField eval_at = from_bases(11898179702182245198, 4100753405466582436)
    ExtField res = interpolate_uni_poly(3, p_i, eval_at)
    assert(res.b0 == 5227450849765426377)
    assert(res.b1 == 6732102312355077803)
    return 1

def test_sumcheck() -> field:
    u32 max_degree = 2
    u32 num_vars = 10
    ExtField claimed_sum = from_bases(5381739234459659577, 0)
    SumcheckProof proof = SumcheckProof {
        points: [
            from_bases(1302225541414200547, 12958788515171733116),
            from_bases(10901875112340244795, 4968657076863547813),
            from_bases(11898179702182245198, 4100753405466582436),
            from_bases(10092044199033547825, 9710167393108245559),
            from_bases(7068724522183158216, 4064479482636010224),
            from_bases(16301080299104848832, 12457446829551121118),
            from_bases(8763035400087168573, 1741651985650175190),
            from_bases(15235251281196635963, 7806221173787657120),
            from_bases(5242186385561037625, 6233572109404572549),
            from_bases(16463082648752624742, 8065453395071611817)
        ],
        proofs: [
            IOPProverMessage { evaluations: [from_bases(15625839883379815370, 0), from_bases(8202643420494428528, 0), from_bases(9123088646716015485, 0)] },
            IOPProverMessage { evaluations: [from_bases(14254061527995825859, 9110557621378684481), from_bases(18156701265705244163, 9862996344676813793), from_bases(11188546092662077216, 18049905361602751908)] },
            IOPProverMessage { evaluations: [from_bases(2649376749893690711, 17218516312374968899), from_bases(2831708821143067610, 14218239706904981658), from_bases(9757815734812382814, 12686601350460486396)] },
            IOPProverMessage { evaluations: [from_bases(7233386715498747060, 7095704565502922002), from_bases(16440808203681263638, 18083141816266740122), from_bases(11636965197628714193, 5215192044745778373)] },
            IOPProverMessage { evaluations: [from_bases(15772292650490448718, 3991853446702494823), from_bases(4186600943806660010, 17621743141803960047), from_bases(352102000098103930, 12412411835474770419)] },
            IOPProverMessage { evaluations: [from_bases(11729167424270545100, 3636283511385393242), from_bases(3826595307448355232, 162243787959849647), from_bases(17161249725578724202, 17929180343846829204)] },
            IOPProverMessage { evaluations: [from_bases(13368631180057455090, 14861314157668241575), from_bases(11107368119284055473, 17075000495691848214), from_bases(16875625485236122780, 2373391750072719180)] },
            IOPProverMessage { evaluations: [from_bases(5442805463265784333, 7202328442596962592), from_bases(8239797216930988234, 9707256012980634977), from_bases(5985066942186614960, 9596100722667064390)] },
            IOPProverMessage { evaluations: [from_bases(901192351431457821, 6361354629487469004), from_bases(10739582455820625232, 17441647146902346169), from_bases(6119905167433210895, 8599655811702501182)] },
            IOPProverMessage { evaluations: [from_bases(11827470633030823617, 8647186968760557107), from_bases(3770405393914766850, 2961926829994381338), from_bases(4705100426159075464, 4174151454217282968)] }
        ]
    }
    VPAuxInfo aux_info = VPAuxInfo {
        max_degree: max_degree,
        num_variables: num_vars
    }
    Transcript t = Transcript {
        permutation: PoseidonPermutation {
            state: [787530367118369448, 6445557903967755975, 8764669763990785381, 8742660309018244752, 13094649375372052718, 8740822461868995925, 2285718199586959125, 15249283288261624815, 6496188985355145949, 1334424030710363167, 15712076019906120036, 9704033442049526914]
        }
    }

    SumCheckSubClaimAndTranscript sc_t = verify_sumcheck(claimed_sum, proof, aux_info, t)
    t = sc_t.t
    Challenge c = read_challenge(t)
    return c.elements.b0
    // return sc.point[0].elements.b0

def main() -> field:
    field tmp = test_interpolate()
    return test_sumcheck()
