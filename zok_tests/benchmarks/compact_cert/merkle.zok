from "./poseidon.zok" import poseidon, ark, sbox, mix

struct MerkleProof {
    // The other leaf on the path
    field[3] leaf
    // All internal nodes on the path
    field[0] path
}

def verify_merkle(MerkleProof proof, field root, u32 index, field[3] entry, u32 depth) -> bool:
    // depth = 0: hash of leaf
    field[6] inputs = index % 2 == 0 ? [entry[0], entry[1], entry[2], proof.leaf[0], proof.leaf[1], proof.leaf[2]] : [proof.leaf[0], proof.leaf[1], proof.leaf[2], entry[0], entry[1], entry[2]]
    index = index / 2
    field cur_node = poseidon(6, inputs)
    // depth = 1..: hash of internal nodes
    for u32 i in 1..depth do
        // Depending on index, cur_node and proof[i] will be on two sides of the inputs
        field[2] inputs = index % 2 == 0 ? [cur_node, proof.path[i - 1]] : [proof.path[i - 1], cur_node]
        index = index / 2
        cur_node = poseidon(2, inputs)
    endfor
    return cur_node == root

def main() -> u32:
    // construct proof for depth = 2, index = 2
    u32 depth = 2
    u32 index = 2
    MerkleProof proof = MerkleProof {
        leaf: [3, 3, 3],
        path: [1456623673339096257817090108755639590551884867406093321072892464683931189590]
    }
    field root = 5614637387698599511130117795541669718584168502075238283514014523186204602525
    assert(verify_merkle(proof, root, index, [2, 2, 2], depth))
    return 1
