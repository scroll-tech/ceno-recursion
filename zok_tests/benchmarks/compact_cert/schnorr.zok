from "./poseidon.zok" import poseidon, ark, sbox, mix

const field A = 526
const field B = 265
const u32 WIDTH = 253

struct Point {
    field x,
    field y
}

def point_add(Point a, Point b) -> Point:
    field m = a.x != b.x ? (b.y - a.y) / (b.x - a.x) : (3 * a.x * a.x + A) / (2 * a.y)
    field x3 = m * m - a.x - b.x
    field y3 = m * (a.x - x3) - b.y
    return Point {
        x: x3,
        y: y3
    }

// k_bits is in big-endian of length 253
// Use k_bits for multiplication while simultaneous check it matches k
def point_mul(Point a, Field k, bool[0] k_bits) -> Point:
    field k_assemb = 1
    Point a_k = a
    u32 i = 0
    while !k_bits[i] do
        i = i + 1
    endwhile
    i = i + 1
    while i < WIDTH {
        a_k = point_add(a_k, a_k)
        k_assemb = k_assemb * 2
        if k_bits[i] then
            a_k = point_add(a_k, a)
            k_assemb = k_assemb + 1 
        endif
        i = i + 1
    }
    assert(k_assemb == k)
    return a_k

struct PublicKey {
    Point p,
    Point q
}

struct Signature {
    Point r,
    field s,
    bool[0] s_bits
}

def verify_signature(field msg, PublicKey pk, Signature sig, bool[0] e_bits) -> bool:
    // Check all points are on the curve
    assert(pk.p.y * pk.p.y = pk.p.x * pk.p.x * pk.p.x + A * pk.p.x + B);
    assert(pk.q.y * pk.q.y = pk.q.x * pk.q.x * pk.q.x + A * pk.q.x + B);
    assert(sig.r.y * sig.r.y = sig.r.x * sig.r.x * sig.r.x + A * sig.r.x + B);

    field[3] inputs = [msg, sig.r.x, sig.r.y]
    field e = poseidon(3, inputs)
    // assert s_bits and e_bits add up to s and e
    field s_assemb = 0
    field e_assemb = 0
    for u32 i in 0..WIDTH do
        s_assemb = s_assemb * 2
        e_assemb = e_assemb * 2
        if sig.s_bits[i] then
            s_assemb = s_assemb + 1
        endif
        if e_bits[i] then
            e_assemb = e_assemb + 1
        endif
    endfor
    assert(s_assemb == s)
    assert(e_assemb == e)
    Point eq = point_mul(pk.q, e)
    Point sp = point_mul(pk.p, sig.s, sig.s_bits)
    return curve_add(&sig.r, &eq) == sp
